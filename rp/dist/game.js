"use strict";

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

let NoticeView_Generate = class NoticeView_Generate extends UIScript {
    get con_top_notice() {
        if (!this.con_top_notice_Internal && this.uiWidgetBase) {
            this.con_top_notice_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/con_top_notice");
        }
        return this.con_top_notice_Internal;
    }
    get con_second_notice() {
        if (!this.con_second_notice_Internal && this.uiWidgetBase) {
            this.con_second_notice_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/con_second_notice");
        }
        return this.con_second_notice_Internal;
    }
    get con_top_notice_2() {
        if (!this.con_top_notice_2_Internal && this.uiWidgetBase) {
            this.con_top_notice_2_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/con_top_notice_2");
        }
        return this.con_top_notice_2_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {}
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

NoticeView_Generate = __decorate([ UIBind("UI/common/notice/NoticeView.ui") ], NoticeView_Generate);

var NoticeView_Generate$1 = NoticeView_Generate;

var foreign147 = Object.freeze({
    __proto__: null,
    default: NoticeView_Generate$1
});

let TopNoticeItem_Generate = class TopNoticeItem_Generate extends UIScript {
    get txt_context() {
        if (!this.txt_context_Internal && this.uiWidgetBase) {
            this.txt_context_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/txt_context");
        }
        return this.txt_context_Internal;
    }
    get eff() {
        if (!this.eff_Internal && this.uiWidgetBase) {
            this.eff_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/eff");
        }
        return this.eff_Internal;
    }
    get eff_line_1() {
        if (!this.eff_line_1_Internal && this.uiWidgetBase) {
            this.eff_line_1_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/eff_line_1");
        }
        return this.eff_line_1_Internal;
    }
    get eff_line_1_1() {
        if (!this.eff_line_1_1_Internal && this.uiWidgetBase) {
            this.eff_line_1_1_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/eff_line_1_1");
        }
        return this.eff_line_1_1_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.txt_context);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

TopNoticeItem_Generate = __decorate([ UIBind("UI/common/notice/TopNoticeItem.ui") ], TopNoticeItem_Generate);

var TopNoticeItem_Generate$1 = TopNoticeItem_Generate;

var foreign149 = Object.freeze({
    __proto__: null,
    default: TopNoticeItem_Generate$1
});

const Easing = {
    Linear: {
        None: function(amount) {
            return amount;
        }
    },
    Quadratic: {
        In: function(amount) {
            return amount * amount;
        },
        Out: function(amount) {
            return amount * (2 - amount);
        },
        InOut: function(amount) {
            if ((amount *= 2) < 1) {
                return .5 * amount * amount;
            }
            return -.5 * (--amount * (amount - 2) - 1);
        }
    },
    Cubic: {
        In: function(amount) {
            return amount * amount * amount;
        },
        Out: function(amount) {
            return --amount * amount * amount + 1;
        },
        InOut: function(amount) {
            if ((amount *= 2) < 1) {
                return .5 * amount * amount * amount;
            }
            return .5 * ((amount -= 2) * amount * amount + 2);
        }
    },
    Quartic: {
        In: function(amount) {
            return amount * amount * amount * amount;
        },
        Out: function(amount) {
            return 1 - --amount * amount * amount * amount;
        },
        InOut: function(amount) {
            if ((amount *= 2) < 1) {
                return .5 * amount * amount * amount * amount;
            }
            return -.5 * ((amount -= 2) * amount * amount * amount - 2);
        }
    },
    Quintic: {
        In: function(amount) {
            return amount * amount * amount * amount * amount;
        },
        Out: function(amount) {
            return --amount * amount * amount * amount * amount + 1;
        },
        InOut: function(amount) {
            if ((amount *= 2) < 1) {
                return .5 * amount * amount * amount * amount * amount;
            }
            return .5 * ((amount -= 2) * amount * amount * amount * amount + 2);
        }
    },
    Sinusoidal: {
        In: function(amount) {
            return 1 - Math.sin((1 - amount) * Math.PI / 2);
        },
        Out: function(amount) {
            return Math.sin(amount * Math.PI / 2);
        },
        InOut: function(amount) {
            return .5 * (1 - Math.sin(Math.PI * (.5 - amount)));
        }
    },
    Exponential: {
        In: function(amount) {
            return amount === 0 ? 0 : Math.pow(1024, amount - 1);
        },
        Out: function(amount) {
            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
        },
        InOut: function(amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            if ((amount *= 2) < 1) {
                return .5 * Math.pow(1024, amount - 1);
            }
            return .5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
        }
    },
    Circular: {
        In: function(amount) {
            return 1 - Math.sqrt(1 - amount * amount);
        },
        Out: function(amount) {
            return Math.sqrt(1 - --amount * amount);
        },
        InOut: function(amount) {
            if ((amount *= 2) < 1) {
                return -.5 * (Math.sqrt(1 - amount * amount) - 1);
            }
            return .5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
        }
    },
    Elastic: {
        In: function(amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
        },
        Out: function(amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            return Math.pow(2, -10 * amount) * Math.sin((amount - .1) * 5 * Math.PI) + 1;
        },
        InOut: function(amount) {
            if (amount === 0) {
                return 0;
            }
            if (amount === 1) {
                return 1;
            }
            amount *= 2;
            if (amount < 1) {
                return -.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
            }
            return .5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
        }
    },
    Back: {
        In: function(amount) {
            const s = 1.70158;
            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);
        },
        Out: function(amount) {
            const s = 1.70158;
            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;
        },
        InOut: function(amount) {
            const s = 1.70158 * 1.525;
            if ((amount *= 2) < 1) {
                return .5 * (amount * amount * ((s + 1) * amount - s));
            }
            return .5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);
        }
    },
    Bounce: {
        In: function(amount) {
            return 1 - Easing.Bounce.Out(1 - amount);
        },
        Out: function(amount) {
            if (amount < 1 / 2.75) {
                return 7.5625 * amount * amount;
            } else if (amount < 2 / 2.75) {
                return 7.5625 * (amount -= 1.5 / 2.75) * amount + .75;
            } else if (amount < 2.5 / 2.75) {
                return 7.5625 * (amount -= 2.25 / 2.75) * amount + .9375;
            } else {
                return 7.5625 * (amount -= 2.625 / 2.75) * amount + .984375;
            }
        },
        InOut: function(amount) {
            if (amount < .5) {
                return Easing.Bounce.In(amount * 2) * .5;
            }
            return Easing.Bounce.Out(amount * 2 - 1) * .5 + .5;
        }
    },
    generatePow: function(power = 4) {
        power = power < Number.EPSILON ? Number.EPSILON : power;
        power = power > 1e4 ? 1e4 : power;
        return {
            In: function(amount) {
                return amount ** power;
            },
            Out: function(amount) {
                return 1 - (1 - amount) ** power;
            },
            InOut: function(amount) {
                if (amount < .5) {
                    return (amount * 2) ** power / 2;
                }
                return (1 - (2 - amount * 2) ** power) / 2 + .5;
            }
        };
    }
};

const Interpolation = {
    Linear: function(v, k) {
        const m = v.length - 1;
        const f = m * k;
        const i = Math.floor(f);
        const fn = Interpolation.Utils.Linear;
        if (k < 0) {
            return fn(v[0], v[1], f);
        }
        if (k > 1) {
            return fn(v[m], v[m - 1], m - f);
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
    },
    Bezier: function(v, k) {
        let b = 0;
        const n = v.length - 1;
        const pw = Math.pow;
        const bn = Interpolation.Utils.Bernstein;
        for (let i = 0; i <= n; i++) {
            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
        }
        return b;
    },
    CatmullRom: function(v, k) {
        const m = v.length - 1;
        let f = m * k;
        let i = Math.floor(f);
        const fn = Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
            if (k < 0) {
                i = Math.floor(f = m * (1 + k));
            }
            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
        } else {
            if (k < 0) {
                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
            }
            if (k > 1) {
                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
            }
            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
        }
    },
    Utils: {
        Linear: function(p0, p1, t) {
            return (p1 - p0) * t + p0;
        },
        Bernstein: function(n, i) {
            const fc = Interpolation.Utils.Factorial;
            return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: function() {
            const a = [ 1 ];
            return function(n) {
                let s = 1;
                if (a[n]) {
                    return a[n];
                }
                for (let i = n; i > 1; i--) {
                    s *= i;
                }
                a[n] = s;
                return s;
            };
        }(),
        CatmullRom: function(p0, p1, p2, p3, t) {
            const v0 = (p2 - p0) * .5;
            const v1 = (p3 - p1) * .5;
            const t2 = t * t;
            const t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
        }
    }
};

class Sequence {
    static nextId() {
        return Sequence._nextId++;
    }
}

Sequence._nextId = 0;

class Group {
    constructor() {
        this._tweens = {};
        this._tweensAddedDuringUpdate = {};
    }
    getAll() {
        return Object.keys(this._tweens).map((tweenId => this._tweens[tweenId]));
    }
    removeAll() {
        this._tweens = {};
    }
    add(tween) {
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
    }
    remove(tween) {
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
    }
    update(time = now(), preserve = false) {
        let tweenIds = Object.keys(this._tweens);
        if (tweenIds.length === 0) {
            return false;
        }
        while (tweenIds.length > 0) {
            this._tweensAddedDuringUpdate = {};
            for (let i = 0; i < tweenIds.length; i++) {
                const tween = this._tweens[tweenIds[i]];
                const autoStart = !preserve;
                if (tween && tween.update(time, autoStart) === false && !preserve) {
                    delete this._tweens[tweenIds[i]];
                }
            }
            tweenIds = Object.keys(this._tweensAddedDuringUpdate);
        }
        return true;
    }
}

const mainGroup = new Group;

const now = function() {
    return Date.now();
};

let Tween$1 = class Tween {
    constructor(_object, _group = mainGroup) {
        this._object = _object;
        this._group = _group;
        this._isPaused = false;
        this._pauseStart = 0;
        this._valuesStart = {};
        this._valuesEnd = {};
        this._valuesStartRepeat = {};
        this._duration = 1e3;
        this._initialRepeat = 0;
        this._repeat = 0;
        this._yoyo = false;
        this._isPlaying = false;
        this._reversed = false;
        this._delayTime = 0;
        this._startTime = 0;
        this._easingFunction = Easing.Linear.None;
        this._interpolationFunction = Interpolation.Linear;
        this._chainedTweens = [];
        this._onStartCallbackFired = false;
        this._id = Sequence.nextId();
        this._isChainStopped = false;
        this._goToEnd = false;
    }
    getId() {
        return this._id;
    }
    isPlaying() {
        return this._isPlaying;
    }
    isPaused() {
        return this._isPaused;
    }
    to(properties, duration) {
        this._valuesEnd = Object.create(properties);
        if (duration !== undefined) {
            this._duration = duration;
        }
        return this;
    }
    duration(d = 1e3) {
        this._duration = d;
        return this;
    }
    start(time = now()) {
        if (this._isPlaying) {
            return this;
        }
        this._group && this._group.add(this);
        this._repeat = this._initialRepeat;
        if (this._reversed) {
            this._reversed = false;
            for (const property in this._valuesStartRepeat) {
                this._swapEndStartRepeatValues(property);
                this._valuesStart[property] = this._valuesStartRepeat[property];
            }
        }
        this._isPlaying = true;
        this._isPaused = false;
        this._onStartCallbackFired = false;
        this._isChainStopped = false;
        this._startTime = time;
        this._startTime += this._delayTime;
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat);
        return this;
    }
    _setupProperties(_object, _valuesStart, _valuesEnd, _valuesStartRepeat) {
        for (const property in _valuesEnd) {
            const startValue = _object[property];
            const startValueIsArray = Array.isArray(startValue);
            const propType = startValueIsArray ? "array" : typeof startValue;
            const isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);
            if (propType === "undefined" || propType === "function") {
                continue;
            }
            if (isInterpolationList) {
                let endValues = _valuesEnd[property];
                if (endValues.length === 0) {
                    continue;
                }
                endValues = endValues.map(this._handleRelativeValue.bind(this, startValue));
                _valuesEnd[property] = [ startValue ].concat(endValues);
            }
            if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
                _valuesStart[property] = startValueIsArray ? [] : {};
                for (const prop in startValue) {
                    _valuesStart[property][prop] = startValue[prop];
                }
                _valuesStartRepeat[property] = startValueIsArray ? [] : {};
                this._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property]);
            } else {
                if (typeof _valuesStart[property] === "undefined") {
                    _valuesStart[property] = startValue;
                }
                if (!startValueIsArray) {
                    _valuesStart[property] *= 1;
                }
                if (isInterpolationList) {
                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();
                } else {
                    _valuesStartRepeat[property] = _valuesStart[property] || 0;
                }
            }
        }
    }
    stop() {
        if (!this._isChainStopped) {
            this._isChainStopped = true;
            this.stopChainedTweens();
        }
        if (!this._isPlaying) {
            return this;
        }
        this._group && this._group.remove(this);
        this._isPlaying = false;
        this._isPaused = false;
        if (this._onStopCallback) {
            this._onStopCallback(this._object);
        }
        return this;
    }
    end() {
        this._goToEnd = true;
        this.update(Infinity);
        return this;
    }
    pause(time = now()) {
        if (this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = true;
        this._pauseStart = time;
        this._group && this._group.remove(this);
        return this;
    }
    resume(time = now()) {
        if (!this._isPaused || !this._isPlaying) {
            return this;
        }
        this._isPaused = false;
        this._startTime += time - this._pauseStart;
        this._pauseStart = 0;
        this._group && this._group.add(this);
        return this;
    }
    stopChainedTweens() {
        for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
            this._chainedTweens[i].stop();
        }
        return this;
    }
    group(group = mainGroup) {
        this._group = group;
        return this;
    }
    delay(amount = 0) {
        this._delayTime = amount;
        return this;
    }
    repeat(times = 0) {
        this._initialRepeat = times;
        this._repeat = times;
        return this;
    }
    repeatDelay(amount) {
        this._repeatDelayTime = amount;
        return this;
    }
    yoyo(yoyo = false) {
        this._yoyo = yoyo;
        return this;
    }
    easing(easingFunction = Easing.Linear.None) {
        this._easingFunction = easingFunction;
        return this;
    }
    interpolation(interpolationFunction = Interpolation.Linear) {
        this._interpolationFunction = interpolationFunction;
        return this;
    }
    chain(...tweens) {
        this._chainedTweens = tweens;
        return this;
    }
    onStart(callback) {
        this._onStartCallback = callback;
        return this;
    }
    onUpdate(callback) {
        this._onUpdateCallback = callback;
        return this;
    }
    onRepeat(callback) {
        this._onRepeatCallback = callback;
        return this;
    }
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this;
    }
    onStop(callback) {
        this._onStopCallback = callback;
        return this;
    }
    update(time = now(), autoStart = true) {
        if (this._isPaused) return true;
        let property;
        let elapsed;
        const endTime = this._startTime + this._duration;
        if (!this._goToEnd && !this._isPlaying) {
            if (time > endTime) return false;
            if (autoStart) this.start(time);
        }
        this._goToEnd = false;
        if (time < this._startTime) {
            return true;
        }
        if (this._onStartCallbackFired === false) {
            if (this._onStartCallback) {
                this._onStartCallback(this._object);
            }
            this._onStartCallbackFired = true;
        }
        elapsed = (time - this._startTime) / this._duration;
        elapsed = this._duration === 0 || elapsed > 1 ? 1 : elapsed;
        const value = this._easingFunction(elapsed);
        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
        if (this._onUpdateCallback) {
            this._onUpdateCallback(this._object, elapsed);
        }
        if (elapsed === 1) {
            if (this._repeat > 0) {
                if (isFinite(this._repeat)) {
                    this._repeat--;
                }
                for (property in this._valuesStartRepeat) {
                    if (!this._yoyo && typeof this._valuesEnd[property] === "string") {
                        this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
                    }
                    if (this._yoyo) {
                        this._swapEndStartRepeatValues(property);
                    }
                    this._valuesStart[property] = this._valuesStartRepeat[property];
                }
                if (this._yoyo) {
                    this._reversed = !this._reversed;
                }
                if (this._repeatDelayTime !== undefined) {
                    this._startTime = time + this._repeatDelayTime;
                } else {
                    this._startTime = time + this._delayTime;
                }
                if (this._onRepeatCallback) {
                    this._onRepeatCallback(this._object);
                }
                return true;
            } else {
                if (this._onCompleteCallback) {
                    this._onCompleteCallback(this._object);
                }
                for (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
                    this._chainedTweens[i].start(this._startTime + this._duration);
                }
                this._isPlaying = false;
                return false;
            }
        }
        return true;
    }
    _updateProperties(_object, _valuesStart, _valuesEnd, value) {
        for (const property in _valuesEnd) {
            if (_valuesStart[property] === undefined) {
                continue;
            }
            const start = _valuesStart[property] || 0;
            let end = _valuesEnd[property];
            const startIsArray = Array.isArray(_object[property]);
            const endIsArray = Array.isArray(end);
            const isInterpolationList = !startIsArray && endIsArray;
            if (isInterpolationList) {
                _object[property] = this._interpolationFunction(end, value);
            } else if (typeof end === "object" && end) {
                this._updateProperties(_object[property], start, end, value);
            } else {
                end = this._handleRelativeValue(start, end);
                if (typeof end === "number") {
                    _object[property] = start + (end - start) * value;
                }
            }
        }
    }
    _handleRelativeValue(start, end) {
        if (typeof end !== "string") {
            return end;
        }
        if (end.charAt(0) === "+" || end.charAt(0) === "-") {
            return start + parseFloat(end);
        } else {
            return parseFloat(end);
        }
    }
    _swapEndStartRepeatValues(property) {
        const tmp = this._valuesStartRepeat[property];
        const endValue = this._valuesEnd[property];
        if (typeof endValue === "string") {
            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);
        } else {
            this._valuesStartRepeat[property] = this._valuesEnd[property];
        }
        this._valuesEnd[property] = tmp;
    }
};

const nextId = Sequence.nextId;

const TWEEN = mainGroup;

const getAll = TWEEN.getAll.bind(TWEEN);

const removeAll = TWEEN.removeAll.bind(TWEEN);

const add = TWEEN.add.bind(TWEEN);

const remove = TWEEN.remove.bind(TWEEN);

const update = TWEEN.update.bind(TWEEN);

var foreign2 = Object.freeze({
    __proto__: null,
    Easing: Easing,
    Group: Group,
    Interpolation: Interpolation,
    Sequence: Sequence,
    Tween: Tween$1,
    add: add,
    getAll: getAll,
    nextId: nextId,
    now: now,
    remove: remove,
    removeAll: removeAll,
    update: update
});

class UIPool {
    constructor(creator) {
        this.pool = [];
        this.creator = creator;
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden) continue;
            return t;
        }
    }
    byIndex(index) {
        return this.pool[index];
    }
    setCreator(func) {
        this.creator = func;
    }
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    get() {
        for (let item of this.pool) {
            if (item.uiObject.visibility == mw.SlateVisibility.Hidden) {
                item.uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                if (this.poolGetFunction) this.poolGetFunction(item);
                return item;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction) this.resetItemFunction(item);
        item.uiObject.visibility = mw.SlateVisibility.Hidden;
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden) continue;
            action(t);
        }
    }
    eachVisibleItemWithoutFocus(action, focus) {
        for (let t of this.pool) {
            if (t.uiObject.visibility == mw.SlateVisibility.Hidden) continue;
            if (t == focus) continue;
            action(t);
        }
    }
}

class UIElementPool {
    constructor() {
        this.pool = [];
    }
    get count() {
        return this.pool ? this.pool.length : 0;
    }
    get firstActiveItem() {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden) continue;
            return t;
        }
    }
    setCreator(func) {
        this.creator = func;
    }
    get() {
        for (let i of this.pool) {
            if (i.visibility == mw.SlateVisibility.Hidden) {
                i.visibility = mw.SlateVisibility.SelfHitTestInvisible;
                return i;
            }
        }
        let result = this.creator();
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        item.visibility = mw.SlateVisibility.Hidden;
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (t.visibility == mw.SlateVisibility.Hidden) continue;
            action(t);
        }
    }
}

class WorldUIPool {
    constructor(creatorFunc) {
        this.pool = [];
        if (creatorFunc) this.creator = creatorFunc;
    }
    setCreator(func) {
        this.creator = func;
    }
    setPoolGetFunction(func) {
        this.poolGetFunction = func;
    }
    setResetItemFunction(resetItemFunction) {
        this.resetItemFunction = resetItemFunction;
    }
    eachVisibleItem(action) {
        for (let t of this.pool) {
            if (!t.stage) continue;
            action(t);
        }
    }
    get() {
        for (let item of this.pool) {
            if (item.stage) continue;
            if (this.poolGetFunction) this.poolGetFunction(item);
            item.uiWidget.setVisibility(mw.PropertyStatus.On);
            item.stage = true;
            return item;
        }
        let result = this.creator();
        result.stage = true;
        this.pool.push(result);
        return result;
    }
    giveBack(item) {
        if (this.resetItemFunction) this.resetItemFunction(item);
        item.stage = false;
        item.uiWidget.setVisibility(mw.PropertyStatus.Off);
    }
    resetAll() {
        for (let item of this.pool) {
            this.giveBack(item);
        }
    }
}

var foreign3 = Object.freeze({
    __proto__: null,
    UIElementPool: UIElementPool,
    UIPool: UIPool,
    WorldUIPool: WorldUIPool
});

var updater;

(function(updater) {
    updater.updateByFrameInterval = (interval, targetFunctionName) => function(target, prototypeKey, prototypeDescriptor) {
        let intervalVaryingName = `${prototypeKey.toString()}_current_interval`;
        let targetIntervalVaryingName = `${prototypeKey.toString()}_target_interval`;
        target[intervalVaryingName] = 0;
        target[targetIntervalVaryingName] = interval;
        let updateFunc = target[targetFunctionName || "onUpdate"];
        let targetFunc = prototypeDescriptor.value;
        target[targetFunctionName || "onUpdate"] = function(...args) {
            target[intervalVaryingName]++;
            if (target[intervalVaryingName] >= target[targetIntervalVaryingName]) {
                targetFunc.apply(this, args);
                target[intervalVaryingName] = 0;
            }
            updateFunc.apply(this, args);
        };
    };
})(updater || (updater = {}));

var foreign4 = Object.freeze({
    __proto__: null,
    get updater() {
        return updater;
    }
});

class Notice {
    static showDownNotice(context) {
        this.checkView();
        this.view.topNoticeComponent2.insert((notice => {
            notice.setInfo(context);
        }));
    }
    static checkView() {
        if (this.view) return;
        this.view = mw.UIService.show(NoticeView);
    }
}

class TopNoticeComponent {
    init(targetCanvas) {
        this.visibleNotice = [];
        this.pendingQueue = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2;
        this.noticeItemPool = new UIPool((() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(700, 60);
            return item;
        }));
    }
    insert(initAction) {
        this.pendingQueue.push(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0) return;
        for (let item of this.visibleNotice) {
            item.lifeTime += .03;
        }
        let first = this.visibleNotice[0];
        if (first.lifeTime >= TopNoticeComponent.NoticeItemLifeTime) {
            this.fadeoutNoticeElement();
        }
        this.noticeItemPool.eachVisibleItem((item => {
            if (item.targetHeight >= item.position.y) return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent.NoticeMoveStepCount);
        }));
    }
    insertPendingNotice(initAction) {
        if (this.visibleNotice.length >= TopNoticeComponent.NoticeItemMaxCount) {
            this.fadeoutNoticeElement();
        }
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight = this.noticeCanvasHeight - TopNoticeComponent.NoticeItemIntervalSpace - (this.visibleNotice.length - i) * TopNoticeComponent.NoticeItemIntervalSpace;
        }
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = this.targetCanvas.size.x / 2 - recent.uiObject.size.x / 2;
        this.insertItemTempLocation.y = this.targetCanvas.size.y - TopNoticeComponent.NoticeItemIntervalSpace;
        recent.setLocation(this.insertItemTempLocation.x, this.insertItemTempLocation.y);
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        new Tween({
            alpha: 0
        }).to({
            alpha: 1
        }, 250).onUpdate((arg => {
            recent.uiObject.renderOpacity = arg.alpha;
        })).start();
    }
    fadeoutNoticeElement() {
        let item = this.visibleNotice.shift();
        new Tween({
            alpha: 1
        }).to({
            alpha: 0
        }, 250).onUpdate((arg => {
            item.uiObject.renderOpacity = arg.alpha;
        })).onComplete((() => {
            this.noticeItemPool.giveBack(item);
        })).start();
    }
    checkPendingNotice() {
        if (this.pendingQueue.length < 1) return;
        this.insertPendingNotice(this.pendingQueue.shift());
    }
}

TopNoticeComponent.NoticeItemLifeTime = 2;

TopNoticeComponent.NoticeItemMaxCount = 3;

TopNoticeComponent.NoticeMoveStepCount = 15;

TopNoticeComponent.NoticeItemIntervalSpace = 75;

__decorate([ updater.updateByFrameInterval(15, "update") ], TopNoticeComponent.prototype, "checkPendingNotice", null);

class TopNoticeComponent2 {
    constructor() {
        this.isLeft = false;
        this.isRemoveing = false;
        this.needmovingNotice = [];
        this.isinsert = false;
    }
    init(targetCanvas) {
        this.visibleNotice = [];
        this.targetCanvas = targetCanvas;
        this.noticeCanvasHeight = this.targetCanvas.size.y;
        this.insertItemTempLocation = new mw.Vector2;
        this.noticeItemPool = new UIPool((() => {
            let item = mw.UIService.create(TopNoticeItem);
            this.targetCanvas.addChild(item.uiObject);
            item.uiObject.size = new mw.Vector2(item.uiObject.size.x, item.uiObject.size.y);
            return item;
        }));
    }
    insert(initAction) {
        this.insertPendingNotice(initAction);
    }
    update() {
        if (this.visibleNotice.length == 0) return;
        for (let item of this.visibleNotice) {
            item.lifeTime += .03;
            if (item.lifeTime >= TopNoticeComponent2.NoticeItemLifeTime) {
                if (!this.needmovingNotice.includes(item)) {
                    this.needmovingNotice.push(item);
                }
            }
        }
        this.eachLeftRightItem();
        this.noticeItemPool.eachVisibleItem((item => {
            if (item.targetHeight >= item.position.y) return;
            item.setLocation(item.position.x, item.position.y - TopNoticeComponent2.NoticeMoveStepCount);
        }));
    }
    insertPendingNotice(initAction) {
        this.isinsert = true;
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeItemMaxCount) {
            for (let index = 0; index < this.visibleNotice.length; index++) {
                let element = this.visibleNotice[index];
                if (index <= this.visibleNotice.length - TopNoticeComponent2.NoticeItemMaxCount) {
                    element.lifeTime += TopNoticeComponent2.NoticeItemLifeTime;
                }
            }
        }
        if (this.visibleNotice.length >= TopNoticeComponent2.NoticeSameItemMaxCount) {
            let count = this.visibleNotice.length;
            for (let index = 0; index < count; index++) {
                let element = this.visibleNotice[index];
                element.lifeTime += count * TopNoticeComponent2.everydiveidetime;
            }
        }
        this.eachLeftRightItem();
        for (let i = 0; i < this.visibleNotice.length; i++) {
            const element = this.visibleNotice[i];
            element.targetHeight = TopNoticeComponent2.NoticeItemIntervalSpace + i * TopNoticeComponent2.NoticeItemIntervalSpace;
            element.setLocation(this.insertItemTempLocation.x, element.targetHeight);
        }
        let recent = this.noticeItemPool.get();
        this.visibleNotice.push(recent);
        initAction(recent);
        recent.lifeTime = 0;
        this.insertItemTempLocation.x = this.targetCanvas.size.x / 2 - recent.uiObject.size.x / 2;
        let targetHeight = TopNoticeComponent2.NoticeItemIntervalSpace + (this.visibleNotice.length - 1) * TopNoticeComponent2.NoticeItemIntervalSpace;
        this.insertItemTempLocation.y = targetHeight;
        recent.targetHeight = this.insertItemTempLocation.y;
        recent.uiObject.renderOpacity = 0;
        recent.setLocation(this.insertItemTempLocation.x, -500);
        recent.uiObject.renderOpacity = 1;
        new Tween({
            posy: -500
        }).to({
            posy: this.insertItemTempLocation.y
        }, 500).onUpdate((arg => {
            recent.setLocation(this.insertItemTempLocation.x, arg.posy);
        })).start().easing(Easing.Linear.None);
        this.isinsert = false;
    }
    eachLeftRightItem() {
        if (this.needmovingNotice.length <= 0) {
            return;
        }
        if (this.isRemoveing) {
            return;
        }
        this.isRemoveing = true;
        new Tween({
            posX: 0
        }).to({
            posX: 1
        }, 500).onComplete((() => {
            this.isRemoveing = false;
        })).start();
        let arr = this.visibleNotice.filter((e => !this.needmovingNotice.includes(e)));
        for (let i = 0; i < arr.length; i++) {
            const element = arr[i];
            element.targetHeight = TopNoticeComponent2.NoticeItemIntervalSpace + i * TopNoticeComponent2.NoticeItemIntervalSpace;
            new Tween({
                posy: element.uiObject.position.y
            }).to({
                posy: element.targetHeight
            }, 500).onUpdate((arg => {
                element.setLocation(this.insertItemTempLocation.x, arg.posy);
            })).onComplete((() => {})).easing(Easing.Linear.None).start();
        }
        while (this.needmovingNotice.length > 0) {
            let item = this.needmovingNotice.shift();
            let pos = item.uiObject.position;
            this.isLeft = !this.isLeft;
            let target = new mw.Vector(0, pos.y);
            new Tween({
                posX: 0
            }).to({
                posX: this.isLeft ? 3e3 : -3e3
            }, 250).onUpdate((arg => {
                target.x = arg.posX;
                item.uiObject.position = target;
            })).onComplete((() => {
                this.noticeItemPool.giveBack(item);
            })).easing(Easing.Linear.None).start();
            let index = this.visibleNotice.findIndex((ele => item));
            if (index != -1) {
                this.visibleNotice.splice(index, 1);
            }
        }
    }
}

TopNoticeComponent2.NoticeItemLifeTime = 4;

TopNoticeComponent2.NoticeItemMaxCount = 10;

TopNoticeComponent2.NoticeItemIntervalSpace = 70;

TopNoticeComponent2.NoticeSameItemMaxCount = 3;

TopNoticeComponent2.NoticeMoveStepCount = 15;

TopNoticeComponent2.everydiveidetime = 0;

class NoticeView extends NoticeView_Generate$1 {
    onStart() {
        this.topNoticeComponent = new TopNoticeComponent;
        this.topNoticeComponent.init(this.con_top_notice);
        this.topNoticeComponent2 = new TopNoticeComponent2;
        this.topNoticeComponent2.init(this.con_top_notice_2);
        this.canUpdate = true;
        this.layer = mw.UILayerDialog;
    }
    onUpdate() {
        this.topNoticeComponent.update();
        this.topNoticeComponent2.update();
    }
}

class TopNoticeItem extends TopNoticeItem_Generate$1 {
    setLocation(x, y) {
        if (!this.position) {
            this.position = new mw.Vector2(x, y);
        } else {
            this.position.x = x;
            this.position.y = y;
        }
        this.uiObject.position = this.position;
    }
    setInfo(context) {
        this.txt_context.text = context;
    }
}

var foreign1 = Object.freeze({
    __proto__: null,
    Notice: Notice
});

class ConfigBase {
    constructor(excelData) {
        this.ELEMENTARR = [];
        this.ELEMENTMAP = new Map;
        this.KEYMAP = new Map;
        let headerLine = 2;
        this.ELEMENTARR = new Array(excelData.length - headerLine);
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            this.ELEMENTARR[i] = {};
        }
        let column = excelData[0].length;
        for (let j = 0; j < column; j++) {
            let name = excelData[0][j];
            let tags = excelData[1][j].split("|");
            if (tags.includes(ConfigBase.TAG_CHILDLANGUAGE)) continue;
            let jOffect = 0;
            if (tags.includes(ConfigBase.TAG_MAINLANGUAGE)) {
                let index = j + ConfigBase.languageIndex;
                let targetTags = excelData[1][index].split("|");
                if (index < column && targetTags.includes(ConfigBase.TAG_CHILDLANGUAGE)) {
                    jOffect = ConfigBase.languageIndex;
                }
            }
            let hasTag_Key = tags.includes(ConfigBase.TAG_KEY);
            let hasTag_Language = tags.includes(ConfigBase.TAG_LANGUAGE);
            for (let i = 0; i < this.ELEMENTARR.length; i++) {
                let ele = this.ELEMENTARR[i];
                let value = excelData[i + headerLine][j + jOffect];
                if (j == 0) {
                    this.ELEMENTMAP.set(value, ele);
                } else {
                    if (hasTag_Key) {
                        this.KEYMAP.set(value, excelData[i + headerLine][0]);
                    }
                    if (hasTag_Language) {
                        if (ConfigBase.getLanguage != null) {
                            value = ConfigBase.getLanguage(value);
                        } else {
                            value = "unknow";
                        }
                    }
                }
                ele[name] = value;
            }
        }
    }
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.languageIndex = languageIndex;
        ConfigBase.getLanguage = getLanguageFun;
        if (ConfigBase.languageIndex < 0) {
            ConfigBase.languageIndex = ConfigBase.getSystemLanguageIndex();
        }
    }
    static getSystemLanguageIndex() {
        let language = LocaleUtil.getDefaultLocale().toString().toLowerCase();
        if (!!language.match("en")) {
            return 0;
        }
        if (!!language.match("zh")) {
            return 1;
        }
        if (!!language.match("ja")) {
            return 2;
        }
        if (!!language.match("de")) {
            return 3;
        }
        return 0;
    }
    getElement(id) {
        let ele = this.ELEMENTMAP.get(Number(id)) || this.ELEMENTMAP.get(this.KEYMAP.get(id));
        if (ele == null) {
            console.warn(this.constructor.name + "配置表中找不到元素 id:" + id);
        }
        return ele;
    }
    findElement(fieldName, fieldValue) {
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                return this.ELEMENTARR[i];
            }
        }
    }
    findElements(fieldName, fieldValue) {
        let arr = [];
        for (let i = 0; i < this.ELEMENTARR.length; i++) {
            if (this.ELEMENTARR[i][fieldName] == fieldValue) {
                arr.push(this.ELEMENTARR[i]);
            }
        }
        return arr;
    }
    getAllElement() {
        return this.ELEMENTARR;
    }
}

ConfigBase.TAG_KEY = "Key";

ConfigBase.TAG_LANGUAGE = "Language";

ConfigBase.TAG_MAINLANGUAGE = "MainLanguage";

ConfigBase.TAG_CHILDLANGUAGE = "ChildLanguage";

ConfigBase.languageIndex = 0;

var foreign19 = Object.freeze({
    __proto__: null,
    ConfigBase: ConfigBase
});

const EXCELDATA$19 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "292307", 2 ], [ 2, null, "240931", 2 ], [ 3, null, "144441", 2 ], [ 4, null, "137386", 2 ], [ 5, null, "117489", 2 ], [ 6, null, "115847", 2 ], [ 7, null, "67591", 2 ], [ 8, null, "66710", 2 ], [ 9, null, "64416", 2 ], [ 10, null, "60991", 2 ], [ 11, null, "140281", 1 ], [ 12, null, "123710", 1 ], [ 13, null, "119111", 1 ], [ 14, null, "117051", 1 ], [ 15, null, "109070", 1 ] ];

class AccessoriesGlovesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$19);
    }
}

var foreign5 = Object.freeze({
    __proto__: null,
    AccessoriesGlovesConfig: AccessoriesGlovesConfig
});

const EXCELDATA$18 = [ [ "ID", "Tab", "Names", "Icon", "ActionId", "Loop", "Pos", "Rot", "Type" ], [ "", "", "", "", "", "", "", "", "" ], [ 1e4, 0, [ "Double-双人", "Social-社交", "Dance-舞蹈", "Pose-拍照", "Other-其他" ], null, null, 0, null, null, 0 ], [ 1, 1, [ "Lift Up", "托举" ], "98715-98699", "103085-4174", -1, new mw.Vector(-22, -2, 110), new mw.Vector(0, 0, 0), 1 ], [ 2, 1, [ "Resistance Of Shoulder", "肩抗" ], "98712-98700", "101653-101652", -1, new mw.Vector(-6, -2, -75), new mw.Vector(0, 0, 0), 1 ], [ 3, 1, [ "Drag", "拖" ], "98675-98701", "101651-101650", -1, new mw.Vector(-148, -2, -86), new mw.Vector(0, 23, 0), 1 ], [ 4, 1, [ "The Princess Hug", "公主抱" ], "86271-34435", "35464-38174", -1, new mw.Vector(-20, 0, -50), new mw.Vector(0, 0, 0), 1 ], [ 5, 1, [ "Back", "背" ], "98707-98708", "35463-38173", -1, new mw.Vector(-40, 0, -35), new mw.Vector(0, 0, 0), 1 ], [ 6, 1, [ "Latin", "拉丁" ], "145736-145734", "122807-122806", -1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), 2 ], [ 7, 1, [ "Hyundai 03", "现代03" ], "145738-145737", "124192-124194", -1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), 2 ], [ 8, 1, [ "Jazz", "爵士" ], "145741-145740", "122811-122809", -1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), 2 ], [ 9, 1, [ "Hyundai 02", "现代02" ], "145735-145739", "122808-122810", -1, new mw.Vector(0, 0, 0), new mw.Vector(0, 0, 0), 2 ], [ 10, 2, [ "Hello", "Say hello" ], "158409", "29755", 0, null, null, 0 ], [ 11, 2, [ "Farewell", "告别" ], "158409", "29775", 0, null, null, 0 ], [ 12, 2, [ "Applause", "鼓掌" ], "158409", "29758", 0, null, null, 0 ], [ 13, 2, [ "Salute", "行礼" ], "158409", "15057", 0, null, null, 0 ], [ 14, 2, [ "Cheers", "喝彩" ], "158409", "123713", 0, null, null, 0 ], [ 15, 2, [ "Cheers", "欢呼" ], "158409", "123720", 0, null, null, 0 ], [ 16, 2, [ "Hooray", "欢呼" ], "158409", "14625", 0, null, null, 0 ], [ 17, 2, [ "Let's Go", "加油" ], "158409", "148733", 0, null, null, 0 ], [ 18, 2, [ "Yes!", "开心跺脚" ], "158409", "123633", 0, null, null, 0 ], [ 19, 2, [ "Welcome", "高举击掌" ], "158409", "123711", 0, null, null, 0 ], [ 20, 2, [ "Handsome", "耍帅" ], "158409", "108424", 0, null, null, 0 ], [ 21, 2, [ "Backflip", "后空翻" ], "158409", "14602", 0, null, null, 0 ], [ 22, 2, [ "Refuse", "拒绝" ], "158409", "118296", 0, null, null, 0 ], [ 23, 2, [ "Reject", "拒绝" ], "158409", "14767", 0, null, null, 0 ], [ 24, 2, [ "NO!", "拒绝" ], "158409", "14524", 0, null, null, 0 ], [ 25, 2, [ "Hit Back", "不服气" ], "158409", "123714", 0, null, null, 0 ], [ 26, 2, [ "Defiant", "挑衅" ], "158409", "15022", 0, null, null, 0 ], [ 27, 2, [ "Taunt", "嘲讽" ], "158409", "14531", 0, null, null, 0 ], [ 28, 2, [ "Punch", "出拳" ], "158409", "108414", 0, null, null, 0 ], [ 29, 2, [ "Kick", "大脚踹" ], "158409", "135373", 0, null, null, 0 ], [ 30, 2, [ "Bow", "鞠躬" ], "158409", "108427", 0, null, null, 0 ], [ 31, 2, [ "Kneel", "跪拜" ], "158409", "148567", 0, null, null, 0 ], [ 32, 2, [ "Worship", "俯首跪姿" ], "158409", "14584", 0, null, null, 0 ], [ 33, 2, [ "Shy Face", "害羞捂脸" ], "158409", "217872", 0, null, null, 0 ], [ 34, 2, [ "Heart", "比心" ], "158409", "198611", 0, null, null, 0 ], [ 35, 2, [ "Blow Kiss", "飞吻" ], "158409", "14771", 0, null, null, 0 ], [ 36, 2, [ "Kiss", "亲吻" ], "158409", "123632", 0, null, null, 0 ], [ 37, 2, [ "Couple", "牵手吻" ], "158409", "122814", 0, null, null, 0 ], [ 38, 2, [ "One Knee", "单膝跪地" ], "158409", "217871", 0, null, null, 0 ], [ 39, 2, [ "Angry", "生气" ], "158409", "95778", 0, null, null, 0 ], [ 40, 2, [ "Mad", "生气" ], "158409", "29719", 0, null, null, 0 ], [ 41, 2, [ "Furious", "生气" ], "158409", "14766", 0, null, null, 0 ], [ 42, 2, [ "Disappointed", "失望" ], "158409", "123729", 0, null, null, 0 ], [ 43, 2, [ "Weep", "哭泣" ], "158409", "14655", 0, null, null, 0 ], [ 44, 2, [ "Cry", "哭泣" ], "158409", "14655", 0, null, null, 0 ], [ 45, 2, [ "In Tears", "哭泣" ], "158409", "14633", 0, null, null, 0 ], [ 46, 3, [ "Cheesy Moves", "科目三" ], "153860", "232755", 1, null, null, 0 ], [ 47, 3, [ "Breakdance", "霹雳舞" ], "153860", "124498", 1, null, null, 0 ], [ 48, 3, [ "Minute To Second", "一分一秒" ], "153860", "124194", 1, null, null, 0 ], [ 49, 3, [ "Second To Minute", "一分一秒" ], "153860", "124192", 1, null, null, 0 ], [ 50, 3, [ "Smooth Moves", "Robot" ], "153860", "123405", 1, null, null, 0 ], [ 51, 3, [ "Spirited Twirls", "Robot" ], "153860", "123408", 1, null, null, 0 ], [ 52, 3, [ "Graceful Swirls", "Robot" ], "153860", "123407", 1, null, null, 0 ], [ 53, 3, [ "Dynamic Steps", "Closet" ], "153860", "123406", 1, null, null, 0 ], [ 54, 3, [ "Energetic Shimmies", "Closet" ], "153860", "123402", 1, null, null, 0 ], [ 55, 3, [ "Fluid Gestures", "BOOM" ], "153860", "122981", 1, null, null, 0 ], [ 56, 3, [ "Expressive Dance", "BOOM" ], "153860", "122982", 1, null, null, 0 ], [ 57, 3, [ "Lively Rhythms", "BOOM" ], "153860", "122983", 1, null, null, 0 ], [ 58, 3, [ "Twinkle", "Twinkle" ], "153860", "137750", 1, null, null, 0 ], [ 59, 3, [ "Twinkle", "Twinkle" ], "153860", "137749", 1, null, null, 0 ], [ 60, 3, [ "Alien", "外星人" ], "153860", "137324", 1, null, null, 0 ], [ 61, 3, [ "Alien", "外星人" ], "153860", "137325", 1, null, null, 0 ], [ 62, 3, [ "In Love", "恋爱" ], "153860", "137302", 1, null, null, 0 ], [ 63, 3, [ "In Love", "恋爱" ], "153860", "137304", 1, null, null, 0 ], [ 64, 3, [ "In Love", "恋爱" ], "153860", "137300", 1, null, null, 0 ], [ 65, 3, [ "In Love", "恋爱" ], "153860", "137298", 1, null, null, 0 ], [ 66, 3, [ "Bear Dance", "小熊跳舞" ], "153860", "135346", 1, null, null, 0 ], [ 67, 3, [ "Love Shot", "爱杀宝贝" ], "153860", "135159", 1, null, null, 0 ], [ 68, 3, [ "Wave", "Wave" ], "153860", "133177", 1, null, null, 0 ], [ 69, 3, [ "Shake Hip", "Shake Hip" ], "153860", "133151", 1, null, null, 0 ], [ 70, 3, [ "A Heartbeat", "怦然心动" ], "153860", "129504", 1, null, null, 0 ], [ 71, 3, [ "Today We Start", "今天我们开始" ], "153860", "129501", 1, null, null, 0 ], [ 72, 3, [ "Hang Out With Me", "和我交往吗" ], "153860", "126867", 1, null, null, 0 ], [ 73, 3, [ "Swan Dance", "天鹅舞" ], "153860", "126581", 1, null, null, 0 ], [ 74, 3, [ "Seaweed Dance", "海草舞" ], "153860", "126579", 1, null, null, 0 ], [ 75, 3, [ "Disco", "Disco" ], "153860", "126578", 1, null, null, 0 ], [ 76, 3, [ "Senorita", "Senorita" ], "153860", "126045", 1, null, null, 0 ], [ 77, 3, [ "Billie Jean", "Billie Jean" ], "153860", "125813", 1, null, null, 0 ], [ 78, 3, [ "Hello Dance", "招呼舞" ], "153860", "124623", 1, null, null, 0 ], [ 79, 3, [ "Hip Hop", "街舞" ], "153860", "124622", 1, null, null, 0 ], [ 80, 3, [ "Pirate", "海盗" ], "153860", "124621", 1, null, null, 0 ], [ 81, 3, [ "Carp", "鲤鱼" ], "153860", "124620", 1, null, null, 0 ], [ 82, 3, [ "Latin Dance", "拉丁舞" ], "153860", "124502", 1, null, null, 0 ], [ 83, 3, [ "Ghost Steps", "鬼步舞" ], "153860", "124500", 1, null, null, 0 ], [ 84, 3, [ "National Dance", "拉丁舞" ], "153860", "124499", 1, null, null, 0 ], [ 85, 3, [ "Synchronized Beats", "Freaky" ], "153860", "122812", 1, null, null, 0 ], [ 86, 3, [ "Playful Jumps", "Freaky" ], "153860", "122813", 1, null, null, 0 ], [ 87, 3, [ "Cool With You", "Cool With You" ], "153860", "122809", 1, null, null, 0 ], [ 88, 3, [ "Get Your Love", "Get Your Love" ], "153860", "122811", 1, null, null, 0 ], [ 89, 3, [ "Walc", "Walc" ], "153860", "122810", 1, null, null, 0 ], [ 90, 3, [ "Walc", "Walc" ], "153860", "122808", 1, null, null, 0 ], [ 91, 3, [ "Yummy", "Yummy" ], "153860", "122807", 1, null, null, 0 ], [ 92, 3, [ "Yummy", "Yummy" ], "153860", "122806", 1, null, null, 0 ], [ 93, 3, [ "There Is No Tomorrow", "没有明天" ], "153860", "122746", 1, null, null, 0 ], [ 94, 3, [ "There Is No Tomorrow", "没有明天" ], "153860", "122751", 1, null, null, 0 ], [ 95, 3, [ "Current Dance", "电流舞" ], "153860", "122750", 1, null, null, 0 ], [ 96, 3, [ "Farewell to memory", "告别记忆" ], "153860", "212984", 1, null, null, 0 ], [ 97, 3, [ "Dynamite", "Dynamite" ], "153860", "212813", 1, null, null, 0 ], [ 98, 3, [ "Drunken Butterfly", "醉酒的蝴蝶" ], "153860", "211149", 1, null, null, 0 ], [ 99, 3, [ "Dance 01", "舞蹈01" ], "153860", "210266", 1, null, null, 0 ], [ 100, 3, [ "Queencard", "Queencard" ], "153860", "197629", 1, null, null, 0 ], [ 101, 3, [ "Bear Dance 01", "小熊跳舞01" ], "153860", "200201", 1, null, null, 0 ], [ 102, 3, [ "Magic Castle 01", "魔法城堡01" ], "153860", "196071", 1, null, null, 0 ], [ 103, 3, [ "Magic Castle 02", "魔法城堡02" ], "153860", "196070", 1, null, null, 0 ], [ 104, 3, [ "Magic Castle 03", "魔法城堡03" ], "153860", "180850", 1, null, null, 0 ], [ 105, 3, [ "Elysium Pure Land", "极乐净土" ], "153860", "195754", 1, null, null, 0 ], [ 106, 3, [ "Queencard", "Queencard" ], "153860", "185610", 1, null, null, 0 ], [ 107, 3, [ "Wheel Of Liberty", "自由之轮" ], "153860", "122745", 1, null, null, 0 ], [ 108, 3, [ "Full Video", "Full Video（女）" ], "153860", "122684", 1, null, null, 0 ], [ 109, 3, [ "Full Video", "Full Video（男）" ], "153860", "122677", 1, null, null, 0 ], [ 110, 3, [ "Permission", "Permission（女3）" ], "153860", "122683", 1, null, null, 0 ], [ 111, 3, [ "Permission", "Permission（男1）" ], "153860", "122682", 1, null, null, 0 ], [ 112, 3, [ "Permission", "Permission（女1）" ], "153860", "122681", 1, null, null, 0 ], [ 113, 3, [ "Permission", "Permission（女2）" ], "153860", "122680", 1, null, null, 0 ], [ 114, 3, [ "How You Like That", "How You Like That（女）" ], "153860", "122679", 1, null, null, 0 ], [ 115, 3, [ "How You Like That", "How You Like That（男）" ], "153860", "122678", 1, null, null, 0 ], [ 116, 3, [ "Kill This Love", "Kill This Love" ], "153860", "122676", 1, null, null, 0 ], [ 117, 3, [ "Pollo", "Pollo" ], "153860", "122455", 1, null, null, 0 ], [ 118, 3, [ "Crotch Twist", "扭胯" ], "153860", "122454", 1, null, null, 0 ], [ 119, 3, [ "Crotch Twist", "扭胯" ], "153860", "122453", 1, null, null, 0 ], [ 120, 3, [ "Crotch Twist", "扭胯" ], "153860", "88544", 1, null, null, 0 ], [ 121, 3, [ "Nobody", "Nobody" ], "153860", "88543", 1, null, null, 0 ], [ 122, 3, [ "Welcome Dance", "欢迎你来" ], "153860", "88541", 1, null, null, 0 ], [ 123, 3, [ "Street Dance", "街舞" ], "153860", "88450", 1, null, null, 0 ], [ 124, 3, [ "Swing Dance", "摇曳舞" ], "153860", "88449", 1, null, null, 0 ], [ 125, 3, [ "Fancy Feet", "Fancy Feet" ], "153860", "88448", 1, null, null, 0 ], [ 126, 3, [ "Love Song", "桃源恋歌" ], "153860", "84930", 1, null, null, 0 ], [ 127, 3, [ "Crab Dance", "螃蟹舞" ], "153860", "29748", 1, null, null, 0 ], [ 128, 3, [ "Love me", "Love me" ], "153860", "29725", 1, null, null, 0 ], [ 129, 3, [ "Shake The Shoulders", "抖肩舞" ], "153860", "29717", 1, null, null, 0 ], [ 130, 3, [ "Roll NRock", "Roll NRock" ], "153860", "213624", 1, null, null, 0 ], [ 131, 3, [ "Roll NRock", "Roll NRock" ], "153860", "213625", 1, null, null, 0 ], [ 132, 4, [ "Play Rabbit", "扮兔子" ], "120728", "198590", 1, null, null, 0 ], [ 133, 4, [ "Hands Down", "双手触地" ], "120728", "198591", 1, null, null, 0 ], [ 134, 4, [ "Think", "单手摆" ], "120728", "14516", 1, null, null, 0 ], [ 135, 4, [ "Idle", "女性站立" ], "120728", "200191", 1, null, null, 0 ], [ 136, 4, [ "Idle", "男性站立" ], "120728", "200190", 1, null, null, 0 ], [ 137, 4, [ "Superman", "握拳举起" ], "120728", "198587", 1, null, null, 0 ], [ 138, 4, [ "Fist Up", "握拳摆" ], "120728", "173336", 1, null, null, 0 ], [ 139, 4, [ "Refuse", "拒绝" ], "120728", "198593", 1, null, null, 0 ], [ 140, 4, [ "Play Cute", "托腮" ], "120728", "198596", 1, null, null, 0 ], [ 141, 4, [ "Play Cute", "托腮" ], "120728", "198586", 1, null, null, 0 ], [ 142, 4, [ "Peace", "比耶" ], "120728", "198595", 1, null, null, 0 ], [ 143, 4, [ "Peace", "比造型" ], "120728", "198588", 1, null, null, 0 ], [ 144, 4, [ "Play Cool", "扶头耍帅" ], "120728", "198594", 1, null, null, 0 ], [ 145, 4, [ "Groomed", "撑下巴" ], "120728", "198589", 1, null, null, 0 ], [ 146, 4, [ "Shy", "掩面" ], "120728", "173344", 1, null, null, 0 ], [ 147, 4, [ "Relaxed", "叉腰" ], "120728", "173343", 1, null, null, 0 ], [ 148, 4, [ "In Trouble", "撑头" ], "120728", "173341", 1, null, null, 0 ], [ 149, 4, [ "Relaxed", "叉腰" ], "120728", "173340", 1, null, null, 0 ], [ 150, 4, [ "Make Fist", "握拳" ], "120728", "173336", 1, null, null, 0 ], [ 151, 4, [ "Sideways", "侧身" ], "120728", "173335", 1, null, null, 0 ], [ 152, 4, [ "Look Out", "眺望" ], "120728", "173334", 1, null, null, 0 ], [ 153, 4, [ "Grab Wrist", "抓手腕" ], "120728", "173333", 1, null, null, 0 ], [ 154, 4, [ "Play Cool", "耍帅" ], "120728", "173332", 1, null, null, 0 ], [ 155, 4, [ "Relaxed", "叉腰" ], "120728", "173331", 1, null, null, 0 ], [ 156, 4, [ "On The Go", "双手握拳" ], "120728", "173330", 1, null, null, 0 ], [ 157, 4, [ "Ponder", "托腮" ], "120728", "173329", 1, null, null, 0 ], [ 158, 4, [ "Speak", "双手交叉" ], "120728", "15163", 1, null, null, 0 ], [ 159, 4, [ "Stand On One Foot", "单脚立地" ], "120728", "15159", 1, null, null, 0 ], [ 160, 4, [ "Grimace", "鬼脸" ], "120728", "15122", 1, null, null, 0 ], [ 161, 4, [ "Hold Head", "单手抱头" ], "120728", "14764", 1, null, null, 0 ], [ 162, 4, [ "Squat", "蹲姿" ], "120728", "14761", 1, null, null, 0 ], [ 163, 4, [ "Serious", "双手交叉" ], "120728", "14760", 1, null, null, 0 ], [ 164, 4, [ "Pray", "双手合十" ], "120728", "14747", 1, null, null, 0 ], [ 165, 4, [ "Ready To Fly", "模仿飞天" ], "120728", "14707", 1, null, null, 0 ], [ 166, 4, [ "Stretch Legs", "伸腿摸头" ], "120728", "14702", 1, null, null, 0 ], [ 167, 4, [ "Act Weird", "鬼畜" ], "120728", "14687", 1, null, null, 0 ], [ 168, 4, [ "Sit", "坐姿单腿伸出" ], "120728", "14686", 1, null, null, 0 ], [ 169, 4, [ "Hold Out One Hand", "单手张开" ], "120728", "14682", 1, null, null, 0 ], [ 170, 4, [ "Relaxed", "单手叉腰" ], "120728", "14680", 1, null, null, 0 ], [ 171, 4, [ "Peace", "比耶" ], "120728", "14679", 1, null, null, 0 ], [ 172, 4, [ "Shruggle", "顶肩" ], "120728", "14678", 1, null, null, 0 ], [ 173, 4, [ "Peace", "比耶" ], "120728", "14660", 1, null, null, 0 ], [ 174, 4, [ "Half Squat", "半蹲张手" ], "120728", "14647", 1, null, null, 0 ], [ 175, 4, [ "Half Lie", "半躺抱头" ], "120728", "14634", 1, null, null, 0 ], [ 176, 4, [ "Hit The Ground", "单手匝地" ], "120728", "14632", 1, null, null, 0 ], [ 177, 4, [ "Peace", "双手比耶" ], "120728", "14600", 1, null, null, 0 ], [ 178, 4, [ "On One Foot", "单脚站立" ], "120728", "14592", 1, null, null, 0 ], [ 179, 4, [ "Pray", "双手合并" ], "120728", "14589", 1, null, null, 0 ], [ 180, 4, [ "On One Hand", "半躺撑着" ], "120728", "14565", 1, null, null, 0 ], [ 181, 4, [ "Idle", "站姿双手" ], "120728", "14548", 1, null, null, 0 ], [ 182, 4, [ "Get Down", "双手抱头" ], "120728", "14546", 1, null, null, 0 ], [ 183, 4, [ "Seated With Bent Legs", "屈腿坐姿" ], "120728", "14544", 1, null, null, 0 ], [ 184, 4, [ "Picture Time", "摆照型" ], "120728", "14516", 1, null, null, 0 ], [ 185, 4, [ "Act Cute", "双手托脸" ], "120728", "14513", 1, null, null, 0 ], [ 186, 4, [ "Touch Chin", "半躺摸下巴" ], "120728", "14986", 1, null, null, 0 ], [ 187, 4, [ "Lift On One Foot", "单脚抬起" ], "120728", "14778", 1, null, null, 0 ], [ 188, 4, [ "Left Heart", "比心左" ], "120728", "219280", 1, null, null, 0 ], [ 189, 4, [ "Right Heart", "比心右" ], "120728", "219281", 1, null, null, 0 ], [ 190, 5, [ "Horse Dance", "骑马舞" ], "158408", "137301", 1, null, null, 0 ], [ 191, 5, [ "PPAP", "PPAP" ], "158408", "129505", 1, null, null, 0 ], [ 192, 5, [ "Bird Walk", "学鸟走" ], "158408", "14522", 1, null, null, 0 ], [ 193, 5, [ "Spin Ⅰ", "旋转01" ], "158408", "14552", 1, null, null, 0 ], [ 194, 5, [ "Spin Ⅱ", "旋转02" ], "158408", "14741", 1, null, null, 0 ], [ 195, 5, [ "Spin Ⅲ", "旋转03" ], "158408", "218262", 1, null, null, 0 ], [ 196, 5, [ "Spin Ⅳ", "旋转04" ], "158408", "218263", 1, null, null, 0 ], [ 197, 5, [ "Spin Ⅴ", "旋转05" ], "158408", "218264", 1, null, null, 0 ], [ 198, 5, [ "Spin Ⅵ", "旋转06" ], "158408", "218265", 1, null, null, 0 ], [ 199, 5, [ "Spin Ⅶ", "旋转07" ], "158408", "29733", 1, null, null, 0 ], [ 200, 5, [ "Street Dance", "街舞" ], "158408", "122805", 1, null, null, 0 ], [ 201, 5, [ "Dance", "跳舞" ], "158408", "129503", 1, null, null, 0 ], [ 202, 5, [ "Sing & Dance", "歌舞" ], "158408", "14554", 1, null, null, 0 ], [ 203, 5, [ "Tumble", "翻滚" ], "158408", "150691", 1, null, null, 0 ], [ 204, 5, [ "Sprint", "冲刺" ], "158408", "150690", 1, null, null, 0 ], [ 205, 5, [ "Glide", "滑翔" ], "158408", "148890", 1, null, null, 0 ], [ 206, 5, [ "Stomp", "空中蹬腿" ], "158408", "148846", 1, null, null, 0 ], [ 207, 5, [ "Squat Walk", "下蹲行走" ], "158408", "156793", 1, null, null, 0 ], [ 208, 5, [ "In Water", "水中" ], "158408", "156792", 1, null, null, 0 ], [ 209, 5, [ "Fly", "飞行" ], "158408", "159198", 1, null, null, 0 ], [ 210, 5, [ "Zombie Walk", "丧尸行" ], "158408", "97857", 1, null, null, 0 ], [ 211, 5, [ "Roll", "翻滚" ], "158408", "95751", 1, null, null, 0 ], [ 212, 5, [ "Situp", "仰卧起坐" ], "158408", "14708", 1, null, null, 0 ], [ 213, 5, [ "Circle", "转圈" ], "158408", "14695", 1, null, null, 0 ], [ 214, 5, [ "Tumble", "翻滚" ], "158408", "14648", 1, null, null, 0 ], [ 215, 5, [ "Duck Sit", "鸭子坐" ], "158408", "14711", 1, null, null, 0 ], [ 216, 5, [ "Sit Holding Knees", "抱膝坐" ], "158408", "146800", 1, null, null, 0 ], [ 217, 5, [ "Lie Down", "躺下" ], "158408", "175980", 1, null, null, 0 ], [ 218, 5, [ "Get Down", "趴下" ], "158408", "86093", 1, null, null, 0 ], [ 219, 5, [ "Get Down", "趴下" ], "158408", "14757", 1, null, null, 0 ], [ 220, 5, [ "Get Down", "趴下" ], "158408", "125881", 1, null, null, 0 ], [ 221, 5, [ "Crawl", "爬行" ], "158408", "14613", 1, null, null, 0 ], [ 222, 5, [ "Kneel", "跪拜" ], "158408", "14612", 1, null, null, 0 ] ];

class ActionConfigConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$18);
    }
}

var foreign6 = Object.freeze({
    __proto__: null,
    ActionConfigConfig: ActionConfigConfig
});

const EXCELDATA$17 = [ [ "ID", "Name", "NextId", "Tab", "Sort", "AssetId", "SlotType", "ModeOffsetParameter", "AnimationId", "AnimationParameter", "AnimationSlot", "EffectId", "EffectOffsetParameter", "EffectLoop", "SoundId", "SoundParameter", "MaterialId", "IsFly", "ButtonIconId", "Icon", "DelayParameter", "DelayAssetId", "DelayModeOffsetParameter", "DelayModeEffectId", "DelayModeEffectOffsetParameter", "DelayEffectId", "DelayEffectOffsetParameter", "DelayModeSoundId", "DelayModeSoundParameter", "VehiclesIcon", "VehiclesChildId", "VehiclesChildParameter", "VehiclesChildMoveId", "VehiclesChildIdleId", "VehiclesWalkStanceId", "VehiclesWalkStanceSlot", "VehiclesIdleStanceId", "VehiclesIdleStanceSlot", "VehiclesWalkAnimationId", "VehiclesWalkAnimationSlot", "VehiclesIdleAnimationId", "VehiclesIdleAnimationSlot", "BuffId", "BuffType", "BuffParams" ], [ "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" ], [ 10006, "电吉他", 10106, 1, 1, "170487", 12, [ 11, 16, -40, 3.5, -35, -101, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10106, null, 10006, 0, 0, null, 13, [ 18.77, 32.96, -57.93, 1.88, -43.35, -83.69, 1, 1, 1 ], "121812", [ 1, 0 ], 1, "118436", [ 0, 0, 50, 5, -90, 90, .5, .5, .5 ], 0, "147341", [ 500, 1.5, 0 ], null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10093, "电吉他", 10193, 1, 7, "129224", 12, [ 11, 16, -40, 3.5, -35, -101, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10193, null, 10093, 0, 0, null, 13, [ 33.36, 29.26, -56.4, -11.98, -55.89, -89.71, 1, 1, 1 ], "122451", [ 1, 0 ], 1, "118436", [ 0, 0, 50, 5, -90, 90, .5, .5, .5 ], 0, "146098", [ 500, 1.5, 0 ], null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10094, "吉他", 10194, 1, 8, "170611", 12, [ 10, -38, -36, -14, 54, -105, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10194, null, 10094, 0, 0, null, 14, [ 20.47, -37.05, -57.34, -1.81, 47.06, -95.53, 1, 1, 1 ], "35412", [ 1, 0 ], 1, "172882", [ 0, 0, 0, 0, 0, 0, 1.5, 1.5, 1.5 ], 0, "52334", [ 500, 1.5, 0 ], null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10095, "吉他", 10195, 1, 9, "27099", 14, [ 26.4, -16.19, -63.36, -4.03, 28.21, -96.34, .6, .6, .6 ], "35415", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10195, null, 10095, 0, 0, null, 14, [ 26.4, -16.19, -63.36, -4.03, 28.21, -96.34, .6, .6, .6 ], "35412", [ 1, 0 ], 1, "4368", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, "45287", [ 500, 1.5, 0 ], null, 0, "120649", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10320, "钢琴", 10420, 1, 2, "3C5A7B8940E805D7192F53ACF6989935", 23, [ 118.86, -21.18, -23.54, 0, 0, 90, 1, 1, 1 ], "29715", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "158398", "216957", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10420, null, 10320, 0, 0, null, 23, [ 118.86, -21.18, -23.54, 0, 0, 90, 1, 1, 1 ], "29715", [ 1, 0 ], 3, "130776", [ 0, 0, 20, 0, 0, 0, 1.5, 1.5, 1 ], 0, "117193", [ 500, 1.5, 0 ], null, 0, "158398", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10340, "架子鼓", 10440, 1, 3, "170495", 23, [ 59, 11, 0, 0, 0, -90, 1.2, 1.2, 1.2 ], "123634", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "120719", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10440, null, 10340, 0, 0, null, 23, [ 59, 11, 0, 0, 0, -90, 1.2, 1.2, 1.2 ], "123300", [ 1, 0 ], 3, "119917", [ 8, 0, 0, 0, 0, 0, 1, 1, .8 ], 0, "117197", [ 500, 1, 0 ], null, 0, "120719", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10338, "灯球", 10438, 1, 5, "05B519BD4F3FE68467C4F78BE870B7E2", 23, [ 0, 0, 260, 0, 0, 0, .8, .8, .8 ], null, null, 0, null, null, 0, null, null, null, 0, "159386", "132900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10438, null, 10338, 0, 0, null, 23, [ 0, 0, 260, 0, 0, 0, .8, .8, .8 ], "216688", [ 1, 0 ], 3, null, null, 0, "147340", [ 500, 1.5, 0 ], null, 0, "159386", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10339, "灯球", 10439, 1, 4, "807D3DAD4695AD616EF6B6A6DE05CF50", 23, [ 0, 0, 260, 0, 0, 0, .8, .8, .8 ], null, null, 0, null, null, 0, null, null, null, 0, "159386", "132901", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10439, null, 10339, 0, 0, null, 23, [ 0, 0, 260, 0, 0, 0, .8, .8, .8 ], "212813", [ 1, 0 ], 3, null, null, 0, "147338", [ 500, 1.5, 0 ], null, 0, "159386", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10341, "沙发", 10441, 1, 13, "173566", 23, [ -65, -45, 0, 0, 0, -90, 1, 1, 1 ], "182947", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "120318", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10441, null, 10341, 0, 0, null, 23, [ -65, -45, 0, 0, 0, -90, 1, 1, 1 ], "14516", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120318", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10329, "卡通小人", 10429, 1, 38, "135229", 16, [ 0, -10, -10, 0, 5, -60, 4, 4, 4 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10429, null, 10329, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 4, 4, 4 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10330, "L", 10430, 1, 39, "198914", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10430, null, 10330, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10331, "O", 10431, 1, 40, "199057", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "210884", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10431, null, 10331, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 0, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10332, "V", 10432, 1, 41, "199090", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10432, null, 10332, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10333, "E", 10433, 1, 42, "198991", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10433, null, 10333, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10334, "F", 10434, 1, 42.1, "198902", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10434, null, 10334, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10335, "U", 10435, 1, 44, "198968", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10435, null, 10335, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 0, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10336, "C", 10436, 1, 46, "198896", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10436, null, 10336, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10337, "K", 10437, 1, 48, "198912", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10437, null, 10337, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10342, "箱子", 10442, 1, 17, "36250", 23, [ 0, 0, 0, 0, 0, 0, 2, 2, 2.5 ], "46285", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "153896", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10442, null, 10342, 0, 0, null, 23, [ 0, 0, 0, 0, 0, 0, 2, 2, 2.5 ], "46285", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "153896", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10343, "红手牌(笑脸)", 10443, 1, 23, "121354", 16, [ 0, 0, -10, 0, 0, 90, 2, 2, 2 ], null, null, 0, null, null, 0, null, null, null, 0, "159438", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10443, null, 10343, 0, 0, null, 16, [ 0, 0, -10, 0, 0, 90, 2, 2, 2 ], "174562", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159438", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10344, "蓝手牌(委屈脸)", 10444, 1, 24, "121351", 16, [ 0, 0, -10, 0, 0, 90, 2, 2, 2 ], null, null, 0, null, null, 0, null, null, null, 0, "10344", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10444, null, 10344, 0, 0, null, 16, [ 0, 0, -10, 0, 0, 90, 2, 2, 2 ], "174562", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "10344", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10345, "A", 10445, 1, 43, "198892", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10445, null, 10345, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10346, "B", 10446, 1, 45, "198894", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10446, null, 10346, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10347, "D", 10447, 1, 47, "198898", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10447, null, 10347, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10348, "G", 10448, 1, 49, "198904", 16, [ 0, 0, 0, 0, 0, -90, 1, 1, 1 ], "14559", [ 1, 0 ], 1, null, null, 0, null, null, "211028", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10448, null, 10348, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10349, "凳子", 10449, 1, 11, "25354", 16, [ 12.72, 1.83, 10.34, -60.44, -42.82, -42.85, .6, .6, .6 ], "20257", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "86710", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10449, null, 10349, 0, 0, null, 23, [ -16, 0, -15, 0, 0, -90, 1, 1, 1 ], "170905", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "86710", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10312, "蓝色法杖", 10412, 1, 19, "210651", 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "27447", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10412, null, 10312, 0, 0, null, 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "27447", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 2, 1, [ .4 ] ], [ 10313, "红色法杖", 10413, 1, 20, "210652", 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "88021", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10413, null, 10313, 0, 0, null, 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "88021", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 3, 1, [ 3 ] ], [ 10314, "扫帚法杖", 10414, 1, 21, "210790", 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "27399", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10414, null, 10314, 0, 0, null, 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "27399", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 4, 1, [ .2 ] ], [ 10315, "魔法仗", 10415, 1, 22, "210820", 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "145506", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10415, null, 10315, 0, 0, null, 15, [ 0, 0, 0, 0, 0, 0, .3, .3, .3 ], "85026", [ 1, 1 ], 0, "145506", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10316, "地毯", 10416, 1, 12, "091282744E9FD074EC3B4A9336B2136F", 23, [ 70, 0, -1, 0, 0, 0, 2, 2, 1 ], "192126", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "158427", "22961", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10416, null, 10316, 0, 0, null, 23, [ 70, 0, -1, 0, 0, 0, 2, 2, 1 ], "14565", [ 1, 0 ], 3, "172886", [ 0, 0, 9, 0, 0, 0, .5, .5, 1 ], 0, null, null, null, 0, "158427", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10317, "足球筐", 10417, 1, 15, "22940", 23, [ 101, 0, 0, 0, 0, 90, 1.2, 1.2, 1.15 ], "181189", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "166610", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10417, null, 10317, 0, 0, null, 23, [ 101, 0, 0, 0, 0, 90, 1.2, 1.2, 1.15 ], "181189", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "166610", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10318, "纸板箱", 10418, 1, 16, "38008", 23, [ 13.7, 0, 0, 0, 0, 90, 1.5, 1.5, 1.5 ], "47756", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "153896", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10418, null, 10318, 0, 0, null, 1, [ 0, 0, 32, -180, 0, -45, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "153896", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10319, "热狗摊", 10419, 1, 14, "40876", 23, [ 39, -46, 0, 0, 0, 90, .9, .9, .9 ], "29759", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "59458", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10419, null, 10319, 0, 0, null, 23, [ 39, -46, 0, 0, 0, 90, .9, .9, .9 ], "29755", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "59458", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10321, "妲己耳朵", 10421, 1, 33, "212767", 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10421, null, 10321, 0, 0, null, 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], "198590", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10322, "长耳兔灰耳朵", 10422, 1, 34, "212777", 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10422, null, 10322, 0, 0, null, 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], "198590", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10323, "黑狼耳朵", 10423, 1, 35, "213047", 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10423, null, 10323, 0, 0, null, 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], "198590", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10324, "气球", 10424, 1, 32, "218065", 16, [ 0, 0, -20, 0, 0, 0, .7, .7, .7 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "146441", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10424, null, 10324, 0, 0, null, 16, [ 0, 0, -20, 0, 0, 0, .7, .7, .7 ], "98754", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "146441", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10325, "卡通小人", 10425, 1, 36, "135222", 16, [ 0, -10, -10, 0, 5, -60, 4, 4, 4 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10425, null, 10325, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 4, 4, 4 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10326, "卡通小人", 10426, 1, 37, "135223", 16, [ 0, -10, -10, 0, 5, -60, 4, 4, 4 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10426, null, 10326, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 4, 4, 4 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10306, "凳子", 10406, 1, 10, "174452", 16, [ 12.72, 1.06, 31.84, 299.23, -42.82, 677.15, .6, .6, .6 ], "20257", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "86710", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10406, null, 10306, 0, 0, null, 23, [ -16, 0, 10, 0, 0, -90, 1, 1, 1 ], "218259", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "86710", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10092, "女帽子", 10192, 1, 30.1, "173243", 16, [ 13.6, 6, -2, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10192, null, 10092, 0, 0, null, 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], "198590", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10074, "法杖", 10174, 1, 18, "122954", 15, [ 0, 0, 50, 180, 0, 0, 1, 1, 1 ], "85026", [ 1, 1 ], 0, "27392", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10174, null, 10074, 0, 0, null, 15, [ 0, 0, 50, 180, 0, 0, 1, 1, 1 ], "85026", [ 1, 1 ], 0, "27392", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 1, 1, [ 2 ] ], [ 10051, "射灯", 10151, 1, 31, "33028", 16, [ 0, -10, 10, 170, 25, -90, .5, .5, .5 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "131663", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10151, null, 10051, 0, 0, null, 16, [ 0, -10, 10, 170, 25, -90, .5, .5, .5 ], "88751", [ 1, 0 ], 1, "32254", [ 0, 0, 40, -120, 0, 0, 2, 5, 5 ], 0, null, null, null, 0, "131663", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10052, "喷火枪", 10152, 1, 25, "87019", 16, [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "49094", [ .01, 0 ], 1, null, null, 0, null, null, null, 0, "138004", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10152, null, 10052, 0, 0, null, 16, [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "49094", [ .1, 1 ], 1, "4394", [ 35, 0, 12, 0, 0, 180, 1, 1, 1 ], 1, "20322", [ 500, 1, 1 ], null, 0, "138004", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10047, "尖叫鸡", 10147, 1, 30, "20799", 16, [ 5, -3, 5, 0, 0, -90, .7, .7, .7 ], null, null, 0, null, null, 0, null, null, null, 0, "130565", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10147, null, 10047, 0, 0, null, 16, [ 5, -3, 5, 0, 0, -90, .7, .7, .7 ], "14557", [ 1, 1 ], 1, null, null, 0, "108734", [ 500, .8, 1 ], null, 0, "130565", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10005, "荧光棒", 10105, 1, 6, "88974", 16, [ 4, 0, 0, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10105, null, 10005, 0, 0, null, 16, [ 3.13, -1.62, -1.12, 0, 0, 0, 1, 1, 1 ], "174562", [ 1, 0 ], 1, null, null, 0, null, null, "152978", 0, "157198", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10007, "左轮手枪", 10107, 1, 28, "175291", 16, [ 8, 0, 0, 0, 0, -90, 1, 1, 1 ], "20244", [ .4, 1 ], 1, null, null, 0, null, null, null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10107, null, 10007, 0, 0, null, 16, [ 8, 0, 0, 0, 0, -90, 1, 1, 1 ], "20244", [ .4, 1 ], 1, "88791", [ 0, 18, 3, 0, 0, 90, 1, 1, 1 ], 1, "169140", [ 500, .5, 1 ], null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10008, "散弹枪", 10108, 1, 27, "176450", 16, [ 6, 0, 8, 0, 0, -90, 1, 1, 1 ], "49094", [ .01, 0 ], 1, null, null, 0, null, null, null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10108, null, 10008, 0, 0, null, 16, [ 6, 0, 8, 0, 0, -90, 1, 1, 1 ], "49094", [ 1, 1 ], 1, "4387", [ 0, 40, 0, 0, 0, 90, 1, 1, 1 ], 1, "39320", [ 500, .5, 1 ], null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10009, "步枪", 10109, 1, 26, "176541", 16, [ 20, 0, -1, 0, 0, 0, 1, 1, 1 ], "49094", [ .01, 0 ], 1, null, null, 0, null, null, null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10109, null, 10009, 0, 0, null, 16, [ 20, 0, -1, 0, 0, 0, 1, 1, 1 ], "49094", [ 1, 1 ], 1, "13594", [ 40, 0, 10, 0, 0, 0, .5, .5, .5 ], 1, "169140", [ 500, .5, 1 ], null, 0, "106330", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10012, "美元", 10112, 1, 29, "176320", 16, [ 10, -10, 0, 0, 0, -90, 1, 1, 1 ], "98751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "125834", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10112, null, 10012, 0, 0, null, 16, [ 10, -10, 0, 0, 0, -90, 1, 1, 1 ], "98746", [ 1, 0 ], 1, "60761", [ 0, 0, 0, 0, 0, 90, .5, .5, .5 ], 0, null, null, null, 0, "125834", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10001, "洋娃娃", 10101, 3, 4, "163620", 15, [ 10, 10, -10, 0, 0, 0, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159349", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10101, null, 10001, 0, 0, null, 15, [ 10, 10, -10, 0, 0, 0, 1, 1, 1 ], "98739", [ 1, 1 ], 1, null, null, 0, "97383", [ 500, 1, 1 ], null, 0, "159349", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10002, "娃娃", 10102, 3, 5, "176521", 15, [ 10, 10, -10, 0, 0, 0, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159349", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10102, null, 10002, 0, 0, null, 15, [ 10, 10, -10, 0, 0, 0, 1, 1, 1 ], "98739", [ 1, 1 ], 1, null, null, 0, "97386", [ 500, 1, 1 ], null, 0, "159349", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10003, "书本", 10103, 3, 19, "88948", 16, [ 0, -3.19, -2.62, -2.88, -68.85, -88.79, 1, 1, 1 ], null, [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "175742", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10103, null, 10003, 0, 0, null, 16, [ 0, -3.19, -2.62, -2.88, -68.85, -88.79, 1, 1, 1 ], "14739", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "175742", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10004, "相机", 10104, 3, 20, "176511", 16, [ -5, -12, 0, 90, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "175747", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10104, null, 10004, 0, 0, null, 16, [ -5, -12, -2, 90, 0, -90, 1, 1, 1 ], "98797", [ 1, 1 ], 1, null, null, 0, "97374", [ 500, 1, 1 ], null, 0, "175747", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10011, "笔记本电脑", 10111, 3, 21, "176265", 16, [ 25, 0, -20, -90, 90, 0, 1, 1, 1 ], "98737", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "105234", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10111, null, 10011, 0, 0, null, 16, [ 25, 0, -20, -90, 90, 0, 1, 1, 1 ], "98740", [ 1, 1 ], 1, null, null, 0, "97379", [ 500, 1, 1 ], null, 0, "105234", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10014, "手机", 10114, 3, 22, "176478", 16, [ 5, 0, 0, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "162891", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10114, null, 10014, 0, 0, null, 16, [ 5, 0, 0, 0, 0, 0, 1, 1, 1 ], "98612", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "162891", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10016, "手捧鲜花", 10116, 3, 3, "162188", 16, [ 0, 0, -10, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "148869", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10116, null, 10016, 0, 0, null, 16, [ 0, 0, -10, 0, 0, 0, 1, 1, 1 ], "217871", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "148869", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10017, "购物车", 10117, 3, 7, "176260", 15, [ 65, 105, 20, 90, 0, 180, 1, 1, 1 ], "98753", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "166610", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10117, null, 10017, 0, 0, null, 15, [ 65, 105, 20, 90, 0, 180, 1, 1, 1 ], "98748", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "166610", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10019, "婴儿车", 10119, 3, 6, "176266", 15, [ 45, 105, 20, 90, -90, 180, 1.2, 1.2, 1.2 ], "98753", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120653", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10119, null, 10019, 0, 0, null, 15, [ 45, 105, 20, 90, -90, 180, 1.2, 1.2, 1.2 ], "98748", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120653", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10020, "行李箱", 10120, 3, 8, "176501", 16, [ 110, 12, 0, 0, -90, 180, 1, 1, 1 ], "98757", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "96595", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10120, null, 10020, 0, 0, null, 16, [ 110, 12, 0, 0, -90, 180, 1, 1, 1 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "96595", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10021, "黑色雨伞", 10121, 3, 1, "176321", 16, [ 0, 0, -5, 5, 5, 0, 1, 1, 1 ], "98752", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159401", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10121, null, 10021, 0, 0, null, 16, [ 0, 0, -5, 5, 5, 0, 1, 1, 1 ], "14557", [ .1, 0 ], 1, null, null, 0, null, null, null, 0, "159401", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10046, "气球", 10146, 3, 2, "85003", 16, [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "146441", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10146, null, 10046, 0, 0, null, 16, [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "98754", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "146441", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10048, "小白兔玩偶", 10148, 3, 15, "23414", 16, [ 5, -10, -20, 10, 5, -60, .5, .5, .5 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10148, null, 10048, 0, 0, null, 16, [ 0, -10, 10, 160, 25, -90, .5, .5, .5 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10049, "玩偶", 10149, 3, 16, "32626", 16, [ 0, -15, -20, 0, 5, -60, 1.5, 1.5, 1.5 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10149, null, 10049, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 1.5, 1.5, 1.5 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10064, "杠铃", 10164, 3, 11, "27022", 16, [ 12, 0, 0, 0, 90, 0, .7, .7, .7 ], null, null, 0, null, null, 0, null, null, null, 0, "120669", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10164, null, 10064, 0, 0, null, 16, [ 12, 0, 0, 0, 90, 0, .7, .7, .7 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120669", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10065, "杠铃", 10165, 3, 12, "72490", 16, [ 3, -10, -10, -60, 0, 0, 1, 1, 1 ], "14025", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120669", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10165, null, 10065, 0, 0, null, 16, [ 0, -10, 0, 25, 0, 0, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120669", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10066, "玩偶", 10166, 3, 13, "32618", 16, [ 0, -15, -25, 0, 5, -60, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10166, null, 10066, 0, 0, null, 16, [ 0, -10, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10067, "玩偶", 10167, 3, 14, "32622", 16, [ 0, -15, -25, 0, 5, -60, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10167, null, 10067, 0, 0, null, 16, [ 0, -10, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10069, "奖杯", 10169, 3, 9, "27066", 16, [ 5, -8, -12, 0, 60, 90, 1, 1, 1 ], "14025", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "176328", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10169, null, 10069, 0, 0, null, 16, [ 0, -10, 10, 160, 25, -90, 1, 1, 1 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "176328", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10070, "靠垫", 10170, 3, 17, "32568", 16, [ 7, -10, -5, 40, 0, -60, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "158393", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10170, null, 10070, 0, 0, null, 16, [ 5, 5, 15, -120, 0, -10, 1, 1, 1 ], "14654", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "158393", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10071, "靠垫", 10171, 3, 18, "32570", 16, [ 7, -10, -5, 40, 0, -60, 1, 1, 1 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "158393", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10171, null, 10071, 0, 0, null, 16, [ 5, 5, 15, -120, 0, -10, 1, 1, 1 ], "14654", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "158393", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10073, "游戏机", 10173, 3, 10, "32556", 16, [ 5, -3, 5, -70, -40, -20, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "175743", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10173, null, 10073, 0, 0, null, 16, [ 5, -3, 5, -70, -40, -20, 1, 1, 1 ], "98612", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "175743", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10075, "鲤鱼", 10175, 3, 201, "123357", 16, [ -9, 0, -20, 90, 0, -90, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "96595", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10175, null, 10075, 0, 0, null, 23, [ 0, 0, 30, 0, 0, -90, 3, 3, 3 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10076, "龙虾", 10176, 3, 202, "123355", 16, [ -14, 0, -18, 110, 0, -90, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10176, null, 10076, 0, 0, null, 23, [ 30, 0, 30, 0, 0, -90, 3, 3, 3 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10077, "金龙鱼", 10177, 3, 203, "136420", 16, [ -4, 0, -21, -180, 90, 0, 1, 1.5, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10177, null, 10077, 0, 0, null, 23, [ 10, 0, 50, 0, 0, 180, 3, 5, 3 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10078, "毛鼻鲶", 10178, 3, 204, "136408", 16, [ -4, 0, -21, -180, 90, 0, 1, 1.5, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10178, null, 10078, 0, 0, null, 23, [ 10, 0, 65, 0, 0, 180, 3, 5, 3 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10079, "尖吻鲈", 10179, 3, 205, "136422", 16, [ -4, 0, -21, -180, 90, 0, 2, 3, 2 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10179, null, 10079, 0, 0, null, 23, [ 10, 0, 50, 0, 0, 180, 6, 6, 6 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10080, "蓝鳍金枪鱼", 10180, 3, 206, "136415", 16, [ -4, 0, -21, -180, 90, 0, .2, .2, .2 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10180, null, 10080, 0, 0, null, 23, [ 10, 0, 10, 0, 0, 180, 1, 1, 1 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10081, "大眼鲤鱼", 10181, 3, 207, "136418", 16, [ -10, 0, -16, -180, 90, 0, 2.5, 2.5, 2.5 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10181, null, 10081, 0, 0, null, 23, [ 10, 0, 40, 0, 0, 180, 6, 6, 6 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10082, "大口副鲈", 10182, 3, 208, "136409", 16, [ -4, 0, -21, -180, 90, 0, 1.5, 2, 1.5 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10182, null, 10082, 0, 0, null, 23, [ 10, 0, 30, 0, 0, 180, 6, 6, 6 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10083, "皇带鱼", 10183, 3, 209, "136410", 16, [ -3, 0, -21, -180, 90, 0, .3, .7, .3 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10183, null, 10083, 0, 0, null, 23, [ 0, 0, 40, 0, 0, 180, 1, 5, 2 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10084, "鲸鱼", 10184, 3, 210, "122172", 16, [ 5, -25, -5, 0, 60, 90, .15, .15, .15 ], "14025", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10184, null, 10084, 0, 0, null, 23, [ 20, 0, 60, 0, 0, 0, .2, .2, .2 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10085, "孔雀鱼", 10185, 3, 211, "136417", 16, [ -4, 0, -15, -180, 90, 0, 7, 10, 7 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10185, null, 10085, 0, 0, null, 23, [ 20, 0, 60, 0, 0, 180, 20, 20, 20 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10086, "笛鲷", 10186, 3, 212, "136405", 16, [ -4, 0, -21, -180, 90, 0, 1.5, 2, 1.5 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10186, null, 10086, 0, 0, null, 23, [ 10, 0, 50, 0, 0, 180, 4, 5, 3 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10087, "平颌鱲", 10187, 3, 213, "136416", 16, [ -4, 0, -21, -180, 90, 0, 2, 3, 2 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10187, null, 10087, 0, 0, null, 23, [ 10, 0, 50, 0, 0, 180, 6, 6, 6 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10088, "鲨鱼", 10188, 3, 214, "136412", 16, [ 5, -8, -12, 0, 60, 90, 1, 1.2, 1.2 ], "14025", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10188, null, 10088, 0, 0, null, 23, [ -20, 0, 40, 0, 0, 180, 2, 2, 2 ], "169638", [ 1, 0 ], 3, null, null, 0, null, null, null, 0, "159381", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10089, "樱花枝", 10189, 3, 16, "218258", 15, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10189, null, 10089, 0, 0, null, 15, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], "123718", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10090, "咖啡", 10190, 3, 17, "40809", 16, [ 6.04, -7.74, -4.26, 0, 0, -79.46, .06, .06, .06 ], "35385", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10190, null, 10090, 0, 0, null, 16, [ 4.32, -2.89, -5.03, 0, 0, -33.59, .06, .06, .06 ], "14514", [ 1, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10091, "女帽子", 10191, 3, 18, "173243", 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10191, null, 10091, 0, 0, null, 20, [ 2.5, 0, -16, 0, 0, -90, 1, 1, 1 ], "198590", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "180436", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10097, "角色模型", 10197, 3, 38, "177590", 23, [ 0, 0, 0, 0, 0, 0, .01, .01, .01 ], null, null, 0, "177590", [ -5e3, 0, 0, 0, 0, -90, 100, 100, 100 ], 0, "126684", [ 500, .8, 1 ], null, 0, "211477", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10197, null, 10097, 0, 0, null, 23, [ 0, 0, 0, 0, 0, 0, .01, .01, .01 ], null, null, 0, null, null, 0, "126684", [ 500, .8, 1 ], null, 0, "211477", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10098, "背带鲨鱼", 10198, 3, 301, "180966", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10198, null, 10098, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "145506", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10099, "埃及鲨鱼", 10199, 3, 302, "184457", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10199, null, 10099, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "88020", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10300, "埃及章鱼", 10400, 3, 303, "184458", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10400, null, 10300, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "27392", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10301, "埃及金鱼", 10401, 3, 304, "184556", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10401, null, 10301, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "27447", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10302, "天使章鱼", 10402, 3, 305, "186655", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10402, null, 10302, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "145495", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10303, "嘟嘟嘴金鱼", 10403, 3, 306, "179470", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10403, null, 10303, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "151527", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10304, "嘟嘟嘴红金鱼", 10404, 3, 307, "180967", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10404, null, 10304, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], null, null, 0, "145512", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10305, "灯笼鱼形态的宠物", 10405, 3, 308, "80343", 16, [ 0, -12.64, -12.64, 0, 0, 0, 1, 1, 1 ], "181132", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10405, null, 10305, 0, 0, null, 23, [ -50, -25, 123, 0, 0, -90, 1, 1, 1 ], "14620", [ 1, 0 ], 0, "153613", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 0, null, null, null, 0, "98210", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10307, "紫阳春剑", 10407, 3, 27, "172199", 14, [ 3.1, 12.9, -44.11, 63.65, -62.11, 22.9, 1, 1, 1 ], null, null, 0, "162221", [ 0, 0, 0, 90, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10407, null, 10307, 0, 0, null, 16, [ 0, 0, 45, -90, 0, 0, 1, 1, 1 ], "122491", [ 1, 1 ], 3, "88442", [ 0, 80, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10308, "剑", 10408, 3, 27, "122949", 12, [ 11.2, -32.84, 20.81, 180.05, -48.22, -90.01, 1, 1, 1 ], null, null, 0, "103123", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10408, null, 10308, 0, 0, null, 16, [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "111102", [ 1, 1 ], 3, "180505", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], 1, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10309, "大剑", 10409, 3, 27, "186519", 12, [ 6.28, 33.79, 25.13, 180, 46.64, -90, 1, 1, 1 ], null, null, 0, "162250", [ 0, 0, 32, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10409, null, 10309, 0, 0, null, 15, [ 0, 0, 0, -6.2, 10.73, 29.3, 1, 1, 1 ], "217289", [ 1, 1 ], 3, "14323", [ 0, 0, 95, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "98203", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10310, "樱花枝", 10410, 3, 30, "218258", 16, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], "219281", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10410, null, 10310, 0, 0, null, 16, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10311, "樱花枝", 10411, 3, 30, "218258", 15, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], "219280", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10411, null, 10311, 0, 0, null, 15, [ 2, 0, 0, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "192129", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10327, "卡通小人", 10427, 3, 15, "135233", 16, [ 0, -10, -10, 0, 5, -60, 4, 4, 4 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10427, null, 10327, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, 4, 4, 4 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10328, "甜品店吉祥物", 10428, 3, 15, "128491", 16, [ 0, -10, -10, 0, 5, -60, .2, .2, .2 ], "98743", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10428, null, 10328, 0, 0, null, 16, [ 0, -13, 10, 160, 25, -90, .2, .2, .2 ], "88751", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "120679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10022, "汉堡", 10122, 4, 0, "37975", 16, [ 5, -9, -3, 0, 0, 0, .5, .5, .5 ], "98747", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10122, null, 10022, 0, 0, null, 16, [ 5, -9, -3, 0, 0, 0, .5, .5, .5 ], "14762", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10023, "羊奶", 10123, 4, 0, "29005", 16, [ 5, -3, -15, 0, 0, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10123, null, 10023, 0, 0, null, 16, [ 5, -3, -15, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10024, "面包", 10124, 4, 0, "46131", 16, [ 5, -3, -5, 0, 90, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10124, null, 10024, 0, 0, null, 16, [ 5, -3, -5, 0, 90, 0, 1, 1, 1 ], "14762", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10025, "面包", 10125, 4, 0, "46132", 16, [ 5, -3, -5, 0, 90, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10125, null, 10025, 0, 0, null, 16, [ 5, -3, -5, 0, 90, 0, 1, 1, 1 ], "14762", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10027, "饮料", 10127, 4, 0, "46150", 16, [ 5, -3, -10, 0, 0, 0, .5, .5, .5 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10127, null, 10027, 0, 0, null, 16, [ 5, -3, -10, 0, 0, 0, .5, .5, .5 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10028, "饮料", 10128, 4, 0, "46156", 16, [ 5, -3, -10, 0, 0, 0, .3, .3, .3 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10128, null, 10028, 0, 0, null, 16, [ 5, -3, -10, 0, 0, 0, .3, .3, .3 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10029, "饮料", 10129, 4, 0, "46158", 16, [ 5, -3, -10, 0, 0, 0, .4, .4, .4 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10129, null, 10029, 0, 0, null, 16, [ 5, -3, -10, 0, 0, 0, .4, .4, .4 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10031, "酒", 10131, 4, 0, "49441", 16, [ 5, -3, -15, 0, 0, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10131, null, 10031, 0, 0, null, 16, [ 5, -3, -15, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10033, "奶昔", 10133, 4, 0, "40819", 16, [ 3, -3, -10, 0, 0, 0, .05, .05, .05 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10133, null, 10033, 0, 0, null, 16, [ 3, -3, -10, 0, 0, 0, .05, .05, .05 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10034, "冰淇淋", 10134, 4, 0, "40832", 16, [ 3, -3, -10, 0, 0, 0, .05, .05, .05 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10134, null, 10034, 0, 0, null, 16, [ 3, -3, -10, 0, 0, 0, .05, .05, .05 ], "14762", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10038, "烧烤", 10138, 4, 0, "46136", 16, [ 15, -3, 0, -90, -90, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10138, null, 10038, 0, 0, null, 16, [ 15, -3, 0, -90, -90, 0, 1, 1, 1 ], "14762", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10041, "奶茶", 10141, 4, 0, "27826", 16, [ 3, -3, -10, 0, 0, 0, 1, 1, 1 ], "14557", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10141, null, 10041, 0, 0, null, 16, [ 3, -3, -10, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10043, "猫粮", 10143, 4, 0, "28995", 15, [ 5, 2, -8, 0, 0, 0, .7, .7, .7 ], "98606", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "163628", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10143, null, 10043, 0, 0, null, 15, [ 0, 0, 0, 90, 0, 0, .7, .7, .7 ], "14780", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "163628", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10054, "蛋糕", 10154, 4, 0, "23115", 15, [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "98606", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10154, null, 10054, 0, 0, null, 15, [ 0, 0, 0, 90, 0, 0, 1, 1, 1 ], "14780", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10057, "一盘蛋糕", 10157, 4, 0, "23116", 15, [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "98606", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10157, null, 10057, 0, 0, null, 15, [ 0, 0, 0, 90, 0, 0, 1, 1, 1 ], "14780", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "159430", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10059, "咖啡", 10159, 4, 0, "23191", 16, [ 8, 0, -5, 0, 0, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10159, null, 10059, 0, 0, null, 16, [ 8, 0, -5, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10062, "清酒", 10162, 4, 0, "23043", 16, [ 3, -3, -30, 0, 0, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10162, null, 10062, 0, 0, null, 16, [ 3, -3, -30, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10063, "清酒", 10163, 4, 0, "23071", 16, [ 3, -3, -27, 0, 0, 0, 1, 1, 1 ], "98736", [ 1, 0 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 10163, null, 10063, 0, 0, null, 16, [ 3, -3, -27, 0, 0, 0, 1, 1, 1 ], "8356", [ .7, 1 ], 1, null, null, 0, null, null, null, 0, "153900", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20001, "火焰翅膀", 20002, 2, 2, "223877", 12, [ 0, 0, 10, 0, 0, 90, 1.5, 1.5, 1.5 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20002, null, 20001, 2, 0, null, 12, [ 0, 0, 10, 0, 0, 90, 1.5, 1.5, 1.5 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20003, "翅膀", 20004, 2, 2, "135840", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20004, null, 20003, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20005, "翅膀", 20006, 2, 2, "135851", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20006, null, 20005, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20007, "翅膀", 20008, 2, 2, "135848", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20008, null, 20007, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20009, "双层翅膀", 20010, 2, 2, "334814", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20010, null, 20009, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20011, "翅膀", 20012, 2, 2, "42804", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20012, null, 20011, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20013, "翅膀", 20014, 2, 2, "42805", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20014, null, 20013, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20015, "翅膀", 20016, 2, 2, "42816", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20016, null, 20015, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20017, "翅膀", 20018, 2, 2, "42818", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20018, null, 20017, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20019, "翅膀", 20020, 2, 2, "42821", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20020, null, 20019, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20021, "翅膀", 20022, 2, 2, "42828", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20022, null, 20021, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20023, "翅膀", 20024, 2, 2, "145906", 12, [ 0, 0, -20, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20024, null, 20023, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20025, "翅膀", 20026, 2, 2, "145908", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20026, null, 20025, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20027, "翅膀", 20028, 2, 2, "145910", 12, [ 0, 0, 0, 0, 0, 180, 2, 2, 2 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20028, null, 20027, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20029, "翅膀", 20030, 2, 2, "145912", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20030, null, 20029, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20031, "翅膀", 20032, 2, 2, "145913", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20032, null, 20031, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20033, "翅膀", 20034, 2, 2, "340180", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20034, null, 20033, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20035, "翅膀", 20036, 2, 2, "342526", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20036, null, 20035, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20037, "翅膀", 20038, 2, 2, "342530", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20038, null, 20037, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20039, "翅膀", 20040, 2, 2, "375134", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20040, null, 20039, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20041, "翅膀", 20042, 2, 2, "375788", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20042, null, 20041, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20043, "翅膀", 20044, 2, 2, "393543", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20044, null, 20043, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20045, "六翼翅膀", 20046, 2, 1, "399002", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20046, null, 20045, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20047, "翅膀", 20048, 2, 2, "42830", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20048, null, 20047, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20049, "翅膀", 20050, 2, 2, "136963", 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20050, null, 20049, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20051, "翅膀", 20052, 2, 2, "145902", 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20052, null, 20051, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20053, "翅膀", 20054, 2, 2, "145904", 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20054, null, 20053, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20055, "翅膀", 20056, 2, 2, "136966", 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20056, null, 20055, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20057, "翅膀", 20058, 2, 2, "145909", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20058, null, 20057, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20059, "翅膀", 20060, 2, 2, "145911", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20060, null, 20059, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20061, "火焰翅膀", 20062, 2, 2, "211667", 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 1, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 20062, null, 20061, 2, 0, null, 12, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "129686", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30001, "烟花筒", 30002, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "125370", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30002, null, 30002, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "125370", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30003, "炮弹", 30004, 5, 0, "122174", 15, [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], null, null, 0, "86375", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], 0, null, null, null, 0, "96613", "86375", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30004, null, 30004, 0, 0, null, 15, [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], "52981", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "96613", null, [ 2, 1, 1 ], "122174", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "86375", [ 0, 0, 30, 0, 0, 0, 1, 1, 1 ], "85151", [ 0, 0, 0, 0, 0, 0, .5, .5, .5 ], "97385", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30005, "烟花筒", 30006, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "4374", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30006, null, 30006, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "4374", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30007, "烟花筒", 30008, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "4375", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30008, null, 30008, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "4375", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30009, "烟花筒", 30010, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "4376", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30010, null, 30010, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "4376", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30011, "烟花筒", 30012, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "4377", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30012, null, 30012, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "4377", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30013, "烟花筒", 30014, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "32679", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30014, null, 30014, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "32679", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30015, "烟花筒", 30016, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "81684", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30016, null, 30016, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "81684", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30017, "烟花筒", 30018, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "81685", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30018, null, 30018, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "81685", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30019, "烟花筒", 30020, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88812", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30020, null, 30020, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88812", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30021, "烟花筒", 30022, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88816", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30022, null, 30022, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88816", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30023, "烟花筒", 30024, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88821", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30024, null, 30024, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88821", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30025, "烟花筒", 30026, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88828", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30026, null, 30026, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88828", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30027, "烟花筒", 30028, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88832", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30028, null, 30028, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88832", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30029, "烟花筒", 30030, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "88835", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30030, null, 30030, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "88835", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30031, "烟花筒", 30032, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "125365", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30032, null, 30032, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "125365", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30033, "烟花筒", 30034, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "125373", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30034, null, 30034, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "125373", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30035, "烟花筒", 30036, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "141911", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30036, null, 30036, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "141911", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30037, "烟花筒", 30038, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "141912", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30038, null, 30038, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "141912", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30039, "烟花筒", 30040, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "141915", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30040, null, 30040, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "141915", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30041, "烟花筒", 30042, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "141916", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30042, null, 30042, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "141916", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30043, "烟花筒", 30044, 5, 0, "171837", 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "174253", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30044, null, 30044, 0, 0, null, 15, [ 6.47, -.35, -15.02, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 3, 1 ], "171837", [ 0, 0, 100, 0, 45, 0, 1.5, 1.5, 1.5 ], null, null, "174253", [ 0, 0, 0, 0, 0, 0, 1, 1, 1 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30045, "炮竹", 30046, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "78884", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30046, null, 30046, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "78884", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30047, "炮竹", 30048, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "78885", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30048, null, 30048, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "78885", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30049, "炮竹", 30050, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "78886", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30050, null, 30050, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "78886", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30051, "炮竹", 30052, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "78887", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30052, null, 30052, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "78887", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30053, "炮竹", 30054, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146328", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30054, null, 30054, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146328", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30055, "炮竹", 30056, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146329", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30056, null, 30056, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146329", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30057, "炮竹", 30058, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146753", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30058, null, 30058, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146753", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30059, "炮竹", 30060, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146754", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30060, null, 30060, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146754", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30061, "炮竹", 30062, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146781", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30062, null, 30062, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146781", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30063, "炮竹", 30064, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "146782", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30064, null, 30064, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "146782", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30065, "炮竹", 30066, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "173515", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30066, null, 30066, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "173515", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30067, "炮竹", 30068, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "173518", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30068, null, 30068, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "173518", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30069, "炮竹", 30070, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "174247", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30070, null, 30070, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "174247", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30071, "炮竹", 30072, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "174249", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30072, null, 30072, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "174249", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30073, "炮竹", 30074, 5, 0, "96556", 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "103437", "174251", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 30074, null, 30074, 0, 0, null, 15, [ 4.52, 1.11, -5.3, 0, 0, 0, 1, 1, 1 ], "124999", [ 1, 1 ], 0, null, null, 0, null, null, null, 0, "103437", null, [ 2, 5, 1 ], "96556", [ 0, 0, 100, 0, 0, 0, 1.5, 1.5, 1.5 ], null, null, "174251", [ 0, 0, 0, 0, 0, 0, .7, .7, .7 ], "97372", [ 1, 500 ], null, null, null, null, null, null, 0, null, 0, null, 0, null, 0, 0, 0, null ], [ 60001, "滑板", 0, 6, 0, "363FEA624259C1B9142621B378EF2D00", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "167883", null, null, null, null, null, null, null, null, null, null, "167883", null, null, null, null, "151060", 3, "151060", 3, null, 0, null, 0, 0, 0, null ], [ 60002, "滑板2", 0, 6, 0, "E8023A80499578B92FF7FF9DC6B0C5DF", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "167952", null, null, null, null, null, null, null, null, null, null, "167952", null, null, null, null, "151060", 3, "151060", 3, null, 0, null, 0, 0, 0, null ], [ 60003, "滑板3", 0, 6, 0, "DD372C0847DF60EA5A71188793CED8B9", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "167952", null, null, null, null, null, null, null, null, null, null, "167952", null, null, null, null, "151060", 3, "151060", 3, null, 0, null, 0, 0, 0, null ], [ 60004, "冲浪板", 0, 6, 0, "CA4C723A47326DBDD6C15E81BF263948", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "120767", "112946", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "151060", 3, "151060", 3, null, 0, null, 0, 0, 0, null ], [ 60005, "冲浪板_1", 0, 6, 0, "44C88B394905C23FAEB144A09D1C288F", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "120767", "112935", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "151060", 3, "151060", 3, null, 0, null, 0, 0, 0, null ], [ 60006, "自行车", 0, 6, 0, "3535C0024A4AB595E185E696C68D7A92", 23, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "126636", "31526", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, "174560", 1, "285057", 3, null, 0, 0, 0, null ], [ 60007, "自行车1", 0, 6, 0, "CD227C3B493C28D21247CF9B037E2C79", 23, [ 0, 0, 0, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "126636", "186109", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, "174560", 1, "285057", 3, null, 0, 0, 0, null ], [ 60008, "花猪", 0, 6, 0, "10C7602E48F2D1CCFB972EBF05FCEB99", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "160429", "159590", null, null, null, null, null, null, null, null, null, null, "159590", [ 15, 0, 50, 0, 0, 0, 1, 1, 1 ], "181293", "181291", null, 0, null, 0, "169639", 3, "169638", 3, 0, 0, null ], [ 60009, "狗儿子", 0, 6, 0, "30AACA6644A6A8934E7CBA8C6391853F", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "160427", "160319", null, null, null, null, null, null, null, null, null, null, "160319", [ 20, 0, 80, 0, 0, 0, 2, 2, 2 ], "181293", "181291", null, 0, null, 0, "169639", 3, "169638", 3, 0, 0, null ], [ 60010, "彩虹马", 0, 6, 0, "04EC792B4A3A2234074439AD1B38B6A0", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "131921", "174968", null, null, null, null, null, null, null, null, null, null, "174968", [ 20, 0, 80, 0, 0, 0, 3, 3, 3 ], "181293", "181291", null, 0, null, 0, "169639", 3, "169638", 3, 0, 0, null ], [ 60011, "熊猫", 0, 6, 0, "D15BB1CF4FA03737446352A21DFB0807", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "193823", "159933", null, null, null, null, null, null, null, null, null, null, "159933", [ -10, 0, 60, 0, 0, 0, 1.5, 1.5, 1.5 ], "181293", "181291", null, 0, null, 0, "169639", 3, "169638", 3, 0, 0, null ], [ 60012, "小龙", 0, 6, 0, "8A792E1B42F34D60C29234A0B038B26C", 23, [ 0, 0, 0, 0, 0, 90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "408381", "160634", null, null, null, null, null, null, null, null, null, null, "160634", [ 5, 0, 50, 0, 0, 0, 2.4, 2.4, 2.4 ], "160618", "160618", null, 0, null, 0, "169639", 3, "169638", 3, 0, 0, null ], [ 60013, "御剑", 0, 6, 0, "C1CBB0A8489B5CC17AB0A49EBC78D26D", 23, [ -50, 0, 0, 0, 0, -90, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "169463", "300435", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, "284751", 3, "284751", 3, 0, 0, null ], [ 60014, "鱼", 0, 6, 0, "B76602D34118414D88C30ABABC20DCE1", 23, [ 15, 0, 50, 0, 0, 180, 1, 1, 1 ], null, null, 0, null, null, 0, null, null, null, 0, "123030", "23559", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, null, 0, "169639", 3, "169639", 3, 0, 0, null ] ];

class ActionPropConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$17);
    }
}

var foreign7 = Object.freeze({
    __proto__: null,
    ActionPropConfig: ActionPropConfig
});

const EXCELDATA$16 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "399525", 2 ], [ 2, null, "264186", 2 ], [ 3, null, "248351", 2 ], [ 4, null, "221716", 2 ], [ 5, null, "221709", 2 ], [ 6, null, "218570", 2 ], [ 7, null, "142606", 2 ], [ 8, null, "137492", 2 ], [ 9, null, "134959", 2 ], [ 10, null, "66353", 2 ], [ 11, null, "64458", 2 ], [ 12, null, "451380", 1 ], [ 13, null, "264153", 1 ], [ 14, null, "218835", 1 ], [ 15, null, "134561", 1 ], [ 16, null, "134559", 1 ], [ 17, null, "74680", 1 ], [ 18, null, "66593", 1 ], [ 19, null, "66553", 1 ], [ 20, null, "66220", 1 ], [ 21, null, "66149", 1 ], [ 22, null, "65725", 1 ], [ 23, null, "64951", 1 ] ];

class ALongCoatTopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$16);
    }
}

var foreign8 = Object.freeze({
    __proto__: null,
    ALongCoatTopConfig: ALongCoatTopConfig
});

const EXCELDATA$15 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "紫袍皇妃", "361904", 2 ], [ 2, "黄袍皇妃", "361909", 2 ], [ 3, "柔弱少女", "361917", 2 ], [ 4, "旗袍", "163277", 2 ], [ 5, "冰雪少女服饰", "163281", 2 ], [ 6, "短款汉服襦裙", "163285", 2 ], [ 7, "西域舞蹈服饰", "163289", 2 ], [ 8, "对襟襦裙", "163295", 2 ], [ 9, "汉服襦裙", "163314", 2 ], [ 10, "民族服饰", "163711", 2 ], [ 11, "古风大唐袖衫", "270466", 2 ], [ 12, "古装潮流女", "299952", 2 ], [ 13, "汉服男套装", "162928", 1 ], [ 14, "作战服", "162951", 1 ], [ 15, "汉服长袍", "162965", 1 ], [ 16, "清代官服", "164358", 1 ], [ 17, "刺绣古装男", "300154", 1 ], [ 18, "古风长发书生", "351095", 1 ], [ 19, "盔甲套装男", "351111", 1 ], [ 20, "富家子弟", "361912", 1 ], [ 21, "黑衣侠客", "361918", 1 ], [ 22, "古代将军", "362520", 1 ], [ 23, "白衣军师", "362525", 1 ], [ 24, "古代诗人", "362539", 1 ] ];

class AncientMoldingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$15);
    }
}

var foreign9 = Object.freeze({
    __proto__: null,
    AncientMoldingOutfitConfig: AncientMoldingOutfitConfig
});

const EXCELDATA$14 = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "双层翅膀", "334814", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 2, "翅膀", "135851", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 3, "六翼翅膀", "399002", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 4, "精灵翅膀", "339243", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 5, null, "326976", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 6, null, "211667", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 7, null, "452702", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 8, null, "449694", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 9, null, "449687", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 10, null, "449659", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 11, null, "393543", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 12, null, "375152", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 13, null, "375788", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 14, null, "375145", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 15, null, "375134", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 16, null, "145912", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 17, null, "42805", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 18, null, "42816", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 19, null, "342530", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 20, null, "211666", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 21, null, "178438", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 22, null, "378668", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 23, null, "342526", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 24, null, "342525", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 25, null, "340180", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 26, null, "340178", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 27, null, "145910", [ "0", "0", "0", "0", "0", "180", "1", "1", "1" ], 0 ], [ 28, null, "145909", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 29, null, "145908", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 30, null, "145907", [ "0", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 31, null, "145906", [ "0", "0", "-20", "0", "0", "90", "1", "1", "1" ], 0 ], [ 32, null, "145904", [ "0", "0", "0", "0", "0", "180", "1", "1", "1" ], 0 ], [ 33, "棺材", "117847", [ "0", "0", "-132", "0", "0", "90", "1", "1", "1" ], 0 ], [ 34, "环绕", "146784", [ "0", "0", "-18", "0", "0", "0", "1.2", "1.2", "1.2" ], 0 ], [ 35, null, "88757", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 36, null, "88756", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 37, null, "88767", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 38, null, "88770", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 39, null, "88769", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 40, null, "127018", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 41, null, "127019", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 42, null, "155677", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 43, null, "155680", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 44, null, "155682", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 45, null, "155684", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 46, null, "155705", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 47, null, "155706", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 48, null, "155707", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 49, null, "157113", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 50, null, "157118", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 51, null, "157119", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 52, null, "157253", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 53, null, "157254", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 54, null, "160335", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 55, null, "160339", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 56, null, "160340", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 57, null, "160342", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 58, null, "160344", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 59, null, "160347", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 60, null, "160345", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 61, null, "160343", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 62, null, "301947", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 63, null, "326208", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 64, null, "326209", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 65, null, "326306", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 66, null, "328807", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 67, null, "445944", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 68, null, "499861", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 69, null, "517323", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 70, null, "510179", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 71, null, "510182", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 72, null, "510184", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 73, null, "530877", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 74, null, "530878", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 75, null, "530881", [ "30", "0", "-100", "0", "0", "90", "1", "1", "1" ], 0 ], [ 76, "闪电", "142950", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 77, "飞行背包", "131208", [ "-6", "0", "-123", "0", "0", "90", "1", "1", "1" ], 0 ], [ 78, "小熊背包", "454815", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 79, "小熊背包", "454822", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 80, "小熊背包", "454833", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 81, "小熊背包", "454834", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 82, null, "132890", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 83, null, "132891", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 84, null, "132893", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 85, null, "132894", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 86, null, "132892", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 87, null, "402315", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 88, null, "402301", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 89, null, "397447", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 90, null, "409377", [ "30", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 91, null, "409330", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 92, null, "424761", [ "30", "0", "0", "0", "90", "0", "1", "1", "1" ], 0 ], [ 93, null, "348269", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 94, null, "196412", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ], [ 95, null, "155703", [ "30", "0", "0", "0", "0", "90", "1", "1", "1" ], 0 ] ];

class BackConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$14);
    }
}

var foreign10 = Object.freeze({
    __proto__: null,
    BackConfig: BackConfig
});

const EXCELDATA$13 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "57735", 2 ], [ 2, null, "60080", 2 ], [ 3, null, "60116", 2 ], [ 4, null, "60990", 2 ], [ 5, null, "61002", 2 ], [ 6, null, "62545", 2 ], [ 7, null, "62548", 2 ], [ 8, null, "62786", 2 ], [ 9, null, "62788", 2 ], [ 10, null, "62789", 2 ], [ 11, null, "62966", 2 ], [ 12, null, "62968", 2 ], [ 13, null, "63305", 2 ], [ 14, null, "63306", 2 ], [ 15, null, "63309", 2 ], [ 16, null, "63310", 2 ], [ 17, null, "63311", 2 ], [ 18, null, "63549", 2 ], [ 19, null, "63550", 2 ], [ 20, null, "63551", 2 ], [ 21, null, "63647", 2 ], [ 22, null, "63874", 2 ], [ 23, null, "64148", 2 ], [ 24, null, "64149", 2 ], [ 25, null, "64150", 2 ], [ 26, null, "64259", 2 ], [ 27, null, "64261", 2 ], [ 28, null, "64310", 2 ], [ 29, null, "64415", 2 ], [ 30, null, "64717", 2 ], [ 31, null, "64718", 2 ], [ 32, null, "65663", 2 ], [ 33, null, "65711", 2 ], [ 34, null, "65868", 2 ], [ 35, null, "66357", 2 ], [ 36, null, "66418", 2 ], [ 37, null, "66507", 2 ], [ 38, null, "66563", 2 ], [ 39, null, "66575", 2 ], [ 40, null, "66711", 2 ], [ 41, null, "66734", 2 ], [ 42, null, "67587", 2 ], [ 43, null, "73211", 2 ], [ 44, null, "73212", 2 ], [ 45, null, "74318", 2 ], [ 46, null, "86091", 2 ], [ 47, null, "109838", 2 ], [ 48, null, "117150", 2 ], [ 49, null, "117492", 2 ], [ 50, null, "118421", 2 ], [ 51, null, "118435", 2 ], [ 52, null, "118445", 2 ], [ 53, null, "118452", 2 ], [ 54, null, "118483", 2 ], [ 55, null, "118517", 2 ], [ 56, null, "118531", 2 ], [ 57, null, "118544", 2 ], [ 58, null, "118562", 2 ], [ 59, null, "119413", 2 ], [ 60, null, "119430", 2 ], [ 61, null, "119446", 2 ], [ 62, null, "124779", 2 ], [ 63, null, "124792", 2 ], [ 64, null, "126006", 2 ], [ 65, null, "126617", 2 ], [ 66, null, "127276", 2 ], [ 67, null, "127637", 2 ], [ 68, null, "127680", 2 ], [ 69, null, "132223", 2 ], [ 70, null, "132225", 2 ], [ 71, null, "132227", 2 ], [ 72, null, "132228", 2 ], [ 73, null, "132229", 2 ], [ 74, null, "137381", 2 ], [ 75, null, "137493", 2 ], [ 76, null, "140482", 2 ], [ 77, null, "141711", 2 ], [ 78, null, "142599", 2 ], [ 79, null, "142605", 2 ], [ 80, null, "142676", 2 ], [ 81, null, "142677", 2 ], [ 82, null, "142681", 2 ], [ 83, null, "142836", 2 ], [ 84, null, "142846", 2 ], [ 85, null, "144625", 2 ], [ 86, null, "144680", 2 ], [ 87, null, "181364", 2 ], [ 88, null, "195705", 2 ], [ 89, null, "195706", 2 ], [ 90, null, "217608", 2 ], [ 91, null, "218591", 2 ], [ 92, null, "221652", 2 ], [ 93, null, "240053", 2 ], [ 94, null, "240936", 2 ], [ 95, null, "241188", 2 ], [ 96, null, "241443", 2 ], [ 97, null, "292001", 2 ], [ 98, null, "299080", 2 ], [ 99, null, "346551", 2 ], [ 100, null, "349653", 2 ], [ 101, null, "358219", 2 ], [ 102, null, "392301", 2 ], [ 103, null, "399523", 2 ], [ 104, null, "457926", 2 ], [ 105, null, "468348", 2 ], [ 106, null, "490923", 2 ], [ 107, null, "497920", 2 ], [ 108, null, "60383", 1 ], [ 109, null, "63679", 1 ], [ 110, null, "63910", 1 ], [ 111, null, "64186", 1 ], [ 112, null, "64719", 1 ], [ 113, null, "64998", 1 ], [ 114, null, "65007", 1 ], [ 115, null, "65728", 1 ], [ 116, null, "65777", 1 ], [ 117, null, "65977", 1 ], [ 118, null, "66109", 1 ], [ 119, null, "66151", 1 ], [ 120, null, "66161", 1 ], [ 121, null, "66421", 1 ], [ 122, null, "66422", 1 ], [ 123, null, "66557", 1 ], [ 124, null, "66595", 1 ], [ 125, null, "66698", 1 ], [ 126, null, "74120", 1 ], [ 127, null, "74121", 1 ], [ 128, null, "92012", 1 ], [ 129, null, "119494", 1 ], [ 130, null, "119680", 1 ], [ 131, null, "119696", 1 ], [ 132, null, "119876", 1 ], [ 133, null, "120200", 1 ], [ 134, null, "121120", 1 ], [ 135, null, "121121", 1 ], [ 136, null, "122002", 1 ], [ 137, null, "122920", 1 ], [ 138, null, "124848", 1 ], [ 139, null, "126004", 1 ], [ 140, null, "129175", 1 ], [ 141, null, "129459", 1 ], [ 142, null, "129952", 1 ], [ 143, null, "130755", 1 ], [ 144, null, "140328", 1 ], [ 145, null, "140424", 1 ], [ 146, null, "142603", 1 ], [ 147, null, "144328", 1 ], [ 148, null, "144340", 1 ], [ 149, null, "144412", 1 ], [ 150, null, "241323", 1 ], [ 151, null, "247527", 1 ], [ 152, null, "250942", 1 ], [ 153, null, "250944", 1 ], [ 154, null, "266162", 1 ], [ 155, null, "314482", 1 ] ];

class BackHairConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$13);
    }
}

var foreign11 = Object.freeze({
    __proto__: null,
    BackHairConfig: BackHairConfig
});

const EXCELDATA$12 = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, null, "454704", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, null, "454729", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, null, "454730", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 4, null, "454731", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, null, "454740", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, null, "458894", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, null, "458895", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 8, null, "458896", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, null, "458897", [ "-7", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class BackPetConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$12);
    }
}

var foreign12 = Object.freeze({
    __proto__: null,
    BackPetConfig: BackPetConfig
});

const EXCELDATA$11 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "531764", 0 ], [ 2, null, "370252", 0 ], [ 3, null, "370251", 0 ], [ 4, null, "370250", 0 ], [ 5, null, "370249", 0 ], [ 6, null, "370246", 0 ], [ 7, null, "370245", 0 ], [ 8, null, "370239", 0 ], [ 9, null, "215936", 0 ], [ 10, null, "215935", 0 ], [ 11, null, "215934", 0 ], [ 12, null, "215933", 0 ], [ 13, null, "215932", 0 ], [ 14, null, "215930", 0 ], [ 15, null, "215929", 0 ], [ 16, null, "215928", 0 ], [ 17, null, "215927", 0 ], [ 18, null, "215926", 0 ], [ 19, null, "215925", 0 ], [ 20, null, "215924", 0 ], [ 21, null, "215923", 0 ], [ 22, null, "215922", 0 ], [ 23, null, "215921", 0 ], [ 24, null, "215920", 0 ], [ 25, null, "215919", 0 ], [ 26, null, "215918", 0 ], [ 27, null, "215917", 0 ], [ 28, null, "215916", 0 ], [ 29, null, "215915", 0 ], [ 30, null, "215914", 0 ], [ 31, null, "215913", 0 ], [ 32, null, "215911", 0 ], [ 33, null, "215910", 0 ], [ 34, null, "215909", 0 ], [ 35, null, "215908", 0 ], [ 36, null, "215907", 0 ], [ 37, null, "215906", 0 ], [ 38, null, "215905", 0 ], [ 39, null, "215904", 0 ], [ 40, null, "215903", 0 ], [ 41, null, "215902", 0 ], [ 42, null, "215901", 0 ], [ 43, null, "215900", 0 ], [ 44, null, "215899", 0 ], [ 45, null, "215898", 0 ], [ 46, null, "215897", 0 ], [ 47, null, "215896", 0 ], [ 48, null, "215895", 0 ], [ 49, null, "164837", 0 ], [ 50, null, "129303", 0 ], [ 51, null, "121548", 0 ], [ 52, null, "112597", 0 ], [ 53, null, "112596", 0 ], [ 54, null, "112595", 0 ], [ 55, null, "112594", 0 ], [ 56, null, "112593", 0 ], [ 57, null, "112591", 0 ], [ 58, null, "112590", 0 ], [ 59, null, "112589", 0 ], [ 60, null, "112588", 0 ], [ 61, null, "112586", 0 ], [ 62, null, "107625", 0 ], [ 63, null, "77490", 0 ], [ 64, null, "77489", 0 ], [ 65, null, "77488", 0 ], [ 66, null, "77487", 0 ], [ 67, null, "77442", 0 ], [ 68, null, "77441", 0 ], [ 69, null, "77440", 0 ], [ 70, null, "77439", 0 ], [ 71, null, "77438", 0 ], [ 72, null, "77437", 0 ], [ 73, null, "75674", 0 ], [ 74, null, "75673", 0 ], [ 75, null, "32114", 0 ], [ 76, null, "32103", 0 ] ];

class BlushConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$11);
    }
}

var foreign13 = Object.freeze({
    __proto__: null,
    BlushConfig: BlushConfig
});

const EXCELDATA$10 = [ [ "ID", "Describe", "Scale", "SexType", "Icon" ], [ "", "", "", "", "" ], [ 1, "0.7倍", .7, 0, "119160" ], [ 2, "0.8倍", .8, 0, "119155" ], [ 3, "0.9倍", .9, 0, "119155" ], [ 4, "正常", 1, 0, "119156" ], [ 5, "1.1倍", 1.1, 0, "119157" ], [ 6, "1.2倍", 1.2, 0, "119157" ], [ 7, "1.3倍", 1.3, 0, "119152" ] ];

class BodyTypeConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$10);
    }
}

var foreign14 = Object.freeze({
    __proto__: null,
    BodyTypeConfig: BodyTypeConfig
});

const EXCELDATA$$ = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "502241", 2 ], [ 2, null, "497874", 2 ], [ 3, null, "497782", 2 ], [ 4, null, "458636", 2 ], [ 5, null, "457812", 2 ], [ 6, null, "440206", 2 ], [ 7, null, "437606", 2 ], [ 8, null, "412090", 2 ], [ 9, null, "298038", 2 ], [ 10, null, "264185", 2 ], [ 11, null, "240934", 2 ], [ 12, null, "240050", 2 ], [ 13, null, "221708", 2 ], [ 14, null, "218866", 2 ], [ 15, null, "140484", 2 ], [ 16, null, "137490", 2 ], [ 17, null, "137383", 2 ], [ 18, null, "134232", 2 ], [ 19, null, "131788", 2 ], [ 20, null, "128835", 2 ], [ 21, null, "125735", 2 ], [ 22, null, "115850", 2 ], [ 23, null, "111252", 2 ], [ 24, null, "111082", 2 ], [ 25, null, "74458", 2 ], [ 26, null, "66709", 2 ], [ 27, null, "64456", 2 ], [ 28, null, "64209", 2 ], [ 29, null, "63297", 2 ], [ 30, null, "63296", 2 ], [ 31, null, "62780", 2 ], [ 32, null, "59427", 2 ], [ 33, null, "502159", 1 ], [ 34, null, "494889", 1 ], [ 35, null, "479088", 1 ], [ 36, null, "218865", 1 ], [ 37, null, "218832", 1 ], [ 38, null, "181111", 1 ], [ 39, null, "140279", 1 ], [ 40, null, "134565", 1 ], [ 41, null, "134558", 1 ], [ 42, null, "131749", 1 ], [ 43, null, "129937", 1 ], [ 44, null, "129248", 1 ], [ 45, null, "129178", 1 ], [ 46, null, "127715", 1 ], [ 47, null, "127498", 1 ], [ 48, null, "125687", 1 ], [ 49, null, "122088", 1 ], [ 50, null, "119774", 1 ], [ 51, null, "119340", 1 ], [ 52, null, "119255", 1 ], [ 53, null, "112569", 1 ], [ 54, null, "111769", 1 ], [ 55, null, "111618", 1 ], [ 56, null, "111393", 1 ], [ 57, null, "111354", 1 ], [ 58, null, "111287", 1 ], [ 59, null, "111160", 1 ], [ 60, null, "94773", 1 ], [ 61, null, "92016", 1 ], [ 62, null, "74116", 1 ], [ 63, null, "66555", 1 ], [ 64, null, "65779", 1 ], [ 65, null, "60385", 1 ] ];

class BootsShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$$);
    }
}

var foreign15 = Object.freeze({
    __proto__: null,
    BootsShoesConfig: BootsShoesConfig
});

const EXCELDATA$_ = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "套靴长裤", "60386", 1 ], [ 2, "制服短裙", "57736", 2 ] ];

class BottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$_);
    }
}

var foreign16 = Object.freeze({
    __proto__: null,
    BottomConfig: BottomConfig
});

const EXCELDATA$Z = [ [ "Id", "Chats", "ChatChilds" ], [ "", "", "" ], [ 1, [ "Praise", "赞美" ], [ [ "Your outfit looks great!", "你的搭配真好看！" ], [ "This dress fits you well!", "这件衣服好适合你！" ], [ "Hair and makeup match!", "发型和妆容绝配！" ], [ "You're so good!", "你太会搭了！" ] ] ], [ 2, [ "Help", "求助" ], [ [ "How about looking at this set for me?", "帮我看看这套怎么样？" ], [ "What shoes would go with this dress?", "这件衣服配什么鞋子好？" ], [ "Are there any recommended color combinations?", "有没有推荐的颜色搭配？" ], [ "Does this hairstyle suit me?", "这个发型适合我吗？" ] ] ], [ 3, [ "Interaction", "互动" ], [ [ "Share your outfit!", "分享一下穿搭吧！" ], [ "PK to match it!", "来PK一下搭配吧！" ], [ "What style do you prefer?", "你喜欢什么风格？" ], [ "We can try each other on!", "我们可以互相试穿哦！" ] ] ], [ 4, [ "Thank you", "感谢" ], [ [ "Thanks for the advice!", "谢谢你的建议！" ], [ "Thanks for sharing!", "感谢你的分享！" ], [ "Thanks for the compliment!", "谢谢夸奖！" ], [ "Thanks for your help!", "感谢你的帮助！" ] ] ], [ 5, [ "Make fun of", "吐槽" ], [ [ "This dress is so hard to match!", "这件衣服太难搭了！" ], [ "You are out of line!", "你好过分！" ], [ "No hee hee!", "不嘻嘻！" ] ] ], [ 6, [ "Invitation", "邀请" ], [ [ "Add a friend!", "加个好友吧！" ], [ "Team up!", "一起组队吧！" ], [ "Come on, my dress!", "试穿我的穿搭！" ] ] ], [ 7, [ "Show Time!", ")*o*( 我要开始表演了~" ], null ] ];

class ChatConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$Z);
    }
}

var foreign17 = Object.freeze({
    __proto__: null,
    ChatConfig: ChatConfig
});

const EXCELDATA$Y = [ [ "ID", "SkinToneColor", "PupilColor", "HairColor", "TopColor", "BottomColor", "ShoeColor", "GloveColor", "EyebrowsColor", "EyeLashColor", "EyeShadow", "BlushColor", "LipstickColor", "PupilStyleColor" ], [ "", "", "", "", "", "", "", "", "", "", "", "", "", "" ], [ 1, "FEF9F6FF", "F76964FF", "D5C7D4FF", "A086DEFF", "A086DEFF", "316459FF", "316459FF", "312E2CFF", "312E2CFF", "FFEEE7FF", "FFD6E6FF", "B56B63FF", "F76964FF" ], [ 2, "F7DACCFF", "FEC574FF", "A77FB8FF", "D95F5DFF", "D95F5DFF", "68605BFF", "68605BFF", "4A2B25FF", "4A2B25FF", "946A7BFF", "FE77B3FF", "F87874FF", "FEC574FF" ], [ 3, "ECC8AEFF", "AD82F7FF", "FBD97FFF", "AED85BFF", "AED85BFF", "F8AC35FF", "F8AC35FF", "7A3730FF", "7A3730FF", "A59273FF", "C14C71FF", "E78863FF", "AD82F7FF" ], [ 4, "805F4CFF", "1F2329FF", "B1AE7BFF", "FCC86DFF", "FCC86DFF", "0C81B4FF", "0C81B4FF", "863F30FF", "863F30FF", "E7B6A5FF", "FDAEB9FF", "F2AEB2FF", "1F2329FF" ], [ 5, "341C10FF", "8EE085FF", "7A92B4FF", "BABEBDFF", "BABEBDFF", "026B47FF", "026B47FF", "B26949FF", "B26949FF", "5A5D5AFF", "FED2D7FF", "FFDAD6FF", "8EE085FF" ], [ 6, "F9E175FF", "47B7F6FF", "2F2629FF", "2E5A8FFF", "2E5A8FFF", "BABEBDFF", "BABEBDFF", "E9A37BFF", "E9A37BFF", "312E2CFF", "F9E2DFFF", "BC6A65FF", "47B7F6FF" ] ];

class ColorValueConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$Y);
    }
}

var foreign18 = Object.freeze({
    __proto__: null,
    ColorValueConfig: ColorValueConfig
});

const EXCELDATA$X = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "制服女", "367076", 2 ], [ 2, "制服女", "435694", 2 ], [ 3, "一定过套装", "253153", 2 ], [ 4, "主打求神套装", "264188", 2 ], [ 5, "卡皮巴拉套装1", "270007", 2 ], [ 6, "卡皮巴拉套装2", "213620", 2 ], [ 7, "女学生角色", "343066", 2 ], [ 8, "和服", "334005", 2 ], [ 9, "JK女生", "320751", 2 ], [ 10, "新年毛衣", "298108", 2 ], [ 11, "露肩长裙", "218598", 2 ], [ 12, null, "215971", 2 ], [ 13, null, "213622", 2 ], [ 14, null, "270008", 2 ], [ 15, null, "213535", 2 ], [ 16, null, "213533", 2 ], [ 17, null, "164426", 2 ], [ 18, null, "164421", 2 ], [ 19, null, "164418", 2 ], [ 20, null, "163712", 2 ], [ 21, null, "163710", 2 ], [ 22, null, "163709", 2 ], [ 23, null, "163708", 2 ], [ 24, null, "163707", 2 ], [ 25, null, "163706", 2 ], [ 26, null, "163624", 2 ], [ 27, null, "163551", 2 ], [ 28, null, "163550", 2 ], [ 29, null, "163548", 2 ], [ 30, null, "163547", 2 ], [ 31, null, "163546", 2 ], [ 32, null, "163545", 2 ], [ 33, null, "163544", 2 ], [ 34, null, "163543", 2 ], [ 35, null, "163529", 2 ], [ 36, null, "163528", 2 ], [ 37, null, "163527", 2 ], [ 38, null, "163526", 2 ], [ 39, null, "163525", 2 ], [ 40, null, "163524", 2 ], [ 41, null, "163523", 2 ], [ 42, null, "163522", 2 ], [ 43, null, "163521", 2 ], [ 44, null, "163334", 2 ], [ 45, null, "163333", 2 ], [ 46, null, "163332", 2 ], [ 47, null, "163331", 2 ], [ 48, null, "163328", 2 ], [ 49, null, "163327", 2 ], [ 50, null, "163325", 2 ], [ 51, null, "163324", 2 ], [ 52, null, "163323", 2 ], [ 53, null, "163322", 2 ], [ 54, null, "163321", 2 ], [ 55, null, "163320", 2 ], [ 56, null, "163319", 2 ], [ 57, null, "163318", 2 ], [ 58, null, "163317", 2 ], [ 59, null, "163316", 2 ], [ 60, null, "163315", 2 ], [ 61, null, "163313", 2 ], [ 62, null, "163312", 2 ], [ 63, null, "163311", 2 ], [ 64, null, "163310", 2 ], [ 65, null, "163309", 2 ], [ 66, null, "163308", 2 ], [ 67, null, "163307", 2 ], [ 68, null, "163306", 2 ], [ 69, null, "163305", 2 ], [ 70, null, "163303", 2 ], [ 71, null, "163302", 2 ], [ 72, null, "163301", 2 ], [ 73, null, "163300", 2 ], [ 74, null, "163299", 2 ], [ 75, null, "163298", 2 ], [ 76, null, "163297", 2 ], [ 77, null, "163296", 2 ], [ 78, null, "163294", 2 ], [ 79, null, "163293", 2 ], [ 80, null, "163292", 2 ], [ 81, null, "163291", 2 ], [ 82, null, "163290", 2 ], [ 83, null, "163288", 2 ], [ 84, null, "163287", 2 ], [ 85, null, "163286", 2 ], [ 86, null, "163284", 2 ], [ 87, null, "163283", 2 ], [ 88, null, "163282", 2 ], [ 89, null, "163275", 2 ], [ 90, null, "162960", 2 ], [ 91, null, "162957", 2 ], [ 92, null, "136183", 2 ], [ 93, null, "136184", 2 ], [ 94, null, "136185", 2 ], [ 95, null, "136186", 2 ], [ 96, null, "136187", 2 ], [ 97, null, "136188", 2 ], [ 98, null, "136190", 2 ], [ 99, null, "136191", 2 ], [ 100, null, "136289", 2 ], [ 101, null, "136290", 2 ], [ 102, null, "136291", 2 ], [ 103, null, "136292", 2 ], [ 104, null, "136295", 2 ], [ 105, null, "136300", 2 ], [ 106, null, "136302", 2 ], [ 107, null, "136304", 2 ], [ 108, null, "137840", 2 ], [ 109, null, "137847", 2 ], [ 110, null, "137852", 2 ], [ 111, null, "137855", 2 ], [ 112, null, "141013", 2 ], [ 113, null, "141016", 2 ], [ 114, null, "141019", 2 ], [ 115, null, "141020", 2 ], [ 116, null, "141022", 2 ], [ 117, null, "141023", 2 ], [ 118, null, "141026", 2 ], [ 119, null, "141027", 2 ], [ 120, null, "141048", 2 ], [ 121, null, "141049", 2 ], [ 122, null, "141051", 2 ], [ 123, null, "141052", 2 ], [ 124, null, "141053", 2 ], [ 125, null, "141054", 2 ], [ 126, null, "141057", 2 ], [ 127, null, "141059", 2 ], [ 128, null, "141060", 2 ], [ 129, null, "141080", 2 ], [ 130, null, "141082", 2 ], [ 131, null, "141084", 2 ], [ 132, null, "141085", 2 ], [ 133, null, "141089", 2 ], [ 134, null, "141090", 2 ], [ 135, null, "141091", 2 ], [ 136, null, "141093", 2 ], [ 137, null, "141095", 2 ], [ 138, null, "141100", 2 ], [ 139, null, "141102", 2 ], [ 140, null, "141106", 2 ], [ 141, null, "141126", 2 ], [ 142, null, "141141", 2 ], [ 143, null, "141142", 2 ], [ 144, null, "141154", 2 ], [ 145, null, "141483", 2 ], [ 146, null, "141484", 2 ], [ 147, null, "141488", 2 ], [ 148, null, "141490", 2 ], [ 149, null, "141492", 2 ], [ 150, null, "141494", 2 ], [ 151, null, "141501", 2 ], [ 152, null, "141502", 2 ], [ 153, null, "141503", 2 ], [ 154, null, "141505", 2 ], [ 155, null, "141528", 2 ], [ 156, null, "141542", 2 ], [ 157, null, "141620", 2 ], [ 158, null, "141647", 2 ], [ 159, null, "141714", 2 ], [ 160, null, "141717", 2 ], [ 161, null, "141733", 2 ], [ 162, null, "141928", 2 ], [ 163, null, "142185", 2 ], [ 164, null, "142188", 2 ], [ 165, null, "142189", 2 ], [ 166, null, "142191", 2 ], [ 167, null, "142194", 2 ], [ 168, null, "142249", 2 ], [ 169, null, "142257", 2 ], [ 170, null, "142267", 2 ], [ 171, null, "142269", 2 ], [ 172, null, "142274", 2 ], [ 173, null, "142287", 2 ], [ 174, null, "142289", 2 ], [ 175, null, "142304", 2 ], [ 176, null, "142307", 2 ], [ 177, null, "142309", 2 ], [ 178, null, "142348", 2 ], [ 179, null, "142350", 2 ], [ 180, null, "142391", 2 ], [ 181, null, "142392", 2 ], [ 182, null, "142427", 2 ], [ 183, null, "142866", 2 ], [ 184, null, "142867", 2 ], [ 185, null, "142875", 2 ], [ 186, null, "142879", 2 ], [ 187, null, "143391", 2 ], [ 188, null, "143393", 2 ], [ 189, null, "143400", 2 ], [ 190, null, "143401", 2 ], [ 191, null, "143419", 2 ], [ 192, null, "143420", 2 ], [ 193, null, "147934", 2 ], [ 194, null, "226385", 2 ], [ 195, null, "347528", 2 ], [ 196, null, "347564", 2 ], [ 197, null, "347607", 2 ], [ 198, null, "349208", 2 ], [ 199, null, "349214", 2 ], [ 200, null, "349215", 2 ], [ 201, null, "349245", 2 ], [ 202, null, "349269", 2 ], [ 203, null, "349270", 2 ], [ 204, null, "349310", 2 ], [ 205, null, "349315", 2 ], [ 206, null, "349371", 2 ], [ 207, null, "349375", 2 ], [ 208, null, "350314", 2 ], [ 209, null, "350315", 2 ], [ 210, null, "350318", 2 ], [ 211, null, "350568", 2 ], [ 212, null, "350569", 2 ], [ 213, null, "350570", 2 ], [ 214, null, "350574", 2 ], [ 215, null, "350575", 2 ], [ 216, null, "350576", 2 ], [ 217, null, "350667", 2 ], [ 218, null, "350738", 2 ], [ 219, null, "350739", 2 ], [ 220, null, "350740", 2 ], [ 221, null, "350744", 2 ], [ 222, null, "350746", 2 ], [ 223, null, "350752", 2 ], [ 224, null, "350756", 2 ], [ 225, null, "350956", 2 ], [ 226, null, "350958", 2 ], [ 227, null, "350959", 2 ], [ 228, null, "350973", 2 ], [ 229, null, "350987", 2 ], [ 230, null, "351004", 2 ], [ 231, null, "351025", 2 ], [ 232, null, "351397", 2 ], [ 233, null, "351404", 2 ], [ 234, null, "351497", 2 ], [ 235, null, "351500", 2 ], [ 236, null, "351600", 2 ], [ 237, null, "361910", 2 ], [ 238, null, "385222", 2 ], [ 239, null, "226377", 1 ], [ 240, null, "263401", 1 ], [ 241, null, "264189", 1 ], [ 242, null, "397887", 1 ], [ 243, null, "392825", 1 ], [ 244, null, "343523", 1 ], [ 245, null, "321374", 1 ], [ 246, null, "305216", 1 ], [ 247, null, "254424", 1 ], [ 248, null, "213621", 1 ], [ 249, null, "213534", 1 ], [ 250, null, "164379", 1 ], [ 251, null, "164376", 1 ], [ 252, null, "164375", 1 ], [ 253, null, "164374", 1 ], [ 254, null, "164372", 1 ], [ 255, null, "164370", 1 ], [ 256, null, "164365", 1 ], [ 257, null, "164363", 1 ], [ 258, null, "164357", 1 ], [ 259, null, "163627", 1 ], [ 260, null, "163626", 1 ], [ 261, null, "163625", 1 ], [ 262, null, "163623", 1 ], [ 263, null, "163622", 1 ], [ 264, null, "162975", 1 ], [ 265, null, "162974", 1 ], [ 266, null, "162973", 1 ], [ 267, null, "162972", 1 ], [ 268, null, "162970", 1 ], [ 269, null, "162969", 1 ], [ 270, null, "162968", 1 ], [ 271, null, "162967", 1 ], [ 272, null, "162966", 1 ], [ 273, null, "162963", 1 ], [ 274, null, "162962", 1 ], [ 275, null, "162961", 1 ], [ 276, null, "162959", 1 ], [ 277, null, "162958", 1 ], [ 278, null, "162956", 1 ], [ 279, null, "162954", 1 ], [ 280, null, "162953", 1 ], [ 281, null, "162952", 1 ], [ 282, null, "162949", 1 ], [ 283, null, "162948", 1 ], [ 284, null, "162947", 1 ], [ 285, null, "162945", 1 ], [ 286, null, "162944", 1 ], [ 287, null, "162943", 1 ], [ 288, null, "162942", 1 ], [ 289, null, "162941", 1 ], [ 290, null, "162940", 1 ], [ 291, null, "162939", 1 ], [ 292, null, "162936", 1 ], [ 293, null, "162935", 1 ], [ 294, null, "162934", 1 ], [ 295, null, "162932", 1 ], [ 296, null, "162931", 1 ], [ 297, null, "162930", 1 ], [ 298, null, "162929", 1 ], [ 299, null, "162927", 1 ], [ 300, null, "162925", 1 ], [ 301, null, "136258", 1 ], [ 302, null, "136259", 1 ], [ 303, null, "136260", 1 ], [ 304, null, "136261", 1 ], [ 305, null, "136293", 1 ], [ 306, null, "136294", 1 ], [ 307, null, "136296", 1 ], [ 308, null, "136297", 1 ], [ 309, null, "136301", 1 ], [ 310, null, "136303", 1 ], [ 311, null, "137809", 1 ], [ 312, null, "137838", 1 ], [ 313, null, "137839", 1 ], [ 314, null, "137842", 1 ], [ 315, null, "137844", 1 ], [ 316, null, "137845", 1 ], [ 317, null, "137846", 1 ], [ 318, null, "137848", 1 ], [ 319, null, "137849", 1 ], [ 320, null, "137850", 1 ], [ 321, null, "137853", 1 ], [ 322, null, "137854", 1 ], [ 323, null, "141014", 1 ], [ 324, null, "141015", 1 ], [ 325, null, "141017", 1 ], [ 326, null, "141018", 1 ], [ 327, null, "141024", 1 ], [ 328, null, "141025", 1 ], [ 329, null, "141028", 1 ], [ 330, null, "141029", 1 ], [ 331, null, "141030", 1 ], [ 332, null, "141031", 1 ], [ 333, null, "141041", 1 ], [ 334, null, "141042", 1 ], [ 335, null, "141043", 1 ], [ 336, null, "141045", 1 ], [ 337, null, "141047", 1 ], [ 338, null, "141050", 1 ], [ 339, null, "141058", 1 ], [ 340, null, "141078", 1 ], [ 341, null, "141079", 1 ], [ 342, null, "141081", 1 ], [ 343, null, "141083", 1 ], [ 344, null, "141088", 1 ], [ 345, null, "141092", 1 ], [ 346, null, "141097", 1 ], [ 347, null, "141098", 1 ], [ 348, null, "141101", 1 ], [ 349, null, "141107", 1 ], [ 350, null, "141108", 1 ], [ 351, null, "141127", 1 ], [ 352, null, "141140", 1 ], [ 353, null, "141152", 1 ], [ 354, null, "141482", 1 ], [ 355, null, "141485", 1 ], [ 356, null, "141486", 1 ], [ 357, null, "141487", 1 ], [ 358, null, "141489", 1 ], [ 359, null, "141491", 1 ], [ 360, null, "141493", 1 ], [ 361, null, "141526", 1 ], [ 362, null, "141527", 1 ], [ 363, null, "141536", 1 ], [ 364, null, "141537", 1 ], [ 365, null, "141609", 1 ], [ 366, null, "141618", 1 ], [ 367, null, "141623", 1 ], [ 368, null, "141643", 1 ], [ 369, null, "141713", 1 ], [ 370, null, "141715", 1 ], [ 371, null, "141716", 1 ], [ 372, null, "141718", 1 ], [ 373, null, "141719", 1 ], [ 374, null, "141720", 1 ], [ 375, null, "141927", 1 ], [ 376, null, "142139", 1 ], [ 377, null, "142184", 1 ], [ 378, null, "142190", 1 ], [ 379, null, "142192", 1 ], [ 380, null, "142193", 1 ], [ 381, null, "142250", 1 ], [ 382, null, "142258", 1 ], [ 383, null, "142259", 1 ], [ 384, null, "142260", 1 ], [ 385, null, "142266", 1 ], [ 386, null, "142268", 1 ], [ 387, null, "142271", 1 ], [ 388, null, "142275", 1 ], [ 389, null, "142277", 1 ], [ 390, null, "142279", 1 ], [ 391, null, "142280", 1 ], [ 392, null, "142281", 1 ], [ 393, null, "142282", 1 ], [ 394, null, "142283", 1 ], [ 395, null, "142286", 1 ], [ 396, null, "142288", 1 ], [ 397, null, "142290", 1 ], [ 398, null, "142295", 1 ], [ 399, null, "142296", 1 ], [ 400, null, "142297", 1 ], [ 401, null, "142298", 1 ], [ 402, null, "142299", 1 ], [ 403, null, "142301", 1 ], [ 404, null, "142302", 1 ], [ 405, null, "142303", 1 ], [ 406, null, "142305", 1 ], [ 407, null, "142314", 1 ], [ 408, null, "142349", 1 ], [ 409, null, "142390", 1 ], [ 410, null, "142393", 1 ], [ 411, null, "142394", 1 ], [ 412, null, "142395", 1 ], [ 413, null, "142396", 1 ], [ 414, null, "142397", 1 ], [ 415, null, "142398", 1 ], [ 416, null, "142399", 1 ], [ 417, null, "142864", 1 ], [ 418, null, "142865", 1 ], [ 419, null, "142868", 1 ], [ 420, null, "142869", 1 ], [ 421, null, "142870", 1 ], [ 422, null, "142871", 1 ], [ 423, null, "142872", 1 ], [ 424, null, "142873", 1 ], [ 425, null, "142876", 1 ], [ 426, null, "142878", 1 ], [ 427, null, "142882", 1 ], [ 428, null, "142883", 1 ], [ 429, null, "144870", 1 ], [ 430, null, "144871", 1 ], [ 431, null, "144872", 1 ], [ 432, null, "145320", 1 ], [ 433, null, "145321", 1 ], [ 434, null, "148750", 1 ], [ 435, null, "148751", 1 ], [ 436, null, "148752", 1 ], [ 437, null, "346901", 1 ], [ 438, null, "347527", 1 ], [ 439, null, "347872", 1 ], [ 440, null, "347873", 1 ], [ 441, null, "349324", 1 ], [ 442, null, "350317", 1 ], [ 443, null, "350571", 1 ], [ 444, null, "350737", 1 ], [ 445, null, "350741", 1 ], [ 446, null, "350742", 1 ], [ 447, null, "350745", 1 ], [ 448, null, "350971", 1 ], [ 449, null, "350974", 1 ], [ 450, null, "351024", 1 ], [ 451, null, "351098", 1 ], [ 452, null, "351109", 1 ], [ 453, null, "351496", 1 ], [ 454, null, "351679", 1 ], [ 455, null, "361905", 1 ], [ 456, null, "361911", 1 ], [ 457, null, "362521", 1 ], [ 458, null, "362522", 1 ], [ 459, null, "362523", 1 ], [ 460, null, "362524", 1 ], [ 461, null, "362526", 1 ], [ 462, null, "362534", 1 ], [ 463, null, "392830", 1 ], [ 464, null, "398164", 1 ] ];

class DailyStylingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$X);
    }
}

var foreign20 = Object.freeze({
    __proto__: null,
    DailyStylingOutfitConfig: DailyStylingOutfitConfig
});

const EXCELDATA$W = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "制服女", "367076", 2 ], [ 2, "制服女", "435694", 2 ], [ 3, "一定过套装", "253153", 2 ], [ 4, "主打求神套装", "264188", 2 ], [ 5, "卡皮巴拉套装1", "270007", 2 ], [ 6, "卡皮巴拉套装2", "213620", 2 ], [ 7, "女学生角色", "343066", 2 ], [ 8, "和服", "334005", 2 ], [ 9, "JK女生", "320751", 2 ], [ 10, "新年毛衣", "298108", 2 ], [ 11, "露肩长裙", "218598", 2 ], [ 12, null, "215971", 2 ], [ 13, null, "213622", 2 ], [ 14, null, "270008", 2 ], [ 15, null, "213535", 2 ], [ 16, null, "213533", 2 ], [ 17, null, "164426", 2 ], [ 18, null, "164421", 2 ], [ 19, null, "164418", 2 ], [ 20, null, "163712", 2 ], [ 21, null, "163710", 2 ], [ 22, null, "163709", 2 ], [ 23, null, "163708", 2 ], [ 24, null, "163707", 2 ], [ 25, null, "163706", 2 ], [ 26, null, "163624", 2 ], [ 27, null, "163551", 2 ], [ 28, null, "163550", 2 ], [ 29, null, "163548", 2 ], [ 30, null, "163547", 2 ], [ 31, null, "163546", 2 ], [ 32, null, "163545", 2 ], [ 33, null, "163544", 2 ], [ 34, null, "163543", 2 ], [ 35, null, "163529", 2 ], [ 36, null, "163528", 2 ], [ 37, null, "163527", 2 ], [ 38, null, "163526", 2 ], [ 39, null, "163525", 2 ], [ 40, null, "163524", 2 ], [ 41, null, "163523", 2 ], [ 42, null, "163522", 2 ], [ 43, null, "163521", 2 ], [ 44, null, "163334", 2 ], [ 45, null, "163333", 2 ], [ 46, null, "163332", 2 ], [ 47, null, "163331", 2 ], [ 48, null, "163328", 2 ], [ 49, null, "163327", 2 ], [ 50, null, "163325", 2 ], [ 51, null, "163324", 2 ], [ 52, null, "163323", 2 ], [ 53, null, "163322", 2 ], [ 54, null, "163321", 2 ], [ 55, null, "163320", 2 ], [ 56, null, "163319", 2 ], [ 57, null, "163318", 2 ], [ 58, null, "163317", 2 ], [ 59, null, "163316", 2 ], [ 60, null, "163315", 2 ], [ 61, null, "163313", 2 ], [ 62, null, "163312", 2 ], [ 63, null, "163311", 2 ], [ 64, null, "163310", 2 ], [ 65, null, "163309", 2 ], [ 66, null, "163308", 2 ], [ 67, null, "163307", 2 ], [ 68, null, "163306", 2 ], [ 69, null, "163305", 2 ], [ 70, null, "163303", 2 ], [ 71, null, "163302", 2 ], [ 72, null, "163301", 2 ], [ 73, null, "163300", 2 ], [ 74, null, "163299", 2 ], [ 75, null, "163298", 2 ], [ 76, null, "163297", 2 ], [ 77, null, "163296", 2 ], [ 78, null, "163294", 2 ], [ 79, null, "163293", 2 ], [ 80, null, "163292", 2 ], [ 81, null, "163291", 2 ], [ 82, null, "163290", 2 ], [ 83, null, "163288", 2 ], [ 84, null, "163287", 2 ], [ 85, null, "163286", 2 ], [ 86, null, "163284", 2 ], [ 87, null, "163283", 2 ], [ 88, null, "163282", 2 ], [ 89, null, "163275", 2 ], [ 90, null, "162960", 2 ], [ 91, null, "162957", 2 ], [ 92, null, "136183", 2 ], [ 93, null, "136184", 2 ], [ 94, null, "136185", 2 ], [ 95, null, "136186", 2 ], [ 96, null, "136187", 2 ], [ 97, null, "136188", 2 ], [ 98, null, "136190", 2 ], [ 99, null, "136191", 2 ], [ 100, null, "136289", 2 ], [ 101, null, "136290", 2 ], [ 102, null, "136291", 2 ], [ 103, null, "136292", 2 ], [ 104, null, "136295", 2 ], [ 105, null, "136300", 2 ], [ 106, null, "136302", 2 ], [ 107, null, "136304", 2 ], [ 108, null, "137840", 2 ], [ 109, null, "137847", 2 ], [ 110, null, "137852", 2 ], [ 111, null, "137855", 2 ], [ 112, null, "141013", 2 ], [ 113, null, "141016", 2 ], [ 114, null, "141019", 2 ], [ 115, null, "141020", 2 ], [ 116, null, "141022", 2 ], [ 117, null, "141023", 2 ], [ 118, null, "141026", 2 ], [ 119, null, "141027", 2 ], [ 120, null, "226377", 1 ], [ 121, null, "263401", 1 ], [ 122, null, "264189", 1 ], [ 123, null, "397887", 1 ], [ 124, null, "392825", 1 ], [ 125, null, "343523", 1 ], [ 126, null, "321374", 1 ], [ 127, null, "305216", 1 ], [ 128, null, "254424", 1 ], [ 129, null, "213621", 1 ], [ 130, null, "213534", 1 ], [ 131, null, "164379", 1 ], [ 132, null, "164376", 1 ], [ 133, null, "164375", 1 ], [ 134, null, "164374", 1 ], [ 135, null, "164372", 1 ], [ 136, null, "164370", 1 ], [ 137, null, "164365", 1 ], [ 138, null, "164363", 1 ], [ 139, null, "164357", 1 ], [ 140, null, "163627", 1 ], [ 141, null, "163626", 1 ], [ 142, null, "163625", 1 ], [ 143, null, "163623", 1 ], [ 144, null, "163622", 1 ], [ 145, null, "162975", 1 ], [ 146, null, "162974", 1 ], [ 147, null, "162973", 1 ], [ 148, null, "162972", 1 ], [ 149, null, "162970", 1 ], [ 150, null, "162969", 1 ], [ 151, null, "162968", 1 ], [ 152, null, "162967", 1 ], [ 153, null, "162966", 1 ], [ 154, null, "162963", 1 ], [ 155, null, "162962", 1 ], [ 156, null, "162961", 1 ], [ 157, null, "162959", 1 ], [ 158, null, "162958", 1 ], [ 159, null, "162956", 1 ], [ 160, null, "162954", 1 ], [ 161, null, "162953", 1 ], [ 162, null, "162952", 1 ], [ 163, null, "162949", 1 ], [ 164, null, "162948", 1 ], [ 165, null, "162947", 1 ], [ 166, null, "162945", 1 ], [ 167, null, "162944", 1 ], [ 168, null, "162943", 1 ], [ 169, null, "162942", 1 ], [ 170, null, "162941", 1 ], [ 171, null, "162940", 1 ], [ 172, null, "162939", 1 ], [ 173, null, "162936", 1 ], [ 174, null, "162935", 1 ], [ 175, null, "162934", 1 ], [ 176, null, "162932", 1 ], [ 177, null, "162931", 1 ], [ 178, null, "162930", 1 ], [ 179, null, "162929", 1 ], [ 180, null, "162927", 1 ], [ 181, null, "162925", 1 ], [ 182, null, "136258", 1 ], [ 183, null, "136259", 1 ], [ 184, null, "136260", 1 ], [ 185, null, "136261", 1 ], [ 186, null, "136293", 1 ], [ 187, null, "136294", 1 ], [ 188, null, "136296", 1 ], [ 189, null, "136297", 1 ], [ 190, null, "136301", 1 ], [ 191, null, "136303", 1 ], [ 192, null, "137809", 1 ], [ 193, null, "137838", 1 ], [ 194, null, "137839", 1 ], [ 195, null, "137842", 1 ], [ 196, null, "137844", 1 ], [ 197, null, "137845", 1 ], [ 198, null, "137846", 1 ], [ 199, null, "137848", 1 ], [ 200, null, "137849", 1 ], [ 201, null, "137850", 1 ], [ 202, null, "137853", 1 ], [ 203, null, "137854", 1 ], [ 204, null, "141014", 1 ], [ 205, null, "141015", 1 ], [ 206, null, "141017", 1 ], [ 207, null, "141018", 1 ], [ 208, null, "141024", 1 ], [ 209, null, "141025", 1 ], [ 210, null, "141028", 1 ], [ 211, null, "141029", 1 ], [ 212, null, "141030", 1 ], [ 213, null, "141031", 1 ], [ 214, null, "141041", 1 ], [ 215, null, "141042", 1 ], [ 216, null, "141043", 1 ], [ 217, null, "141045", 1 ], [ 218, null, "141047", 1 ], [ 219, null, "141050", 1 ], [ 220, null, "141058", 1 ], [ 221, null, "141078", 1 ], [ 222, null, "141079", 1 ], [ 223, null, "141081", 1 ], [ 224, null, "141083", 1 ], [ 225, null, "141088", 1 ], [ 226, null, "141092", 1 ], [ 227, null, "141097", 1 ], [ 228, null, "141098", 1 ], [ 229, null, "141101", 1 ], [ 230, null, "141107", 1 ] ];

class DailyStylingOutfit1Config extends ConfigBase {
    constructor() {
        super(EXCELDATA$W);
    }
}

var foreign21 = Object.freeze({
    __proto__: null,
    DailyStylingOutfit1Config: DailyStylingOutfit1Config
});

const EXCELDATA$V = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "141048", 2 ], [ 2, null, "141049", 2 ], [ 3, null, "141051", 2 ], [ 4, null, "141052", 2 ], [ 5, null, "141053", 2 ], [ 6, null, "141054", 2 ], [ 7, null, "141057", 2 ], [ 8, null, "141059", 2 ], [ 9, null, "141060", 2 ], [ 10, null, "141080", 2 ], [ 11, null, "141082", 2 ], [ 12, null, "141084", 2 ], [ 13, null, "141085", 2 ], [ 14, null, "141089", 2 ], [ 15, null, "141090", 2 ], [ 16, null, "141091", 2 ], [ 17, null, "141093", 2 ], [ 18, null, "141095", 2 ], [ 19, null, "141100", 2 ], [ 20, null, "141102", 2 ], [ 21, null, "141106", 2 ], [ 22, null, "141126", 2 ], [ 23, null, "141141", 2 ], [ 24, null, "141142", 2 ], [ 25, null, "141154", 2 ], [ 26, null, "141483", 2 ], [ 27, null, "141484", 2 ], [ 28, null, "141488", 2 ], [ 29, null, "141490", 2 ], [ 30, null, "141492", 2 ], [ 31, null, "141494", 2 ], [ 32, null, "141501", 2 ], [ 33, null, "141502", 2 ], [ 34, null, "141503", 2 ], [ 35, null, "141505", 2 ], [ 36, null, "141528", 2 ], [ 37, null, "141542", 2 ], [ 38, null, "141620", 2 ], [ 39, null, "141647", 2 ], [ 40, null, "141714", 2 ], [ 41, null, "141717", 2 ], [ 42, null, "141733", 2 ], [ 43, null, "141928", 2 ], [ 44, null, "142185", 2 ], [ 45, null, "142188", 2 ], [ 46, null, "142189", 2 ], [ 47, null, "142191", 2 ], [ 48, null, "142194", 2 ], [ 49, null, "142249", 2 ], [ 50, null, "142257", 2 ], [ 51, null, "142267", 2 ], [ 52, null, "142269", 2 ], [ 53, null, "142274", 2 ], [ 54, null, "142287", 2 ], [ 55, null, "142289", 2 ], [ 56, null, "142304", 2 ], [ 57, null, "142307", 2 ], [ 58, null, "142309", 2 ], [ 59, null, "142348", 2 ], [ 60, null, "142350", 2 ], [ 61, null, "142391", 2 ], [ 62, null, "142392", 2 ], [ 63, null, "142427", 2 ], [ 64, null, "142866", 2 ], [ 65, null, "142867", 2 ], [ 66, null, "142875", 2 ], [ 67, null, "142879", 2 ], [ 68, null, "143391", 2 ], [ 69, null, "143393", 2 ], [ 70, null, "143400", 2 ], [ 71, null, "143401", 2 ], [ 72, null, "143419", 2 ], [ 73, null, "143420", 2 ], [ 74, null, "147934", 2 ], [ 75, null, "226385", 2 ], [ 76, null, "347528", 2 ], [ 77, null, "347564", 2 ], [ 78, null, "347607", 2 ], [ 79, null, "349208", 2 ], [ 80, null, "349214", 2 ], [ 81, null, "349215", 2 ], [ 82, null, "349245", 2 ], [ 83, null, "349269", 2 ], [ 84, null, "349270", 2 ], [ 85, null, "349310", 2 ], [ 86, null, "349315", 2 ], [ 87, null, "349371", 2 ], [ 88, null, "349375", 2 ], [ 89, null, "350314", 2 ], [ 90, null, "350315", 2 ], [ 91, null, "350318", 2 ], [ 92, null, "350568", 2 ], [ 93, null, "350569", 2 ], [ 94, null, "350570", 2 ], [ 95, null, "350574", 2 ], [ 96, null, "350575", 2 ], [ 97, null, "350576", 2 ], [ 98, null, "350667", 2 ], [ 99, null, "350738", 2 ], [ 100, null, "350739", 2 ], [ 101, null, "350740", 2 ], [ 102, null, "350744", 2 ], [ 103, null, "350746", 2 ], [ 104, null, "350752", 2 ], [ 105, null, "350756", 2 ], [ 106, null, "350956", 2 ], [ 107, null, "350958", 2 ], [ 108, null, "350959", 2 ], [ 109, null, "350973", 2 ], [ 110, null, "350987", 2 ], [ 111, null, "351004", 2 ], [ 112, null, "351025", 2 ], [ 113, null, "351397", 2 ], [ 114, null, "351404", 2 ], [ 115, null, "351497", 2 ], [ 116, null, "351500", 2 ], [ 117, null, "351600", 2 ], [ 118, null, "361910", 2 ], [ 119, null, "385222", 2 ], [ 120, null, "141108", 1 ], [ 121, null, "141127", 1 ], [ 122, null, "141140", 1 ], [ 123, null, "141152", 1 ], [ 124, null, "141482", 1 ], [ 125, null, "141485", 1 ], [ 126, null, "141486", 1 ], [ 127, null, "141487", 1 ], [ 128, null, "141489", 1 ], [ 129, null, "141491", 1 ], [ 130, null, "141493", 1 ], [ 131, null, "141526", 1 ], [ 132, null, "141527", 1 ], [ 133, null, "141536", 1 ], [ 134, null, "141537", 1 ], [ 135, null, "141609", 1 ], [ 136, null, "141618", 1 ], [ 137, null, "141623", 1 ], [ 138, null, "141643", 1 ], [ 139, null, "141713", 1 ], [ 140, null, "141715", 1 ], [ 141, null, "141716", 1 ], [ 142, null, "141718", 1 ], [ 143, null, "141719", 1 ], [ 144, null, "141720", 1 ], [ 145, null, "141927", 1 ], [ 146, null, "142139", 1 ], [ 147, null, "142184", 1 ], [ 148, null, "142190", 1 ], [ 149, null, "142192", 1 ], [ 150, null, "142193", 1 ], [ 151, null, "142250", 1 ], [ 152, null, "142258", 1 ], [ 153, null, "142259", 1 ], [ 154, null, "142260", 1 ], [ 155, null, "142266", 1 ], [ 156, null, "142268", 1 ], [ 157, null, "142271", 1 ], [ 158, null, "142275", 1 ], [ 159, null, "142277", 1 ], [ 160, null, "142279", 1 ], [ 161, null, "142280", 1 ], [ 162, null, "142281", 1 ], [ 163, null, "142282", 1 ], [ 164, null, "142283", 1 ], [ 165, null, "142286", 1 ], [ 166, null, "142288", 1 ], [ 167, null, "142290", 1 ], [ 168, null, "142295", 1 ], [ 169, null, "142296", 1 ], [ 170, null, "142297", 1 ], [ 171, null, "142298", 1 ], [ 172, null, "142299", 1 ], [ 173, null, "142301", 1 ], [ 174, null, "142302", 1 ], [ 175, null, "142303", 1 ], [ 176, null, "142305", 1 ], [ 177, null, "142314", 1 ], [ 178, null, "142349", 1 ], [ 179, null, "142390", 1 ], [ 180, null, "142393", 1 ], [ 181, null, "142394", 1 ], [ 182, null, "142395", 1 ], [ 183, null, "142396", 1 ], [ 184, null, "142397", 1 ], [ 185, null, "142398", 1 ], [ 186, null, "142399", 1 ], [ 187, null, "142864", 1 ], [ 188, null, "142865", 1 ], [ 189, null, "142868", 1 ], [ 190, null, "142869", 1 ], [ 191, null, "142870", 1 ], [ 192, null, "142871", 1 ], [ 193, null, "142872", 1 ], [ 194, null, "142873", 1 ], [ 195, null, "142876", 1 ], [ 196, null, "142878", 1 ], [ 197, null, "142882", 1 ], [ 198, null, "142883", 1 ], [ 199, null, "144870", 1 ], [ 200, null, "144871", 1 ], [ 201, null, "144872", 1 ], [ 202, null, "145320", 1 ], [ 203, null, "145321", 1 ], [ 204, null, "148750", 1 ], [ 205, null, "148751", 1 ], [ 206, null, "148752", 1 ], [ 207, null, "346901", 1 ], [ 208, null, "347527", 1 ], [ 209, null, "347872", 1 ], [ 210, null, "347873", 1 ], [ 211, null, "349324", 1 ], [ 212, null, "350317", 1 ], [ 213, null, "350571", 1 ], [ 214, null, "350737", 1 ], [ 215, null, "350741", 1 ], [ 216, null, "350742", 1 ], [ 217, null, "350745", 1 ], [ 218, null, "350971", 1 ], [ 219, null, "350974", 1 ], [ 220, null, "351024", 1 ], [ 221, null, "351098", 1 ], [ 222, null, "351109", 1 ], [ 223, null, "351496", 1 ], [ 224, null, "351679", 1 ], [ 225, null, "361905", 1 ], [ 226, null, "361911", 1 ], [ 227, null, "362521", 1 ], [ 228, null, "362522", 1 ], [ 229, null, "362523", 1 ], [ 230, null, "362524", 1 ], [ 231, null, "362526", 1 ], [ 232, null, "362534", 1 ], [ 233, null, "392830", 1 ], [ 234, null, "398164", 1 ] ];

class DailyStylingOutfit2Config extends ConfigBase {
    constructor() {
        super(EXCELDATA$V);
    }
}

var foreign22 = Object.freeze({
    __proto__: null,
    DailyStylingOutfit2Config: DailyStylingOutfit2Config
});

const EXCELDATA$U = [ [ "id", "desc", "dependence", "tsAttribute", "funcIndex", "priority", "saveType", "valueType" ], [ "", "", "", "", "", "", "", "" ], [ 1, "头部样式", null, "advance.headFeatures.head.style", 0, 5, 1, 2 ], [ 2, "头部左右缩放", [ 0 ], "advance.headFeatures.head.headHorizontalScale", 1, 4, 1, 1 ], [ 3, "上半脸前后移动", [ 0 ], "advance.headFeatures.faceShape.overall.upperFaceFrontalShift", 2, 4, 1, 1 ], [ 4, "上半脸上下移动", [ 0 ], "advance.headFeatures.faceShape.overall.upperFaceVerticalShift", 3, 4, 1, 1 ], [ 5, "上半脸整体缩放", [ 0 ], "advance.headFeatures.faceShape.overall.upperFaceOverallScale", 4, 4, 1, 1 ], [ 6, "下半脸前后移动", [ 0 ], "advance.headFeatures.faceShape.overall.lowerFaceFrontalShift", 5, 4, 1, 1 ], [ 7, "下半脸左右缩放", [ 0 ], "advance.headFeatures.faceShape.overall.lowerFaceHorizontalScale", 6, 4, 1, 1 ], [ 8, "耳朵整体缩放", [ 0 ], "advance.headFeatures.ears.earOverallScale", 7, 4, 1, 1 ], [ 9, "耳朵左右旋转", [ 0 ], "advance.headFeatures.ears.earHorizontalRotation", 8, 4, 1, 1 ], [ 10, "耳朵前后旋转", [ 0 ], "advance.headFeatures.ears.earFrontalRotation", 9, 4, 1, 1 ], [ 11, "耳朵上部缩放", [ 0 ], "advance.headFeatures.ears.earUpperScale", 10, 4, 1, 1 ], [ 12, "耳朵下部缩放", [ 0 ], "advance.headFeatures.ears.earLowerScale", 11, 4, 1, 1 ], [ 13, "下颌圆度", [ 0 ], "advance.headFeatures.faceShape.jawline.jawlineRoundness", 12, 4, 1, 1 ], [ 14, "下颌前后移动", [ 0 ], "advance.headFeatures.faceShape.jawline.jawFrontalShift", 13, 4, 1, 1 ], [ 15, "下颌上下移动", [ 0 ], "advance.headFeatures.faceShape.jawline.jawlineVerticalShift", 14, 4, 1, 1 ], [ 16, "下颌左右缩放", [ 0 ], "advance.headFeatures.faceShape.jawline.jawHorizontalScale", 15, 4, 1, 1 ], [ 17, "下巴前后移动", [ 0 ], "advance.headFeatures.faceShape.chin.chinFrontalShift", 16, 4, 1, 1 ], [ 18, "下巴尖上下移动", [ 0 ], "advance.headFeatures.faceShape.chin.chinTipVerticalShift", 17, 4, 1, 1 ], [ 19, "下巴尖前后移动", [ 0 ], "advance.headFeatures.faceShape.chin.chinTipFrontalShift", 18, 4, 1, 1 ], [ 20, "下巴尖左右缩放", [ 0 ], "advance.headFeatures.faceShape.chin.chinTipHorizontalScale", 19, 4, 1, 1 ], [ 21, "颧骨左右缩放", [ 0 ], "advance.headFeatures.faceShape.cheekbone.cheekboneHorizontalScale", 20, 4, 1, 1 ], [ 22, "颧骨前后移动", [ 0 ], "advance.headFeatures.faceShape.cheekbone.cheekboneFrontalShift", 21, 4, 1, 1 ], [ 23, "脸颊左右缩放", [ 0 ], "advance.headFeatures.faceShape.cheek.cheekHorizontalScale", 22, 4, 1, 1 ], [ 24, "脸颊前后移动", [ 0 ], "advance.headFeatures.faceShape.cheek.cheekFrontalShift", 23, 4, 1, 1 ], [ 25, "脸颊上下移动", [ 0 ], "advance.headFeatures.faceShape.cheek.cheekVerticalShift", 24, 4, 1, 1 ], [ 26, "眉毛上下移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowVerticalShift", 25, 4, 1, 1 ], [ 27, "眉毛左右移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowHorizontalShift", 26, 4, 1, 1 ], [ 28, "眉毛整体旋转", [ 0 ], "advance.headFeatures.eyebrows.eyebrowOverallRotation", 27, 4, 1, 1 ], [ 29, "眉头上下移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowInnerVerticalShift", 28, 4, 1, 1 ], [ 30, "眉尾上下移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowOuterVerticalShift", 29, 4, 1, 1 ], [ 31, "眼睛上下移动", [ 0 ], "advance.headFeatures.eyes.overall.eyeVerticalShift", 30, 4, 1, 1 ], [ 32, "眼睛左右缩放", [ 0 ], "advance.headFeatures.eyes.overall.eyeHorizontalScale", 31, 4, 1, 1 ], [ 33, "眼睛前后移动", [ 0 ], "advance.headFeatures.eyes.overall.eyeFrontalShift", 32, 4, 1, 1 ], [ 34, "眼睛整体旋转", [ 0 ], "advance.headFeatures.eyes.overall.eyeOverallRotation", 33, 4, 1, 1 ], [ 35, "眼睛上下缩放", [ 0 ], "advance.headFeatures.eyes.overall.eyeVerticalScale", 34, 4, 1, 1 ], [ 36, "眼睛左右移动", [ 0 ], "advance.headFeatures.eyes.overall.eyeHorizontalShift", 35, 4, 1, 1 ], [ 37, "内眼角左右移动", [ 0 ], "advance.headFeatures.eyes.eyeCorners.innerEyeCornerHorizontalShift", 36, 4, 1, 1 ], [ 38, "外眼角上下移动", [ 0 ], "advance.headFeatures.eyes.eyeCorners.outerEyeCornerVerticalShift", 37, 4, 1, 1 ], [ 39, "瞳孔左右移动", [ 0 ], "advance.headFeatures.eyes.pupils.pupilHorizontalShift", 38, 4, 1, 1 ], [ 40, "瞳孔上下移动", [ 0 ], "advance.headFeatures.eyes.pupils.pupilVerticalShift", 39, 4, 1, 1 ], [ 41, "瞳孔左右缩放", [ 0 ], "advance.headFeatures.eyes.pupils.pupilHorizontalScale", 40, 4, 1, 1 ], [ 42, "瞳孔上下缩放", [ 0 ], "advance.headFeatures.eyes.pupils.pupilVerticalScale", 41, 4, 1, 1 ], [ 43, "鼻子整体前后移动", [ 0 ], "advance.headFeatures.nose.overall.noseOverallFrontalShift", 42, 4, 1, 1 ], [ 44, "鼻尖上下移动", [ 0 ], "advance.headFeatures.nose.noseTip.noseTipVerticalShift", 43, 4, 1, 1 ], [ 45, "鼻梁前后移动", [ 0 ], "advance.headFeatures.nose.noseBridge.noseBridgeFrontalShift", 44, 4, 1, 1 ], [ 46, "嘴巴上下移动", [ 0 ], "advance.headFeatures.mouth.overall.mouthVerticalShift", 45, 4, 1, 1 ], [ 47, "嘴巴前后移动", [ 0 ], "advance.headFeatures.mouth.overall.mouthFrontalShift", 46, 4, 1, 1 ], [ 48, "嘴巴左右缩放", [ 0 ], "advance.headFeatures.mouth.overall.mouthHorizontalScale", 47, 4, 1, 1 ], [ 49, "上嘴唇薄厚", [ 0 ], "advance.headFeatures.mouth.lips.upperLipThickness", 48, 4, 1, 1 ], [ 50, "下嘴唇薄厚", [ 0 ], "advance.headFeatures.mouth.lips.lowerLipThickness", 49, 4, 1, 1 ], [ 51, "嘴角上下移动", [ 0 ], "advance.headFeatures.mouth.mouthCorners.mouthCornerVerticalShift", 50, 4, 1, 1 ], [ 52, "身高", null, "advance.bodyFeatures.body.height", 51, 4, 2, 1 ], [ 53, "头部整体缩放", null, "advance.headFeatures.head.headOverallScale", 52, 4, 1, 1 ], [ 54, "胸部整体缩放", null, "advance.bodyFeatures.breast.breastOverallScale", 53, 4, 2, 1 ], [ 55, "胸部上下移动", null, "advance.bodyFeatures.breast.breastVerticalShift", 54, 4, 2, 1 ], [ 56, "胸部左右移动", null, "advance.bodyFeatures.breast.breastHorizontalShift", 56, 4, 2, 1 ], [ 57, "胸部长度", null, "advance.bodyFeatures.breast.breastLength", 58, 4, 2, 1 ], [ 58, "脖子左右缩放", null, "advance.bodyFeatures.neck.neckHorizontalScale", 59, 4, 0, 1 ], [ 59, "脖子前后缩放", null, "advance.bodyFeatures.neck.neckFrontalScale", 60, 4, 2, 1 ], [ 60, "胸腔左右缩放", null, "advance.bodyFeatures.chest.chestHorizontalScale", 61, 4, 2, 1 ], [ 61, "胸腔前后缩放", null, "advance.bodyFeatures.chest.chestFrontalScale", 62, 4, 2, 1 ], [ 62, "肋骨左右缩放", null, "advance.bodyFeatures.ribs.ribHorizontalScale", 63, 4, 2, 1 ], [ 63, "肋骨前后缩放", null, "advance.bodyFeatures.ribs.ribFrontalScale", 64, 4, 2, 1 ], [ 64, "腰部左右缩放", null, "advance.bodyFeatures.waist.waistHorizontalScale", 65, 4, 2, 1 ], [ 65, "腰部前后缩放", null, "advance.bodyFeatures.waist.waistFrontalScale", 66, 4, 2, 1 ], [ 66, "脖子上下缩放", null, "advance.bodyFeatures.neck.neckVerticalScale", 67, 4, 2, 1 ], [ 67, "胸腔上下缩放", null, "advance.bodyFeatures.chest.chestVerticalScale", 68, 4, 2, 1 ], [ 68, "腰部上下缩放", null, "advance.bodyFeatures.waist.waistVerticalScale", 69, 4, 2, 1 ], [ 69, "胯左右缩放", null, "advance.bodyFeatures.hips.hipHorizontalScale", 70, 4, 2, 1 ], [ 70, "胯前后缩放", null, "advance.bodyFeatures.hips.hipFrontalScale", 71, 4, 2, 1 ], [ 71, "肩臂左右缩放", null, "advance.bodyFeatures.arms.shoulderHorizontalScale", 72, 4, 2, 1 ], [ 72, "肩臂前后缩放", null, "advance.bodyFeatures.arms.shoulderFrontalScale", 73, 4, 2, 1 ], [ 73, "大臂左右缩放", null, "advance.bodyFeatures.arms.upperArmHorizontalScale", 74, 4, 2, 1 ], [ 74, "大臂前后缩放", null, "advance.bodyFeatures.arms.upperArmFrontalScale", 75, 4, 2, 1 ], [ 75, "小臂左右缩放", null, "advance.bodyFeatures.arms.forearmHorizontalScale", 76, 4, 2, 1 ], [ 76, "小臂前后缩放", null, "advance.bodyFeatures.arms.forearmFrontalScale", 77, 4, 2, 1 ], [ 77, "大臂上下缩放", null, "advance.bodyFeatures.arms.upperArmVerticalScale", 78, 4, 2, 1 ], [ 78, "小臂上下缩放", null, "advance.bodyFeatures.arms.forearmVerticalScale", 79, 4, 2, 1 ], [ 79, "大腿上下缩放", null, "advance.bodyFeatures.legs.thighVerticalScale", 80, 4, 2, 1 ], [ 80, "小腿上下缩放", null, "advance.bodyFeatures.legs.calfVerticalScale", 81, 4, 2, 1 ], [ 81, "大腿左右缩放", null, "advance.bodyFeatures.legs.thighHorizontalScale", 82, 4, 2, 1 ], [ 82, "大腿前后缩放", null, "advance.bodyFeatures.legs.thighFrontalScale", 83, 4, 2, 1 ], [ 83, "小腿前后缩放", null, "advance.bodyFeatures.legs.calfFrontalScale", 84, 4, 2, 1 ], [ 84, "小腿左右缩放", null, "advance.bodyFeatures.legs.calfHorizontalScale", 85, 4, 2, 1 ], [ 85, "上装样式", null, "advance.clothing.upperCloth.style", 86, 5, 6, 2 ], [ 86, "区域颜色", [ 86 ], "advance.clothing.upperCloth.part[].color.areaColor", 87, 4, 6, 3 ], [ 87, "纹理样式", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternStyle", 88, 5, 6, 2 ], [ 88, "纹理颜色", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternColor", 89, 4, 6, 3 ], [ 89, "纹理左右拉伸", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternHorizontalScale", 90, 4, 6, 1 ], [ 90, "纹理上下拉伸", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternVerticalScale", 91, 4, 6, 1 ], [ 91, "纹理旋转", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternRotation", 92, 4, 6, 1 ], [ 92, "纹理显示程度", [ 86 ], "advance.clothing.upperCloth.part[].pattern.patternVisibility", 93, 4, 6, 1 ], [ 93, "设计图案样式", [ 86 ], "advance.clothing.upperCloth.part[].design.designStyle", 94, 5, 6, 2 ], [ 94, "设计图案颜色", [ 86 ], "advance.clothing.upperCloth.part[].design.designColor", 95, 4, 6, 3 ], [ 95, "设计图案旋转", [ 86 ], "advance.clothing.upperCloth.part[].design.designRotation", 96, 4, 6, 1 ], [ 96, "下装样式", null, "advance.clothing.lowerCloth.style", 97, 5, 7, 2 ], [ 97, "区域颜色", [ 97 ], "advance.clothing.lowerCloth.part[].color.areaColor", 98, 4, 7, 3 ], [ 98, "纹理样式", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternStyle", 99, 5, 7, 2 ], [ 99, "纹理颜色", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternColor", 100, 4, 7, 3 ], [ 100, "纹理左右拉伸", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternHorizontalScale", 101, 4, 7, 1 ], [ 101, "纹理上下拉伸", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternVerticalScale", 102, 4, 7, 1 ], [ 102, "纹理旋转", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternRotation", 103, 4, 7, 1 ], [ 103, "纹理显示程度", [ 97 ], "advance.clothing.lowerCloth.part[].pattern.patternVisibility", 104, 4, 7, 1 ], [ 104, "设计图案样式", [ 97 ], "advance.clothing.lowerCloth.part[].design.designStyle", 105, 5, 7, 2 ], [ 105, "设计图案颜色", [ 97 ], "advance.clothing.lowerCloth.part[].design.designColor", 106, 4, 7, 3 ], [ 106, "设计图案旋转", [ 97 ], "advance.clothing.lowerCloth.part[].design.designRotation", 107, 4, 7, 1 ], [ 107, "手套样式", null, "advance.clothing.gloves.style", 108, 5, 8, 2 ], [ 108, "区域颜色", [ 108 ], "advance.clothing.gloves.part[].color.areaColor", 109, 4, 8, 3 ], [ 109, "纹理样式", [ 108 ], "advance.clothing.gloves.part[].pattern.patternStyle", 110, 5, 8, 2 ], [ 110, "纹理颜色", [ 108 ], "advance.clothing.gloves.part[].pattern.patternColor", 111, 4, 8, 3 ], [ 111, "纹理左右拉伸", [ 108 ], "advance.clothing.gloves.part[].pattern.patternHorizontalScale", 112, 4, 8, 1 ], [ 112, "纹理上下拉伸", [ 108 ], "advance.clothing.gloves.part[].pattern.patternVerticalScale", 113, 4, 8, 1 ], [ 113, "纹理旋转", [ 108 ], "advance.clothing.gloves.part[].pattern.patternRotation", 114, 4, 8, 1 ], [ 114, "纹理显示程度", [ 108 ], "advance.clothing.gloves.part[].pattern.patternVisibility", 115, 4, 8, 1 ], [ 115, "设计图案样式", [ 108 ], "advance.clothing.gloves.part[].design.designStyle", 116, 5, 8, 2 ], [ 116, "设计图案颜色", [ 108 ], "advance.clothing.gloves.part[].design.designColor", 117, 4, 8, 3 ], [ 117, "设计图案旋转", [ 108 ], "advance.clothing.gloves.part[].design.designRotation", 118, 4, 8, 1 ], [ 118, "鞋子样式", null, "advance.clothing.shoes.style", 119, 5, 9, 2 ], [ 119, "区域颜色", [ 119 ], "advance.clothing.shoes.part[].color.areaColor", 120, 4, 9, 3 ], [ 120, "纹理样式", [ 119 ], "advance.clothing.shoes.part[].pattern.patternStyle", 121, 5, 9, 2 ], [ 121, "纹理颜色", [ 119 ], "advance.clothing.shoes.part[].pattern.patternColor", 122, 4, 9, 3 ], [ 122, "纹理左右拉伸", [ 119 ], "advance.clothing.shoes.part[].pattern.patternHorizontalScale", 123, 4, 9, 1 ], [ 123, "纹理上下拉伸", [ 119 ], "advance.clothing.shoes.part[].pattern.patternVerticalScale", 124, 4, 9, 1 ], [ 124, "纹理旋转", [ 119 ], "advance.clothing.shoes.part[].pattern.patternRotation", 125, 4, 9, 1 ], [ 125, "纹理显示程度", [ 119 ], "advance.clothing.shoes.part[].pattern.patternVisibility", 126, 4, 9, 1 ], [ 126, "设计图案样式", [ 119 ], "advance.clothing.shoes.part[].design.designStyle", 127, 5, 9, 2 ], [ 127, "设计图案颜色", [ 119 ], "advance.clothing.shoes.part[].design.designColor", 128, 4, 9, 3 ], [ 128, "设计图案旋转", [ 119 ], "advance.clothing.shoes.part[].design.designRotation", 129, 4, 9, 1 ], [ 129, "眉毛样式", [ 0 ], "advance.makeup.eyebrows.eyebrowStyle", 130, 5, 3, 2 ], [ 130, "眉毛颜色", [ 0 ], "advance.makeup.eyebrows.eyebrowColor", 131, 4, 3, 3 ], [ 131, "瞳孔样式", [ 0 ], "advance.makeup.coloredContacts.style.pupilStyle", 132, 5, 3, 2 ], [ 132, "睫毛样式", [ 0 ], "advance.makeup.eyelashes.eyelashStyle", 133, 5, 3, 2 ], [ 133, "睫毛颜色", [ 0 ], "advance.makeup.eyelashes.eyelashColor", 134, 4, 3, 3 ], [ 134, "上高光样式", [ 0 ], "advance.makeup.coloredContacts.highlight.upperHighlightStyle", 135, 5, 3, 2 ], [ 135, "上高光颜色", [ 0 ], "advance.makeup.coloredContacts.highlight.upperHighlightColor", 136, 4, 3, 3 ], [ 136, "下高光样式", [ 0 ], "advance.makeup.coloredContacts.highlight.lowerHighlightStyle", 137, 5, 3, 2 ], [ 137, "下高光颜色", [ 0 ], "advance.makeup.coloredContacts.highlight.lowerHighlightColor", 138, 4, 3, 3 ], [ 138, "瞳孔样式", [ 0 ], "advance.makeup.coloredContacts.decal.pupilStyle", 139, 5, 3, 2 ], [ 139, "瞳孔颜色", [ 0 ], "advance.makeup.coloredContacts.decal.pupilColor", 140, 4, 3, 3 ], [ 140, "瞳孔左右位置", [ 0 ], "advance.makeup.coloredContacts.decal.pupilHorizontalPosition", 141, 4, 3, 1 ], [ 141, "瞳孔上下位置", [ 0 ], "advance.makeup.coloredContacts.decal.pupilVerticalPosition", 142, 4, 3, 1 ], [ 142, "瞳孔大小缩放", [ 0 ], "advance.makeup.coloredContacts.decal.pupilSizeScale", 143, 4, 3, 1 ], [ 143, "眼影样式", [ 0 ], "advance.makeup.eyeShadow.eyeshadowStyle", 145, 5, 3, 2 ], [ 144, "眼影颜色", [ 0 ], "advance.makeup.eyeShadow.eyeshaowColor", 146, 4, 3, 3 ], [ 145, "腮红样式", [ 0 ], "advance.makeup.blush.blushStyle", 147, 5, 3, 2 ], [ 146, "腮红颜色", [ 0 ], "advance.makeup.blush.blushColor", 148, 4, 3, 3 ], [ 147, "口红样式", [ 0 ], "advance.makeup.lipstick.lipstickStyle", 149, 5, 3, 2 ], [ 148, "口红颜色", [ 0 ], "advance.makeup.lipstick.lipstickColor", 150, 4, 3, 3 ], [ 149, "贴花样式", [ 0 ], "advance.makeup.faceDecal[].decalStyle", 151, 5, 3, 2 ], [ 150, "贴花左右移动", [ 0 ], "advance.makeup.faceDecal[].decalHorizontalShift", 152, 4, 3, 1 ], [ 151, "贴花上下移动", [ 0 ], "advance.makeup.faceDecal[].decalVerticalShift", 153, 4, 3, 1 ], [ 152, "贴花整体旋转", [ 0 ], "advance.makeup.faceDecal[].decalOverallRotation", 154, 4, 3, 1 ], [ 153, "贴花整体缩放", [ 0 ], "advance.makeup.faceDecal[].decalOverallScale", 155, 4, 3, 1 ], [ 154, "肌肤颜色", [ 0, 86, 97, 108, 119 ], "advance.makeup.skinTone.skinColor", 156, 4, 3, 3 ], [ 155, "贴花左右移动", [ 97, 86 ], "advance.makeup.bodyDecal[].decalHorizontalShift", 157, 4, 3, 1 ], [ 156, "贴花上下移动", [ 97, 86 ], "advance.makeup.bodyDecal[].decalVerticalShift", 158, 4, 3, 1 ], [ 157, "贴花样式", [ 97, 86 ], "advance.makeup.bodyDecal[].decalStyle", 159, 5, 3, 2 ], [ 158, "贴花颜色", [ 97, 86 ], "advance.makeup.bodyDecal[].decalColor", 160, 4, 3, 3 ], [ 159, "贴花整体旋转", [ 97, 86 ], "advance.makeup.bodyDecal[].decalOverallRotation", 161, 4, 3, 1 ], [ 160, "贴花整体缩放", [ 97, 86 ], "advance.makeup.bodyDecal[].decalOverallScale", 162, 4, 3, 1 ], [ 161, "样式", null, "advance.hair.frontHair.style", 163, 5, 4, 2 ], [ 162, "颜色", [ 163 ], "advance.hair.frontHair.color.color", 164, 4, 4, 3 ], [ 163, "渐变颜色", [ 163 ], "advance.hair.frontHair.color.gradientColor", 165, 4, 4, 3 ], [ 164, "渐变区域", [ 163 ], "advance.hair.frontHair.color.gradientArea", 166, 4, 4, 1 ], [ 165, "高光样式", [ 163 ], "advance.hair.frontHair.highlight.highlightStyle", 167, 5, 4, 2 ], [ 166, "样式", null, "advance.hair.backHair.style", 169, 5, 5, 2 ], [ 167, "颜色", [ 169 ], "advance.hair.backHair.color.color", 170, 4, 5, 3 ], [ 168, "渐变颜色", [ 169 ], "advance.hair.backHair.color.gradientColor", 171, 4, 5, 3 ], [ 169, "渐变区域", [ 169 ], "advance.hair.backHair.color.gradientArea", 172, 4, 5, 1 ], [ 170, "高光样式", [ 169 ], "advance.hair.backHair.highlight.highlightStyle", 173, 5, 5, 2 ], [ 171, "体型", null, "advance.base.characterSetting.somatotype", 175, 4, 0, 1 ], [ 172, "贴花颜色", [ 0 ], "advance.makeup.faceDecal[].decalColor", 176, 4, 3, 3 ], [ 173, "左眼颜色(二次元)", [ 0 ], "advance.makeup.coloredContacts.style.leftPupilColor", 178, 5, 3, 3 ], [ 174, "右眼颜色(二次元)", [ 0 ], "advance.makeup.coloredContacts.style.rightPupilColor", 179, 5, 3, 3 ], [ 175, "头部贴花颜色", [ 0 ], "advance.makeup.headDecal.decalColor", 182, 4, 3, 3 ], [ 176, "头部贴花样式", [ 0 ], "advance.makeup.headDecal.decalStyle", 183, 5, 3, 2 ], [ 177, "切换表情", [ 0 ], "advance.headFeatures.expressions.changeExpression", 184, 4, 0, 1 ], [ 178, "头饰颜色", [ 163 ], "advance.hair.frontHair.accessories[].color.accessoryColor", 185, 4, 4, 3 ], [ 179, "纹理样式", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternStyle", 186, 5, 4, 2 ], [ 180, "纹理颜色", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternColor", 187, 4, 4, 3 ], [ 181, "设计图案样式", [ 163 ], "advance.hair.frontHair.accessories[].design.designStyle", 188, 5, 4, 2 ], [ 182, "设计图案颜色", [ 163 ], "advance.hair.frontHair.accessories[].design.designColor", 189, 4, 4, 3 ], [ 183, "设计图案旋转", [ 163 ], "advance.hair.frontHair.accessories[].design.designRotation", 190, 4, 4, 1 ], [ 184, "设计图案缩放", [ 163 ], "advance.hair.frontHair.accessories[].design.designScale", 191, 4, 4, 1 ], [ 185, "头饰颜色", [ 169 ], "advance.hair.backHair.accessories[].color.accessoryColor", 192, 4, 5, 3 ], [ 186, "纹理样式", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternStyle", 193, 5, 5, 2 ], [ 187, "纹理颜色", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternColor", 194, 4, 5, 3 ], [ 188, "设计图案样式", [ 169 ], "advance.hair.backHair.accessories[].design.designStyle", 195, 5, 5, 2 ], [ 189, "设计图案颜色", [ 169 ], "advance.hair.backHair.accessories[].design.designColor", 196, 4, 5, 3 ], [ 190, "设计图案旋转", [ 169 ], "advance.hair.backHair.accessories[].design.designRotation", 197, 4, 5, 1 ], [ 191, "设计图案缩放", [ 169 ], "advance.hair.backHair.accessories[].design.designScale", 198, 4, 5, 1 ], [ 192, "手整体缩放", null, "advance.bodyFeatures.hands.handOverallScale", 199, 4, 2, 1 ], [ 193, "脚整体缩放", null, "advance.bodyFeatures.feet.feetOverallScale", 200, 4, 2, 1 ], [ 194, "纹理左右拉伸", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternHorizontalScale", 201, 4, 4, 1 ], [ 195, "纹理上下拉伸", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternVerticalScale", 202, 4, 4, 1 ], [ 196, "纹理旋转", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternRotation", 203, 4, 4, 1 ], [ 197, "纹理显示程度", [ 163 ], "advance.hair.frontHair.accessories[].pattern.patternVisibility", 204, 4, 4, 1 ], [ 198, "纹理左右拉伸", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternHorizontalScale", 205, 4, 5, 1 ], [ 199, "纹理上下拉伸", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternVerticalScale", 206, 4, 5, 1 ], [ 200, "纹理旋转", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternRotation", 207, 4, 5, 1 ], [ 201, "纹理显示程度", [ 169 ], "advance.hair.backHair.accessories[].pattern.patternVisibility", 208, 4, 5, 1 ], [ 202, "面部左右缩放", [ 0 ], "advance.headFeatures.faceShape.overall.faceHorizontalScale", 210, 4, 1, 1 ], [ 203, "眉毛前后移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowFrontalShift", 211, 4, 1, 1 ], [ 204, "眉间前后移动", [ 0 ], "advance.headFeatures.eyebrows.eyebrowBridgeFrontalShift", 212, 4, 1, 1 ], [ 205, "鼻子整体上下移动", [ 0 ], "advance.headFeatures.nose.overall.noseOverallVerticalShift", 213, 4, 1, 1 ], [ 206, "鼻梁左右缩放", [ 0 ], "advance.headFeatures.nose.noseBridge.noseBridgeHorizontalScale", 214, 4, 1, 1 ], [ 207, "鼻翼前后移动", [ 0 ], "advance.headFeatures.nose.nostrils.nostrilForntalShift", 215, 4, 1, 1 ], [ 208, "鼻翼上下移动", [ 0 ], "advance.headFeatures.nose.nostrils.nostrilVerticalShift", 216, 4, 1, 1 ], [ 209, "鼻翼左右缩放", [ 0 ], "advance.headFeatures.nose.nostrils.nostrilHorizontalScale", 217, 4, 1, 1 ], [ 210, "嘴角前后移动", [ 0 ], "advance.headFeatures.mouth.mouthCorners.mouthCornerFrontalShift", 218, 4, 1, 1 ], [ 211, "V1模型", null, "base.wholeBody", 219, 6, 0, 2 ], [ 212, null, null, "advance.dynamicAttachments[].style", 228, 4, 0, 2 ] ];

class DescriptionConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$U);
    }
}

var foreign23 = Object.freeze({
    __proto__: null,
    DescriptionConfig: DescriptionConfig
});

const EXCELDATA$T = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "狐狸耳朵", "226479", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, "围巾", "295506", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, "双马尾辫子", "352615", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 4, "狐耳朵", "404433", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, "猫耳", "404473", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, "星星", "441348", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, "眩晕Buff", "142935", [ "0", "0", "22", "0", "0", "0", "0.4", "0.4", "0.4" ], 0 ], [ 8, "狗头", "462790", [ "0", "0", "-8", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, "熊猫头", "462791", [ "0", "0", "-8", "0", "0", "0", "1", "1", "1" ], 0 ], [ 10, "问号", "441349", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 11, "问号", "13728", [ "0", "0", "38", "0", "0", "0", "0.5", "0.5", "0.5" ], 0 ], [ 12, "乌云", "169404", [ "0", "0", "47", "0", "0", "0", "0.5", "0.5", "0.5" ], 0 ], [ 13, "问号", "200911", [ "0", "0", "14", "0", "0", "0", "1", "1", "1" ], 0 ], [ 14, "表情", "88831", [ "0", "0", "23", "0", "0", "0", "0.15", "0.15", "0.15" ], 0 ], [ 15, "表情", "88818", [ "0", "0", "23", "0", "0", "0", "0.15", "0.15", "0.15" ], 0 ], [ 16, "表情", "88825", [ "-15", "0", "30", "0", "0", "0", "0.3", "0.3", "0.3" ], 0 ], [ 17, "睡眠", "287819", [ "0", "0", "8", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 18, "恶心", "26155", [ "0", "0", "36", "0", "0", "0", "1", "1", "1" ], 0 ], [ 19, "泡泡", "451246", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 20, "蝙蝠", "452716", [ "0", "0", "20", "0", "0", "0", "1", "1", "1" ], 0 ], [ 21, "花瓣环绕", "340179", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 22, null, "340181", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 23, "蝴蝶泡泡", "295800", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 24, "星星", "235888", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 25, "五角星泡泡", "295801", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 26, "打瞌睡", "26158", [ "0", "10", "5", "0", "0", "0", "0.3", "0.3", "0.3" ], 0 ], [ 27, "爱心", "184435", [ "0", "0", "32", "0", "0", "0", "0.5", "0.5", "0.5" ], 0 ], [ 28, "梦幻泡泡蝴蝶结", "452232", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 29, "梦幻泡泡蝴蝶结", "452233", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 30, "梦幻泡泡蝴蝶结", "452234", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 31, "梦幻泡泡蝴蝶结", "452235", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 32, "道具", "471540", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 33, "道具", "471541", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 34, "道具", "471542", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 35, "道具", "471543", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 36, "绿蛇头发", "502350", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 37, "青蛇头发", "502351", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 38, "红蛇头发", "502352", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 39, "龙角", "266596", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 40, "龙角", "266597", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 41, "龙角", "266598", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 42, "龙角", "266600", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 43, "龙角", "266601", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 44, "龙角", "266602", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 45, "龙角", "266610", [ "0", "0", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 46, "犄角", "467603", [ "0", "0", "16", "0", "0", "0", "1", "1", "1" ], 0 ], [ 47, "发光恶魔角", "266332", [ "0", "0", "18", "0", "0", "0", "1", "1", "1" ], 0 ], [ 48, "帽子", "457013", [ "0", "0", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 49, "护目眼镜", "209534", [ "0", "5", "15", "-45", "0", "0", "1", "1", "1" ], 0 ], [ 50, "泳镜", "112801", [ "0", "5", "17", "-45", "0", "0", "1", "1", "1" ], 0 ], [ 51, "男帽子", "173867", [ "0", "0", "0", "0", "0", "0", "1.2", "1.2", "1.2" ], 0 ], [ 52, "尴尬", "26146", [ "0", "0", "30", "0", "0", "0", "1", "1", "1" ], 0 ], [ 53, "眩晕", "26151", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 54, null, "26155", [ "0", "0", "30", "0", "0", "0", "1", "1", "1" ], 0 ], [ 55, "手指", "160743", [ "0", "0", "30", "0", "0", "0", "1", "1", "1" ], 0 ], [ 56, "自动寻路图标", "162012", [ "0", "0", "20", "0", "0", "0", "1", "1", "1" ], 0 ], [ 57, "子弹", "168959", [ "0", "0", "20", "0", "0", "0", "1", "1", "1" ], 0 ], [ 58, "生气", "200925", [ "0", "0", "30", "0", "0", "0", "1", "1", "1" ], 0 ], [ 59, "荧光小人", "403000", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 60, "荧光小人", "403004", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 61, "荧光小人", "403012", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 62, "荧光小人", "403014", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 63, "荧光小人", "403015", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 64, "恭喜发财", "506842", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 65, "南瓜", "442771", [ "0", "0", "-5", "0", "0", "0", "0.6", "0.6", "0.6" ], 0 ], [ 66, "头套", "234390", [ "0", "0", "-5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 67, null, "292089", [ "0", "0", "-8", "0", "0", "0", "1", "1", "1" ], 0 ], [ 68, null, "72681", [ "0", "0", "8", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 69, null, "72689", [ "0", "0", "8", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 70, null, "44268", [ "0", "0", "10", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 71, null, "72675", [ "0", "0", "15", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 72, null, "68413", [ "0", "-1.3", "-5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 73, null, "266331", [ "0", "4", "12", "-5", "0", "0", "1", "1", "1" ], 0 ], [ 74, null, "386337", [ "0", "0", "14", "0", "0", "0", "1", "1", "1" ], 0 ], [ 75, null, "173237", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 76, null, "173239", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 77, null, "173240", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 78, null, "173242", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 79, null, "173241", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 80, null, "173243", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 81, null, "173244", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 82, null, "173245", [ "0", "0", "8", "0", "0", "0", "1", "1", "1" ], 0 ], [ 83, null, "173501", [ "0", "0", "7", "0", "0", "0", "1", "1", "1" ], 0 ], [ 84, null, "173502", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 85, null, "173499", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 86, null, "173503", [ "0", "-2", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 87, null, "173504", [ "0", "0", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 88, null, "173505", [ "0", "-1", "-2", "0", "0", "0", "1", "1", "1" ], 0 ], [ 89, null, "173506", [ "0", "-3", "4", "0", "0", "0", "1", "1", "1" ], 0 ], [ 90, null, "173858", [ "0", "-1", "16", "0", "0", "0", "1", "1", "1" ], 0 ], [ 91, null, "173859", [ "0", "-3", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 92, null, "173860", [ "0", "-1", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 93, null, "173861", [ "0", "-1", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 94, null, "173862", [ "2", "-4", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 95, null, "173863", [ "0", "-2.5", "13", "0", "0", "0", "1", "1", "1" ], 0 ], [ 96, null, "173864", [ "0", "-2", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 97, null, "173865", [ "0", "2", "13", "0", "0", "0", "1", "1", "1" ], 0 ], [ 98, null, "173866", [ "0", "-3", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 99, null, "390761", [ "0", "-2.5", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 100, null, "314053", [ "0", "-2.5", "10", "0", "0", "0", "0.3", "0.3", "0.3" ], 0 ], [ 101, null, "68397", [ "0", "-3", "8", "0", "0", "0", "1", "1", "1" ], 0 ], [ 102, null, "504881", [ "0", "-2.5", "8", "0", "0", "0", "1.2", "1.2", "1.2" ], 0 ], [ 103, null, "68430", [ "0", "-3", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 104, null, "68462", [ "0", "-1", "3", "0", "0", "0", "1", "1", "1" ], 0 ], [ 105, null, "68404", [ "0", "-5", "5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 106, null, "68406", [ "0", "-2.5", "5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 107, null, "68410", [ "0", "0", "5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 108, null, "68422", [ "0", "-2.5", "14", "0", "0", "0", "1", "1", "1" ], 0 ], [ 109, null, "68424", [ "-3", "-5", "-5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 110, null, "68427", [ "0", "-4", "-7", "0", "0", "0", "1.2", "1.2", "1.2" ], 0 ], [ 111, null, "68432", [ "0", "-2", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 112, null, "68434", [ "3", "0", "18", "0", "0", "0", "1", "1", "1" ], 0 ], [ 113, null, "68436", [ "0", "0", "-9", "0", "0", "0", "1", "1", "1" ], 0 ], [ 114, null, "68438", [ "0", "-4", "10", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 115, null, "68440", [ "0", "-4", "6", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 116, null, "68442", [ "0", "-2.5", "5", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 117, null, "68447", [ "0", "-3", "6", "0", "0", "0", "1", "1", "1" ], 0 ], [ 118, null, "68449", [ "0", "-3", "-2", "0", "0", "0", "1", "1", "1" ], 0 ], [ 119, null, "68452", [ "0", "-1.5", "-3", "0", "0", "0", "1", "1", "1" ], 0 ], [ 120, null, "68456", [ "0", "-2.5", "-3", "0", "0", "0", "1", "1", "1" ], 0 ], [ 121, null, "111667", [ "0", "-2", "3", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 122, null, "111668", [ "0", "-2.5", "2.5", "0", "0", "0", "1", "1", "1" ], 0 ], [ 123, null, "111669", [ "0", "-6", "-6", "0", "0", "0", "1", "1", "1" ], 0 ], [ 124, null, "117848", [ "0", "-1.33", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 125, null, "134224", [ "0", "-2.5", "12", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 126, null, "174438", [ "0", "0", "22", "0", "0", "0", "0.8", "0.8", "0.8" ], 0 ], [ 127, null, "182167", [ "0", "-4.5", "15", "0", "0", "0", "1", "1", "1" ], 0 ], [ 128, null, "186725", [ "0", "-5", "16", "0", "0", "0", "1", "1", "1" ], 0 ], [ 129, null, "186901", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 130, null, "191858", [ "0", "-4", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 131, null, "192738", [ "0", "-3", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 132, null, "192739", [ "0", "-3", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 133, null, "192740", [ "0", "-3", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 134, null, "192741", [ "0", "-3", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 135, null, "202880", [ "0", "2", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 136, null, "266537", [ "0", "-2", "2", "0", "0", "0", "1", "1", "1" ], 0 ], [ 137, null, "286443", [ "0", "0", "17", "0", "0", "0", "1", "1", "1" ], 0 ], [ 138, null, "323565", [ "0", "0", "18", "0", "0", "0", "1", "1", "1" ], 0 ], [ 139, null, "351369", [ "0", "0", "-11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 140, null, "363651", [ "0", "-2", "12", "0", "0", "0", "1", "1", "1" ], 0 ], [ 141, null, "374517", [ "0", "-3", "9", "0", "0", "0", "1", "1", "1" ], 0 ], [ 142, null, "384900", [ "0", "-2", "11", "0", "0", "0", "1", "1", "1" ], 0 ], [ 143, null, "390760", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 144, null, "457460", [ "0", "0", "16", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class EarConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$T);
    }
}

var foreign24 = Object.freeze({
    __proto__: null,
    EarConfig: EarConfig
});

const EXCELDATA$S = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, null, "525387", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, null, "501310", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, "广告牌", "57202", [ "0", "0", "0", "0", "0", "0", "0.2", "0.2", "0.2" ], 0 ], [ 4, "流光", "365194", [ "0", "0", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 5, "火焰", "28451", [ "0", "0", "0", "0", "0", "0", "10", "10", "10" ], 0 ], [ 6, "雪花", "526080", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, null, "464265", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 8, null, "266517", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, null, "266518", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 10, null, "266519", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 11, null, "266520", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 12, null, "266521", [ "0", "0", "50", "0", "0", "0", "1", "1", "1" ], 0 ], [ 13, null, "439411", [ "0", "0", "50", "0", "0", "0", "0.5", "0.5", "0.5" ], 0 ], [ 14, null, "484531", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 15, null, "144088", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 16, null, "439415", [ "0", "0", "5", "0", "0", "0", "0.5", "0.5", "2" ], 0 ], [ 17, null, "144093", [ "0", "0", "120", "0", "0", "0", "0.5", "0.5", "0.5" ], 0 ], [ 18, null, "326212", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 19, null, "326224", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 20, null, "383667", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 21, null, "383676", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 22, null, "386040", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 23, null, "394667", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 24, null, "394678", [ "0", "0", "100", "0", "0", "0", "1", "1", "1" ], 0 ], [ 25, "星座", "220840", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 26, null, "485354", [ "0", "-30", "80", "0", "0", "0", "1", "1", "1" ], 0 ], [ 27, "星座", "220841", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 28, "星座", "220842", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 29, "星座", "220843", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 30, "星座", "220844", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 31, "星座", "220845", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 32, "星座", "220846", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 33, "星座", "220847", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 34, "星座", "220848", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 35, "星座", "220849", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 36, "星座", "220850", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 37, "星座", "220851", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 38, "星座", "220041", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 39, "星座", "220469", [ "-70", "0", "150", "0", "0", "0", "1", "1", "1" ], 0 ], [ 40, "法阵", "31645", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 41, "桃心", "4366", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 42, "睡眠", "4367", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 43, "音符", "4368", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 44, null, "144084", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 45, null, "146786", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 46, null, "144083", [ "0", "0", "10", "0", "0", "0", "1", "1", "1" ], 0 ], [ 47, "光环", "32240", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 48, "光环", "59956", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 49, "彩带", "73402", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 50, "传送门", "88762", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 51, "传送门", "88773", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 52, "Buff", "89073", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 53, "禁锢", "89109", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 54, "禁锢", "89111", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 55, "禁锢", "89112", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 56, "防护盾", "89122", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 57, "角色__BUFF", "113903", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 58, "Buff", "113913", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 59, "护盾", "113907", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 60, "音乐", "119917", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 61, "音乐", "130776", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 62, "禁锢Buff", "141655", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 63, "禁锢Buff", "141657", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 64, "治疗Buff", "142753", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 65, "治疗Buff", "142751", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 66, "光环", "142951", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 67, "盾牌", "156399", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 68, null, "157113", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 69, null, "157118", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 70, null, "157119", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 71, "击杀", "271322", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 72, "卡牌", "311092", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 73, "生成光环", "318586", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 74, null, "501294", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 75, "雪花", "127013", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 76, null, "146328", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 77, null, "146328", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 78, null, "146753", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 79, "烟花", "146754", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 80, "全息投影", "144082", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 81, "剪纸", "361275", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class EffectsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$S);
    }
}

var foreign25 = Object.freeze({
    __proto__: null,
    EffectsConfig: EffectsConfig
});

const EXCELDATA$R = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "509867", 2 ], [ 2, null, "478215", 2 ], [ 3, null, "476301", 2 ], [ 4, null, "468352", 2 ], [ 5, null, "457928", 2 ], [ 6, null, "423744", 2 ], [ 7, null, "390744", 2 ], [ 8, null, "390743", 2 ], [ 9, null, "390456", 2 ], [ 10, null, "390439", 2 ], [ 11, null, "390414", 2 ], [ 12, null, "390413", 2 ], [ 13, null, "390412", 2 ], [ 14, null, "383403", 2 ], [ 15, null, "370795", 2 ], [ 16, null, "362125", 2 ], [ 17, null, "356248", 2 ], [ 18, null, "344229", 2 ], [ 19, null, "344057", 2 ], [ 20, null, "325904", 2 ], [ 21, null, "323598", 2 ], [ 22, null, "314288", 2 ], [ 23, null, "313729", 2 ], [ 24, null, "313727", 2 ], [ 25, null, "300487", 2 ], [ 26, null, "297930", 2 ], [ 27, null, "296022", 2 ], [ 28, null, "269621", 2 ], [ 29, null, "269620", 2 ], [ 30, null, "248352", 2 ], [ 31, null, "241431", 2 ], [ 32, null, "241189", 2 ], [ 33, null, "221654", 2 ], [ 34, null, "210326", 2 ], [ 35, null, "137593", 2 ], [ 36, null, "127278", 2 ], [ 37, null, "126614", 2 ], [ 38, null, "119738", 2 ], [ 39, null, "117490", 2 ], [ 40, null, "111204", 2 ], [ 41, null, "111195", 2 ], [ 42, null, "109837", 2 ], [ 43, null, "86089", 2 ], [ 44, null, "74313", 2 ], [ 45, null, "66571", 2 ], [ 46, null, "66505", 2 ], [ 47, null, "66371", 2 ], [ 48, null, "66355", 2 ], [ 49, null, "65662", 2 ], [ 50, null, "65660", 2 ], [ 51, null, "65657", 2 ], [ 52, null, "64206", 2 ], [ 53, null, "63646", 2 ], [ 54, null, "63540", 2 ], [ 55, null, "63303", 2 ], [ 56, null, "63294", 2 ], [ 57, null, "62962", 2 ], [ 58, null, "62782", 2 ], [ 59, null, "62781", 2 ], [ 60, null, "60986", 2 ], [ 61, null, "60985", 2 ], [ 62, null, "57729", 2 ], [ 63, null, "509869", 1 ], [ 64, null, "507452", 1 ], [ 65, null, "504602", 1 ], [ 66, null, "476239", 1 ], [ 67, null, "458751", 1 ], [ 68, null, "382998", 1 ], [ 69, null, "382171", 1 ], [ 70, null, "348898", 1 ], [ 71, null, "320846", 1 ], [ 72, null, "313979", 1 ], [ 73, null, "313679", 1 ], [ 74, null, "299159", 1 ], [ 75, null, "264152", 1 ], [ 76, null, "250455", 1 ], [ 77, null, "247535", 1 ], [ 78, null, "241405", 1 ], [ 79, null, "140277", 1 ], [ 80, null, "127799", 1 ], [ 81, null, "125334", 1 ], [ 82, null, "122826", 1 ], [ 83, null, "122784", 1 ], [ 84, null, "119114", 1 ], [ 85, null, "118076", 1 ], [ 86, null, "111571", 1 ], [ 87, null, "111486", 1 ], [ 88, null, "75658", 1 ], [ 89, null, "74878", 1 ], [ 90, null, "74115", 1 ], [ 91, null, "66700", 1 ], [ 92, null, "66597", 1 ], [ 93, null, "66558", 1 ], [ 94, null, "66417", 1 ], [ 95, null, "66150", 1 ], [ 96, null, "66107", 1 ], [ 97, null, "65726", 1 ], [ 98, null, "65615", 1 ], [ 99, null, "65059", 1 ], [ 100, null, "65058", 1 ], [ 101, null, "65056", 1 ], [ 102, null, "64994", 1 ], [ 103, null, "64952", 1 ], [ 104, null, "64814", 1 ], [ 105, null, "64804", 1 ], [ 106, null, "64713", 1 ], [ 107, null, "63885", 1 ], [ 108, null, "63677", 1 ], [ 109, null, "63675", 1 ], [ 110, null, "63673", 1 ] ];

class EverydayShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$R);
    }
}

var foreign26 = Object.freeze({
    __proto__: null,
    EverydayShoesConfig: EverydayShoesConfig
});

const EXCELDATA$Q = [ [ "ID", "AssetId" ], [ "", "" ], [ 1, "117806" ], [ 2, "117804" ], [ 3, "117807" ], [ 4, "117803" ], [ 5, "117808" ], [ 6, "117809" ], [ 7, "117812" ], [ 8, "164705" ], [ 9, "164706" ], [ 10, "164707" ], [ 11, "164708" ], [ 12, "164709" ], [ 13, "164710" ], [ 14, "184427" ], [ 15, "184428" ], [ 16, "184429" ], [ 17, "184430" ], [ 18, "184431" ], [ 19, "184432" ], [ 20, "184433" ], [ 21, "184434" ], [ 22, "184437" ], [ 23, "184438" ], [ 24, "184439" ], [ 25, "184440" ], [ 26, "184441" ], [ 27, "184443" ], [ 28, "184444" ], [ 29, "184445" ], [ 30, "184446" ], [ 31, "185312" ], [ 32, "185313" ], [ 33, "185314" ], [ 34, "185315" ], [ 35, "185316" ], [ 36, "185317" ], [ 37, "185318" ], [ 38, "185319" ], [ 39, "185320" ], [ 40, "185321" ], [ 41, "185322" ], [ 42, "185323" ], [ 43, "185324" ], [ 44, "185325" ], [ 45, "185326" ], [ 46, "185327" ], [ 47, "185328" ] ];

class ExpressionConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$Q);
    }
}

var foreign27 = Object.freeze({
    __proto__: null,
    ExpressionConfig: ExpressionConfig
});

const EXCELDATA$P = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "398608", 2 ], [ 2, null, "370228", 2 ], [ 3, null, "370227", 2 ], [ 4, null, "370226", 2 ], [ 5, null, "370225", 2 ], [ 6, null, "370224", 2 ], [ 7, null, "370199", 2 ], [ 8, null, "370198", 2 ], [ 9, null, "370197", 2 ], [ 10, null, "287385", 2 ], [ 11, null, "286897", 2 ], [ 12, null, "267306", 2 ], [ 13, null, "267305", 2 ], [ 14, null, "267304", 2 ], [ 15, null, "267303", 2 ], [ 16, null, "267301", 2 ], [ 17, null, "267284", 2 ], [ 18, null, "266356", 2 ], [ 19, null, "266355", 2 ], [ 20, null, "266354", 2 ], [ 21, null, "227067", 2 ], [ 22, null, "227066", 2 ], [ 23, null, "215692", 2 ], [ 24, null, "215691", 2 ], [ 25, null, "215690", 2 ], [ 26, null, "215689", 2 ], [ 27, null, "215688", 2 ], [ 28, null, "215687", 2 ], [ 29, null, "215686", 2 ], [ 30, null, "215685", 2 ], [ 31, null, "215684", 2 ], [ 32, null, "215683", 2 ], [ 33, null, "215682", 2 ], [ 34, null, "215681", 2 ], [ 35, null, "215680", 2 ], [ 36, null, "215679", 2 ], [ 37, null, "215678", 2 ], [ 38, null, "215677", 2 ], [ 39, null, "215676", 2 ], [ 40, null, "215675", 2 ], [ 41, null, "215674", 2 ], [ 42, null, "215673", 2 ], [ 43, null, "215672", 2 ], [ 44, null, "215671", 2 ], [ 45, null, "215670", 2 ], [ 46, null, "215669", 2 ], [ 47, null, "215668", 2 ], [ 48, null, "215471", 2 ], [ 49, null, "215469", 2 ], [ 50, null, "215467", 2 ], [ 51, null, "215466", 2 ], [ 52, null, "215461", 2 ], [ 53, null, "215460", 2 ], [ 54, null, "215459", 2 ], [ 55, null, "215458", 2 ], [ 56, null, "215457", 2 ], [ 57, null, "215455", 2 ], [ 58, null, "215454", 2 ], [ 59, null, "215453", 2 ], [ 60, null, "215451", 2 ], [ 61, null, "215449", 2 ], [ 62, null, "215448", 2 ], [ 63, null, "215445", 2 ], [ 64, null, "215444", 2 ], [ 65, null, "215443", 2 ], [ 66, null, "215442", 2 ], [ 67, null, "215435", 2 ], [ 68, null, "215434", 2 ], [ 69, null, "215432", 2 ], [ 70, null, "215430", 2 ], [ 71, null, "215429", 2 ], [ 72, null, "215428", 2 ], [ 73, null, "215420", 2 ], [ 74, null, "215419", 2 ], [ 75, null, "215418", 2 ], [ 76, null, "215417", 2 ], [ 77, null, "215415", 2 ], [ 78, null, "115868", 2 ], [ 79, null, "48612", 2 ], [ 80, null, "48611", 2 ], [ 81, null, "48610", 2 ], [ 82, null, "48607", 2 ], [ 83, null, "48605", 2 ], [ 84, null, "48603", 2 ], [ 85, null, "48598", 2 ], [ 86, null, "48597", 2 ], [ 87, null, "48596", 2 ], [ 88, null, "48595", 2 ], [ 89, null, "48594", 2 ], [ 90, null, "48593", 2 ], [ 91, null, "48592", 2 ], [ 92, null, "48591", 2 ], [ 93, null, "48590", 2 ], [ 94, null, "32105", 2 ], [ 95, null, "25933", 2 ], [ 96, null, "266478", 1 ], [ 97, null, "266477", 1 ], [ 98, null, "266366", 1 ], [ 99, null, "228109", 1 ], [ 100, null, "227065", 1 ], [ 101, null, "215710", 1 ], [ 102, null, "215709", 1 ], [ 103, null, "215598", 1 ], [ 104, null, "215597", 1 ], [ 105, null, "215596", 1 ], [ 106, null, "215595", 1 ], [ 107, null, "215594", 1 ], [ 108, null, "215593", 1 ], [ 109, null, "215592", 1 ], [ 110, null, "215591", 1 ], [ 111, null, "215590", 1 ], [ 112, null, "215589", 1 ], [ 113, null, "215588", 1 ], [ 114, null, "215587", 1 ], [ 115, null, "215586", 1 ], [ 116, null, "215585", 1 ], [ 117, null, "215584", 1 ], [ 118, null, "215583", 1 ], [ 119, null, "215582", 1 ], [ 120, null, "215581", 1 ], [ 121, null, "215580", 1 ], [ 122, null, "215579", 1 ], [ 123, null, "215578", 1 ], [ 124, null, "215577", 1 ], [ 125, null, "215576", 1 ], [ 126, null, "215575", 1 ], [ 127, null, "215574", 1 ], [ 128, null, "215472", 1 ], [ 129, null, "215470", 1 ], [ 130, null, "215468", 1 ], [ 131, null, "215465", 1 ], [ 132, null, "215464", 1 ], [ 133, null, "215463", 1 ], [ 134, null, "215462", 1 ], [ 135, null, "215456", 1 ], [ 136, null, "215452", 1 ], [ 137, null, "215450", 1 ], [ 138, null, "215447", 1 ], [ 139, null, "215446", 1 ], [ 140, null, "215441", 1 ], [ 141, null, "215440", 1 ], [ 142, null, "215439", 1 ], [ 143, null, "215438", 1 ], [ 144, null, "215437", 1 ], [ 145, null, "215436", 1 ], [ 146, null, "215433", 1 ], [ 147, null, "215431", 1 ], [ 148, null, "215427", 1 ], [ 149, null, "215426", 1 ], [ 150, null, "215425", 1 ], [ 151, null, "215424", 1 ], [ 152, null, "215423", 1 ], [ 153, null, "215422", 1 ], [ 154, null, "215421", 1 ], [ 155, null, "215416", 1 ], [ 156, null, "215414", 1 ], [ 157, null, "215413", 1 ], [ 158, null, "121549", 1 ], [ 159, null, "116440", 1 ], [ 160, null, "99653", 1 ], [ 161, null, "77764", 1 ], [ 162, null, "77763", 1 ], [ 163, null, "77527", 1 ], [ 164, null, "70426", 1 ], [ 165, null, "70425", 1 ], [ 166, null, "48609", 1 ], [ 167, null, "48608", 1 ], [ 168, null, "48606", 1 ], [ 169, null, "48604", 1 ], [ 170, null, "48602", 1 ], [ 171, null, "48601", 1 ], [ 172, null, "48600", 1 ], [ 173, null, "48599", 1 ], [ 174, null, "30392", 1 ] ];

class EyebrowsConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$P);
    }
}

var foreign28 = Object.freeze({
    __proto__: null,
    EyebrowsConfig: EyebrowsConfig
});

const EXCELDATA$O = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "531763", 0 ], [ 2, null, "531762", 0 ], [ 3, null, "461642", 0 ], [ 4, null, "458214", 0 ], [ 5, null, "457287", 0 ], [ 6, null, "399318", 0 ], [ 7, null, "398607", 0 ], [ 8, null, "370302", 0 ], [ 9, null, "370301", 0 ], [ 10, null, "370299", 0 ], [ 11, null, "370298", 0 ], [ 12, null, "370297", 0 ], [ 13, null, "370296", 0 ], [ 14, null, "370295", 0 ], [ 15, null, "370294", 0 ], [ 16, null, "370293", 0 ], [ 17, null, "286895", 0 ], [ 18, null, "270028", 0 ], [ 19, null, "267293", 0 ], [ 20, null, "267292", 0 ], [ 21, null, "267290", 0 ], [ 22, null, "267287", 0 ], [ 23, null, "266471", 0 ], [ 24, null, "266470", 0 ], [ 25, null, "266469", 0 ], [ 26, null, "266370", 0 ], [ 27, null, "266368", 0 ], [ 28, null, "266367", 0 ], [ 29, null, "266353", 0 ], [ 30, null, "266352", 0 ], [ 31, null, "266351", 0 ], [ 32, null, "266350", 0 ], [ 33, null, "266349", 0 ], [ 34, null, "266348", 0 ], [ 35, null, "227072", 0 ], [ 36, null, "227071", 0 ], [ 37, null, "227070", 0 ], [ 38, null, "227069", 0 ], [ 39, null, "215412", 0 ], [ 40, null, "215411", 0 ], [ 41, null, "215410", 0 ], [ 42, null, "215409", 0 ], [ 43, null, "215408", 0 ], [ 44, null, "215407", 0 ], [ 45, null, "215406", 0 ], [ 46, null, "215405", 0 ], [ 47, null, "215404", 0 ], [ 48, null, "215403", 0 ], [ 49, null, "215402", 0 ], [ 50, null, "215401", 0 ], [ 51, null, "215400", 0 ], [ 52, null, "215399", 0 ], [ 53, null, "215398", 0 ], [ 54, null, "215397", 0 ], [ 55, null, "215396", 0 ], [ 56, null, "215395", 0 ], [ 57, null, "215394", 0 ], [ 58, null, "215393", 0 ], [ 59, null, "215392", 0 ], [ 60, null, "215391", 0 ], [ 61, null, "215390", 0 ], [ 62, null, "215389", 0 ], [ 63, null, "215388", 0 ], [ 64, null, "215387", 0 ], [ 65, null, "215386", 0 ], [ 66, null, "215385", 0 ], [ 67, null, "215384", 0 ], [ 68, null, "215383", 0 ], [ 69, null, "215382", 0 ], [ 70, null, "215381", 0 ], [ 71, null, "215380", 0 ], [ 72, null, "215379", 0 ], [ 73, null, "215378", 0 ], [ 74, null, "215377", 0 ], [ 75, null, "215376", 0 ], [ 76, null, "215375", 0 ], [ 77, null, "215374", 0 ], [ 78, null, "215373", 0 ], [ 79, null, "215372", 0 ], [ 80, null, "215371", 0 ], [ 81, null, "215370", 0 ], [ 82, null, "215369", 0 ], [ 83, null, "215368", 0 ], [ 84, null, "107622", 0 ], [ 85, null, "101141", 0 ], [ 86, null, "77467", 0 ], [ 87, null, "77466", 0 ], [ 88, null, "77456", 0 ], [ 89, null, "77455", 0 ], [ 90, null, "77454", 0 ], [ 91, null, "77453", 0 ], [ 92, null, "77452", 0 ], [ 93, null, "77451", 0 ], [ 94, null, "77450", 0 ], [ 95, null, "77449", 0 ], [ 96, null, "77448", 0 ], [ 97, null, "68982", 0 ], [ 98, null, "68981", 0 ], [ 99, null, "48067", 0 ], [ 100, null, "48066", 0 ], [ 101, null, "48065", 0 ], [ 102, null, "48064", 0 ], [ 103, null, "48063", 0 ], [ 104, null, "48062", 0 ], [ 105, null, "48061", 0 ], [ 106, null, "48060", 0 ], [ 107, null, "48059", 0 ], [ 108, null, "48058", 0 ], [ 109, null, "48057", 0 ], [ 110, null, "48056", 0 ], [ 111, null, "48055", 0 ], [ 112, null, "48054", 0 ], [ 113, null, "48053", 0 ], [ 114, null, "48052", 0 ], [ 115, null, "48051", 0 ], [ 116, null, "48050", 0 ], [ 117, null, "48049", 0 ], [ 118, null, "48048", 0 ], [ 119, null, "32096", 0 ], [ 120, null, "22747", 0 ] ];

class EyelashesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$O);
    }
}

var foreign29 = Object.freeze({
    __proto__: null,
    EyelashesConfig: EyelashesConfig
});

const EXCELDATA$N = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "眼影", "531761", 0 ], [ 2, "眼影", "370255", 0 ], [ 3, "眼影", "370254", 0 ], [ 4, "眼影", "370248", 0 ], [ 5, "眼影", "370247", 0 ], [ 6, null, "370244", 0 ], [ 7, null, "370243", 0 ], [ 8, null, "367134", 0 ], [ 9, null, "286896", 0 ], [ 10, null, "270029", 0 ], [ 11, null, "267302", 0 ], [ 12, null, "267299", 0 ], [ 13, null, "267298", 0 ], [ 14, null, "266369", 0 ], [ 15, null, "266365", 0 ], [ 16, null, "266364", 0 ], [ 17, null, "266347", 0 ], [ 18, null, "266346", 0 ], [ 19, null, "266345", 0 ], [ 20, null, "266344", 0 ], [ 21, null, "223838", 0 ], [ 22, null, "215796", 0 ], [ 23, null, "215517", 0 ], [ 24, null, "215516", 0 ], [ 25, null, "215515", 0 ], [ 26, null, "215514", 0 ], [ 27, null, "215513", 0 ], [ 28, null, "215512", 0 ], [ 29, null, "215511", 0 ], [ 30, null, "215510", 0 ], [ 31, null, "215509", 0 ], [ 32, null, "215508", 0 ], [ 33, null, "215507", 0 ], [ 34, null, "215506", 0 ], [ 35, null, "215505", 0 ], [ 36, null, "215504", 0 ], [ 37, null, "215503", 0 ], [ 38, null, "215502", 0 ], [ 39, null, "215501", 0 ], [ 40, null, "215500", 0 ], [ 41, null, "215499", 0 ], [ 42, null, "215498", 0 ], [ 43, null, "215497", 0 ], [ 44, null, "215496", 0 ], [ 45, null, "215495", 0 ], [ 46, null, "215494", 0 ], [ 47, null, "215493", 0 ], [ 48, null, "215492", 0 ], [ 49, null, "215491", 0 ], [ 50, null, "215490", 0 ], [ 51, null, "215489", 0 ], [ 52, null, "215488", 0 ], [ 53, null, "215358", 0 ], [ 54, null, "215357", 0 ], [ 55, null, "215356", 0 ], [ 56, null, "215355", 0 ], [ 57, null, "215354", 0 ], [ 58, null, "215353", 0 ], [ 59, null, "215352", 0 ], [ 60, null, "215351", 0 ], [ 61, null, "215350", 0 ], [ 62, null, "215349", 0 ], [ 63, null, "215348", 0 ], [ 64, null, "215347", 0 ], [ 65, null, "215346", 0 ], [ 66, null, "215345", 0 ], [ 67, null, "164825", 0 ], [ 68, null, "116441", 0 ], [ 69, null, "116390", 0 ], [ 70, null, "107624", 0 ], [ 71, null, "107623", 0 ], [ 72, null, "77600", 0 ], [ 73, null, "77599", 0 ], [ 74, null, "77530", 0 ], [ 75, null, "77529", 0 ], [ 76, null, "77528", 0 ], [ 77, null, "77497", 0 ], [ 78, null, "77496", 0 ], [ 79, null, "77495", 0 ], [ 80, null, "77494", 0 ], [ 81, null, "75951", 0 ], [ 82, null, "70245", 0 ], [ 83, null, "32082", 0 ], [ 84, null, "32081", 0 ] ];

class EyeshadowConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$N);
    }
}

var foreign30 = Object.freeze({
    __proto__: null,
    EyeshadowConfig: EyeshadowConfig
});

const EXCELDATA$M = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "标准脸型-男", "161675", 1 ], [ 2, "标准脸型-女", "161676", 2 ] ];

class FaceConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$M);
    }
}

var foreign31 = Object.freeze({
    __proto__: null,
    FaceConfig: FaceConfig
});

const EXCELDATA$L = [ [ "ID", "Describe", "Name", "ExpressionType", "SexType", "Icon" ], [ "", "", "Language", "", "", "" ], [ 1, "默认表情", "Text_Expression_Default", 0, 0, "306265" ], [ 2, "微笑", "Text_Expression_Smile", 1, 0, "306265" ], [ 3, "开心", "Text_Expression_HaveFun", 2, 0, "306265" ], [ 4, "伤心", "Text_Expression_Sad", 3, 0, "306265" ], [ 5, "生气", "Text_Expression_GetAngry", 4, 0, "306265" ], [ 6, "尴尬", "Text_Expression_Embarrassment", 5, 0, "306265" ], [ 7, "笑", "Text_Expression_Laugh", 6, 0, "306265" ], [ 8, "调皮", "Text_Expression_BeNaughty", 7, 0, "306265" ], [ 9, "可爱", "Text_Expression_Cute", 8, 0, "306265" ], [ 10, "疑惑", "Text_Expression_Doubt", 9, 0, "306265" ] ];

class FaceExpressionConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$L);
    }
}

var foreign32 = Object.freeze({
    __proto__: null,
    FaceExpressionConfig: FaceExpressionConfig
});

const EXCELDATA$K = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "套靴长裤", "60386", 1 ], [ 2, "制服短裙", "57736", 2 ] ];

class FaceTattooConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$K);
    }
}

var foreign33 = Object.freeze({
    __proto__: null,
    FaceTattooConfig: FaceTattooConfig
});

const EXCELDATA$J = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "眼镜", "324491", [ "-13", "0", "-6", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 2, "眼镜", "225166", [ "-10", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 3, "眼镜", "366489", [ "-11", "0", "-7", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 4, "眼镜", "225171", [ "-4", "0", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 5, "眼罩", "278280", [ "-13", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 6, "面纱", "269783", [ "0", "0", "-23", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 7, "面具", "470153", [ "-4", "0", "-12", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 8, "面具", "121405", [ "-9.5", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 9, "面具", "470154", [ "-4", "0", "-11", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 10, "面具", "455257", [ "-4", "0", "-11", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 11, "面具", "455263", [ "-4", "0", "-11", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 12, "面具", "455274", [ "-4", "0", "-11", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 13, "面具", "455275", [ "-4", "0", "-11", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 14, "狐狸面具", "405768", [ "-5", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 15, "眼饰面具", "229148", [ "-14", "0", "-151.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 16, "恶魔头", "136506", [ "-5", "0", "-13.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 17, "头套", "225168", [ "-10", "0", "-1", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 18, null, "225166", [ "-10", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 19, null, "225156", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 20, null, "225163", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 21, null, "225174", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 22, null, "225165", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 23, null, "225155", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 24, null, "225158", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 25, null, "225175", [ "-10", "0", "-1.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 26, null, "54836", [ "-16", "0", "-3", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 27, null, "68186", [ "-11", "0", "-4", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 28, null, "68192", [ "-10", "0", "-4", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 29, null, "68194", [ "-11", "0", "-4", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 30, null, "68390", [ "-10", "0", "-4", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 31, null, "72679", [ "-15", "0", "-5.5", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 32, null, "183213", [ "-4.5", "0", "-2.75", "0", "0", "-90", "1.2", "1.2", "1.2" ], 0 ], [ 33, null, "183214", [ "-4.5", "0", "-3.88", "0", "0", "-90", "1.5", "1.5", "1.5" ], 0 ], [ 34, null, "183218", [ "-4.5", "0", "-2.75", "0", "0", "-90", "1.2", "1.2", "1.2" ], 0 ], [ 35, null, "183220", [ "-4.5", "0", "-4.5", "0", "0", "-90", "1.5", "1.5", "1.5" ], 0 ], [ 36, null, "183221", [ "-4.5", "0", "-2.24", "0", "0", "-90", "1.5", "1.5", "1.5" ], 0 ], [ 37, null, "189606", [ "-10", "0", "-4", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 38, null, "209387", [ "-10", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 39, null, "324333", [ "-15", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 40, null, "366489", [ "-11", "0", "-6.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 41, null, "479171", [ "-10", "0", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 42, null, "189489", [ "-15", "0", "-171", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 43, null, "373418", [ "-7.5", "0", "0", "0", "0", "-90", "0.3", "0.3", "0.3" ], 0 ], [ 44, null, "197016", [ "-15", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 45, null, "209534", [ "-10", "0", "-4", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 46, null, "264631", [ "-3.5", "0", "0", "-25", "0", "-90", "1", "1", "1" ], 0 ], [ 47, null, "269529", [ "-10", "0", "-4", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 48, null, "44258", [ "-15", "0", "-5", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 49, null, "44274", [ "-17", "0", "-10", "0", "0", "-90", "0.7", "0.7", "0.7" ], 0 ], [ 50, null, "54838", [ "-15", "0", "-3", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 51, null, "68196", [ "-7", "0", "-5", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 52, null, "68198", [ "-14", "0", "-4.5", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 53, null, "68335", [ "-11", "0", "-4", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 54, null, "68340", [ "-15", "0", "-7.5", "0", "0", "-90", "0.8", "0.8", "0.8" ], 0 ], [ 55, null, "112801", [ "-5", "0", "-5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 56, null, "174439", [ "-4", "0", "-2.5", "0", "0", "-90", "1.5", "1.5", "1.5" ], 0 ], [ 57, null, "186711", [ "-15", "0", "-3.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 58, null, "186785", [ "-9", "0", "-3.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 59, null, "186900", [ "-8.5", "0", "-4.5", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 60, null, "369229", [ "-10", "0", "-4", "0", "0", "-90", "1", "1", "1" ], 0 ] ];

class FacingConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$J);
    }
}

var foreign34 = Object.freeze({
    __proto__: null,
    FacingConfig: FacingConfig
});

const EXCELDATA$I = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "魔后", "136189", 2 ], [ 2, "白人女魔使", "137836", 2 ], [ 3, "白人女天使", "137837", 2 ], [ 4, "黑人女天使", "137841", 2 ], [ 5, "女战神", "137843", 2 ], [ 6, "女水手白人", "137851", 2 ], [ 7, "青年智慧女神", "141148", 2 ], [ 8, "黑天使", "142140", 2 ], [ 9, "刺客女性", "142254", 2 ], [ 10, "纳米机甲女性", "142255", 2 ], [ 11, "卡魔拉", "142263", 2 ], [ 12, "魔术师女", "142270", 2 ], [ 13, "哨兵冰", "142272", 2 ], [ 14, "女浩克", "142294", 2 ], [ 15, "羊角女巫", "142308", 2 ], [ 16, "冰雪王后", "142311", 2 ], [ 17, "海洋王后", "142312", 2 ], [ 18, "Dva", "142860", 2 ], [ 19, "雏田", "142913", 2 ], [ 20, "春野樱", "142914", 2 ], [ 21, "纲手", "142918", 2 ], [ 22, "娜美", "142926", 2 ], [ 23, "妮可罗宾", "142927", 2 ], [ 24, "女帝", "142928", 2 ], [ 25, "天天", "142929", 2 ], [ 26, "小南", "143226", 2 ], [ 27, "小樱", "143227", 2 ], [ 28, "灶门祢豆子", "143232", 2 ], [ 29, "暗影芭比", "143388", 2 ], [ 30, "粉毛怪", "143389", 2 ], [ 31, "蓝毛怪", "143394", 2 ], [ 32, "魔莱坞学院院长", "143396", 2 ], [ 33, "魔法少女", "347741", 2 ], [ 34, "弓箭少女", "351393", 2 ], [ 35, "西方神女", "351405", 2 ], [ 36, "狐耳少女", "361906", 2 ], [ 37, "魔法少女服饰", "163278", 2 ], [ 38, "魔法女巫套装", "164419", 2 ], [ 39, "绿色怪人服", "164369", 1 ], [ 40, "变异人套装", "164423", 1 ], [ 41, "怪人套装", "164424", 1 ], [ 42, "马戏团小丑服", "232208", 1 ], [ 43, "小爱神", "136262", 1 ], [ 44, "中年冥神", "141147", 1 ], [ 45, "白人男天使", "141149", 1 ], [ 46, "黑人男天使", "141150", 1 ], [ 47, "老山城", "141153", 1 ], [ 48, "太阳神", "141498", 1 ], [ 49, "魔王", "141499", 1 ], [ 50, "海王神", "141500", 1 ], [ 51, "神使", "141504", 1 ], [ 52, "魔使男", "141917", 1 ], [ 53, "魔使男", "141920", 1 ], [ 54, "魔兵", "142141", 1 ], [ 55, "魔兵", "142142", 1 ], [ 56, "魔兵", "142143", 1 ], [ 57, "兽人", "142144", 1 ], [ 58, "兽人", "142145", 1 ], [ 59, "兽人", "142146", 1 ], [ 60, "未来战士", "142153", 1 ], [ 61, "未来战士", "142154", 1 ], [ 62, "哨兵石", "142291", 1 ], [ 63, "哨兵木", "142292", 1 ], [ 64, "哨兵火", "142293", 1 ], [ 65, "青年地精", "142300", 1 ], [ 66, "老年地精", "142306", 1 ], [ 67, "天神", "142310", 1 ], [ 68, "狼人001", "142351", 1 ], [ 69, "黑男哨兵铁", "142389", 1 ], [ 70, "男丧尸", "142874", 1 ], [ 71, "外星人", "142880", 1 ], [ 72, "大蛇丸", "142915", 1 ], [ 73, "飞段", "142916", 1 ], [ 74, "干柿鬼鲛", "142917", 1 ], [ 75, "角都", "142919", 1 ], [ 76, "卡卡西", "142920", 1 ], [ 77, "炼狱杏寿郎", "142921", 1 ], [ 78, "路飞", "142922", 1 ], [ 79, "索隆", "142923", 1 ], [ 80, "洛克李", "142924", 1 ], [ 81, "鸣人", "142925", 1 ], [ 82, "我爱罗", "142930", 1 ], [ 83, "我妻善逸", "142931", 1 ], [ 84, "悟空", "142932", 1 ], [ 85, "蝎", "143228", 1 ], [ 86, "宇智波斑", "143229", 1 ], [ 87, "宇智波带土", "143230", 1 ], [ 88, "宇智波鼬", "143231", 1 ], [ 89, "长门", "143233", 1 ], [ 90, "嘴平伊之助", "143235", 1 ], [ 91, "宇智波佐助", "143236", 1 ], [ 92, "史瑞克", "143386", 1 ], [ 93, "迷雾鬼影", "143395", 1 ], [ 94, "屠夫", "143398", 1 ], [ 95, "玄魁", "143402", 1 ], [ 96, "专家", "143404", 1 ], [ 97, "Ghost Face", "144873", 1 ], [ 98, "巫医", "145319", 1 ], [ 99, "灶门炭治郎", "145322", 1 ], [ 100, "长胡子老者", "351396", 1 ], [ 101, "大耳男", "351403", 1 ], [ 102, "侦探小子", "361907", 1 ] ];

class FantasyModelingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$I);
    }
}

var foreign35 = Object.freeze({
    __proto__: null,
    FantasyModelingOutfitConfig: FantasyModelingOutfitConfig
});

const EXCELDATA$H = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "224014", 2 ], [ 2, null, "181359", 2 ], [ 3, null, "119225", 2 ], [ 4, null, "75456", 2 ], [ 5, null, "66300", 2 ], [ 6, null, "63869", 2 ], [ 7, null, "63301", 2 ], [ 8, null, "224163", 1 ], [ 9, null, "213066", 1 ], [ 10, null, "213065", 1 ], [ 11, null, "213064", 1 ], [ 12, null, "212896", 1 ], [ 13, null, "200241", 1 ], [ 14, null, "129276", 1 ], [ 15, null, "129088", 1 ], [ 16, null, "126683", 1 ], [ 17, null, "120573", 1 ], [ 18, null, "119392", 1 ], [ 19, null, "117679", 1 ], [ 20, null, "75459", 1 ], [ 21, null, "64632", 1 ], [ 22, null, "64541", 1 ] ];

class FootCoverShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$H);
    }
}

var foreign36 = Object.freeze({
    __proto__: null,
    FootCoverShoesConfig: FootCoverShoesConfig
});

const EXCELDATA$G = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "490924", 2 ], [ 2, null, "468351", 2 ], [ 3, null, "457927", 2 ], [ 4, null, "412114", 2 ], [ 5, null, "399481", 2 ], [ 6, null, "392302", 2 ], [ 7, null, "358218", 2 ], [ 8, null, "349652", 2 ], [ 9, null, "346552", 2 ], [ 10, null, "313095", 2 ], [ 11, null, "299084", 2 ], [ 12, null, "292003", 2 ], [ 13, null, "269615", 2 ], [ 14, null, "241441", 2 ], [ 15, null, "241185", 2 ], [ 16, null, "240055", 2 ], [ 17, null, "221653", 2 ], [ 18, null, "218592", 2 ], [ 19, null, "217607", 2 ], [ 20, null, "181366", 2 ], [ 21, null, "152033", 2 ], [ 22, null, "144946", 2 ], [ 23, null, "144679", 2 ], [ 24, null, "144678", 2 ], [ 25, null, "144677", 2 ], [ 26, null, "144676", 2 ], [ 27, null, "144673", 2 ], [ 28, null, "144672", 2 ], [ 29, null, "144626", 2 ], [ 30, null, "144613", 2 ], [ 31, null, "142837", 2 ], [ 32, null, "142680", 2 ], [ 33, null, "142678", 2 ], [ 34, null, "142598", 2 ], [ 35, null, "142597", 2 ], [ 36, null, "141709", 2 ], [ 37, null, "140478", 2 ], [ 38, null, "137486", 2 ], [ 39, null, "137384", 2 ], [ 40, null, "132493", 2 ], [ 41, null, "132025", 2 ], [ 42, null, "131781", 2 ], [ 43, null, "127635", 2 ], [ 44, null, "126005", 2 ], [ 45, null, "124777", 2 ], [ 46, null, "119445", 2 ], [ 47, null, "119428", 2 ], [ 48, null, "119414", 2 ], [ 49, null, "118689", 2 ], [ 50, null, "118590", 2 ], [ 51, null, "118560", 2 ], [ 52, null, "118545", 2 ], [ 53, null, "118530", 2 ], [ 54, null, "118516", 2 ], [ 55, null, "118484", 2 ], [ 56, null, "118434", 2 ], [ 57, null, "118420", 2 ], [ 58, null, "117482", 2 ], [ 59, null, "117151", 2 ], [ 60, null, "115848", 2 ], [ 61, null, "115629", 2 ], [ 62, null, "109834", 2 ], [ 63, null, "92726", 2 ], [ 64, null, "86090", 2 ], [ 65, null, "74868", 2 ], [ 66, null, "74448", 2 ], [ 67, null, "74317", 2 ], [ 68, null, "67584", 2 ], [ 69, null, "66708", 2 ], [ 70, null, "66573", 2 ], [ 71, null, "66506", 2 ], [ 72, null, "66354", 2 ], [ 73, null, "65866", 2 ], [ 74, null, "65713", 2 ], [ 75, null, "65664", 2 ], [ 76, null, "65661", 2 ], [ 77, null, "64716", 2 ], [ 78, null, "64714", 2 ], [ 79, null, "64414", 2 ], [ 80, null, "64311", 2 ], [ 81, null, "64257", 2 ], [ 82, null, "64255", 2 ], [ 83, null, "64254", 2 ], [ 84, null, "64146", 2 ], [ 85, null, "64145", 2 ], [ 86, null, "64143", 2 ], [ 87, null, "63872", 2 ], [ 88, null, "63547", 2 ], [ 89, null, "63546", 2 ], [ 90, null, "63544", 2 ], [ 91, null, "63302", 2 ], [ 92, null, "63299", 2 ], [ 93, null, "63298", 2 ], [ 94, null, "62965", 2 ], [ 95, null, "62963", 2 ], [ 96, null, "62785", 2 ], [ 97, null, "62784", 2 ], [ 98, null, "62544", 2 ], [ 99, null, "62543", 2 ], [ 100, null, "60989", 2 ], [ 101, null, "60988", 2 ], [ 102, null, "60987", 2 ], [ 103, null, "60115", 2 ], [ 104, null, "60079", 2 ], [ 105, null, "57731", 2 ], [ 106, null, "266161", 1 ], [ 107, null, "252586", 1 ], [ 108, null, "252585", 1 ], [ 109, null, "247526", 1 ], [ 110, null, "241399", 1 ], [ 111, null, "145064", 1 ], [ 112, null, "144413", 1 ], [ 113, null, "144341", 1 ], [ 114, null, "144329", 1 ], [ 115, null, "142594", 1 ], [ 116, null, "140425", 1 ], [ 117, null, "140327", 1 ], [ 118, null, "129951", 1 ], [ 119, null, "129460", 1 ], [ 120, null, "126007", 1 ], [ 121, null, "124847", 1 ], [ 122, null, "123342", 1 ], [ 123, null, "122918", 1 ], [ 124, null, "122001", 1 ], [ 125, null, "121122", 1 ], [ 126, null, "120199", 1 ], [ 127, null, "119877", 1 ], [ 128, null, "119695", 1 ], [ 129, null, "119681", 1 ], [ 130, null, "119567", 1 ], [ 131, null, "119495", 1 ], [ 132, null, "115935", 1 ], [ 133, null, "92724", 1 ], [ 134, null, "92011", 1 ], [ 135, null, "74118", 1 ], [ 136, null, "74117", 1 ], [ 137, null, "66697", 1 ], [ 138, null, "66594", 1 ], [ 139, null, "66556", 1 ], [ 140, null, "66420", 1 ], [ 141, null, "66419", 1 ], [ 142, null, "66162", 1 ], [ 143, null, "66152", 1 ], [ 144, null, "66108", 1 ], [ 145, null, "65975", 1 ], [ 146, null, "65781", 1 ], [ 147, null, "65729", 1 ], [ 148, null, "65008", 1 ], [ 149, null, "64996", 1 ], [ 150, null, "64715", 1 ], [ 151, null, "64185", 1 ], [ 152, null, "63909", 1 ], [ 153, null, "63676", 1 ] ];

class FrontHairConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$G);
    }
}

var foreign37 = Object.freeze({
    __proto__: null,
    FrontHairConfig: FrontHairConfig
});

const EXCELDATA$F = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "61001", 2 ], [ 2, null, "62967", 2 ], [ 3, null, "63873", 2 ], [ 4, null, "64777", 2 ], [ 5, null, "91904", 2 ], [ 6, null, "111076", 2 ], [ 7, null, "117626", 2 ], [ 8, null, "118571", 2 ], [ 9, null, "119228", 2 ], [ 10, null, "119744", 2 ], [ 11, null, "120586", 2 ], [ 12, null, "124743", 2 ], [ 13, null, "124878", 2 ], [ 14, null, "125736", 2 ], [ 15, null, "128594", 2 ], [ 16, null, "128836", 2 ], [ 17, null, "131787", 2 ], [ 18, null, "134960", 2 ], [ 19, null, "137426", 2 ], [ 20, null, "142679", 2 ], [ 21, null, "142838", 2 ], [ 22, null, "217368", 2 ], [ 23, null, "221707", 2 ], [ 24, null, "224013", 2 ], [ 25, null, "248350", 2 ], [ 26, null, "264187", 2 ], [ 27, null, "269617", 2 ], [ 28, null, "269619", 2 ], [ 29, null, "296024", 2 ], [ 30, null, "298036", 2 ], [ 31, null, "300484", 2 ], [ 32, null, "314287", 2 ], [ 33, null, "321372", 2 ], [ 34, null, "325907", 2 ], [ 35, null, "344231", 2 ], [ 36, null, "356247", 2 ], [ 37, null, "362143", 2 ], [ 38, null, "370792", 2 ], [ 39, null, "383402", 2 ], [ 40, null, "383404", 2 ], [ 41, null, "391374", 2 ], [ 42, null, "436993", 2 ], [ 43, null, "437605", 2 ], [ 44, null, "440231", 2 ], [ 45, null, "455469", 2 ], [ 46, null, "457745", 2 ], [ 47, null, "457814", 2 ], [ 48, null, "458635", 2 ], [ 49, null, "476304", 2 ], [ 50, null, "478217", 2 ], [ 51, null, "494915", 2 ], [ 52, null, "497739", 2 ], [ 53, null, "497918", 2 ], [ 54, null, "502240", 2 ], [ 55, null, "63595", 1 ], [ 56, null, "63678", 1 ], [ 57, null, "63887", 1 ], [ 58, null, "64546", 1 ], [ 59, null, "64549", 1 ], [ 60, null, "64550", 1 ], [ 61, null, "65060", 1 ], [ 62, null, "65617", 1 ], [ 63, null, "66727", 1 ], [ 64, null, "94781", 1 ], [ 65, null, "99383", 1 ], [ 66, null, "109069", 1 ], [ 67, null, "109143", 1 ], [ 68, null, "111158", 1 ], [ 69, null, "111277", 1 ], [ 70, null, "111397", 1 ], [ 71, null, "111404", 1 ], [ 72, null, "111410", 1 ], [ 73, null, "111411", 1 ], [ 74, null, "111578", 1 ], [ 75, null, "111619", 1 ], [ 76, null, "115940", 1 ], [ 77, null, "117115", 1 ], [ 78, null, "117680", 1 ], [ 79, null, "118075", 1 ], [ 80, null, "119113", 1 ], [ 81, null, "119256", 1 ], [ 82, null, "119339", 1 ], [ 83, null, "119394", 1 ], [ 84, null, "119574", 1 ], [ 85, null, "119668", 1 ], [ 86, null, "119772", 1 ], [ 87, null, "119790", 1 ], [ 88, null, "119865", 1 ], [ 89, null, "119951", 1 ], [ 90, null, "120073", 1 ], [ 91, null, "120576", 1 ], [ 92, null, "121521", 1 ], [ 93, null, "121522", 1 ], [ 94, null, "121523", 1 ], [ 95, null, "125688", 1 ], [ 96, null, "126010", 1 ], [ 97, null, "126011", 1 ], [ 98, null, "126325", 1 ], [ 99, null, "126681", 1 ], [ 100, null, "127350", 1 ], [ 101, null, "127497", 1 ], [ 102, null, "127651", 1 ], [ 103, null, "127717", 1 ], [ 104, null, "127797", 1 ], [ 105, null, "127798", 1 ], [ 106, null, "129089", 1 ], [ 107, null, "129247", 1 ], [ 108, null, "129277", 1 ], [ 109, null, "131748", 1 ], [ 110, null, "134562", 1 ], [ 111, null, "134564", 1 ], [ 112, null, "137448", 1 ], [ 113, null, "137964", 1 ], [ 114, null, "138104", 1 ], [ 115, null, "142601", 1 ], [ 116, null, "142682", 1 ], [ 117, null, "144422", 1 ], [ 118, null, "174741", 1 ], [ 119, null, "193165", 1 ], [ 120, null, "200240", 1 ], [ 121, null, "212898", 1 ], [ 122, null, "218833", 1 ], [ 123, null, "224165", 1 ], [ 124, null, "240888", 1 ], [ 125, null, "264151", 1 ], [ 126, null, "266189", 1 ], [ 127, null, "266190", 1 ], [ 128, null, "299160", 1 ], [ 129, null, "313980", 1 ], [ 130, null, "320847", 1 ], [ 131, null, "336197", 1 ], [ 132, null, "336704", 1 ], [ 133, null, "348895", 1 ], [ 134, null, "348925", 1 ], [ 135, null, "356546", 1 ], [ 136, null, "381502", 1 ], [ 137, null, "382167", 1 ], [ 138, null, "382995", 1 ], [ 139, null, "451396", 1 ], [ 140, null, "458130", 1 ], [ 141, null, "458789", 1 ], [ 142, null, "476243", 1 ], [ 143, null, "479104", 1 ], [ 144, null, "494888", 1 ], [ 145, null, "502264", 1 ], [ 146, null, "504635", 1 ], [ 147, null, "507478", 1 ] ];

class FullHairConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$F);
    }
}

var foreign38 = Object.freeze({
    __proto__: null,
    FullHairConfig: FullHairConfig
});

const EXCELDATA$E = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "502239", 2 ], [ 2, null, "497737", 2 ], [ 3, null, "476303", 2 ], [ 4, null, "458634", 2 ], [ 5, null, "457816", 2 ], [ 6, null, "457731", 2 ], [ 7, null, "440212", 2 ], [ 8, null, "412073", 2 ], [ 9, null, "390741", 2 ], [ 10, null, "390739", 2 ], [ 11, null, "390343", 2 ], [ 12, null, "344061", 2 ], [ 13, null, "322893", 2 ], [ 14, null, "321369", 2 ], [ 15, null, "314289", 2 ], [ 16, null, "300485", 2 ], [ 17, null, "299083", 2 ], [ 18, null, "292847", 2 ], [ 19, null, "269618", 2 ], [ 20, null, "241439", 2 ], [ 21, null, "240051", 2 ], [ 22, null, "224012", 2 ], [ 23, null, "218567", 2 ], [ 24, null, "213470", 2 ], [ 25, null, "213469", 2 ], [ 26, null, "213468", 2 ], [ 27, null, "131791", 2 ], [ 28, null, "121945", 2 ], [ 29, null, "119226", 2 ], [ 30, null, "111259", 2 ], [ 31, null, "111087", 2 ], [ 32, null, "75663", 2 ], [ 33, null, "66574", 2 ], [ 34, null, "66423", 2 ], [ 35, null, "66299", 2 ], [ 36, null, "65658", 2 ], [ 37, null, "64721", 2 ], [ 38, null, "64720", 2 ], [ 39, null, "63875", 2 ], [ 40, null, "63308", 2 ], [ 41, null, "63307", 2 ], [ 42, null, "62547", 2 ], [ 43, null, "60992", 2 ], [ 44, null, "60081", 2 ], [ 45, null, "507471", 1 ], [ 46, null, "502262", 1 ], [ 47, null, "336268", 1 ], [ 48, null, "320848", 1 ], [ 49, null, "313978", 1 ], [ 50, null, "313678", 1 ], [ 51, null, "299158", 1 ], [ 52, null, "293136", 1 ], [ 53, null, "247534", 1 ], [ 54, null, "224167", 1 ], [ 55, null, "218834", 1 ], [ 56, null, "213090", 1 ], [ 57, null, "213089", 1 ], [ 58, null, "213088", 1 ], [ 59, null, "212894", 1 ], [ 60, null, "200235", 1 ], [ 61, null, "150735", 1 ], [ 62, null, "134566", 1 ], [ 63, null, "131746", 1 ], [ 64, null, "129935", 1 ], [ 65, null, "129274", 1 ], [ 66, null, "129090", 1 ], [ 67, null, "127718", 1 ], [ 68, null, "127496", 1 ], [ 69, null, "126680", 1 ], [ 70, null, "122780", 1 ], [ 71, null, "120574", 1 ], [ 72, null, "119892", 1 ], [ 73, null, "119663", 1 ], [ 74, null, "119391", 1 ], [ 75, null, "119254", 1 ], [ 76, null, "118078", 1 ], [ 77, null, "117683", 1 ], [ 78, null, "115939", 1 ], [ 79, null, "112037", 1 ], [ 80, null, "111576", 1 ], [ 81, null, "111390", 1 ], [ 82, null, "111285", 1 ], [ 83, null, "109141", 1 ], [ 84, null, "94783", 1 ], [ 85, null, "75664", 1 ], [ 86, null, "65778", 1 ], [ 87, null, "65730", 1 ], [ 88, null, "64631", 1 ], [ 89, null, "64551", 1 ], [ 90, null, "63890", 1 ], [ 91, null, "60384", 1 ] ];

class GlovesGlovesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$E);
    }
}

var foreign41 = Object.freeze({
    __proto__: null,
    GlovesGlovesConfig: GlovesGlovesConfig
});

const EXCELDATA$D = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "翻毛黄金首饰", "137386", 1 ], [ 2, "清洁手套", "119254", 2 ] ];

class GlovesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$D);
    }
}

var foreign40 = Object.freeze({
    __proto__: null,
    GlovesConfig: GlovesConfig
});

const EXCELDATA$C = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "风暴女", "142261", 2 ], [ 2, "绯红女巫", "142262", 2 ], [ 3, "黑寡妇", "142891", 2 ], [ 4, "惊奇队长", "142893", 2 ], [ 5, "神奇女侠", "142902", 2 ], [ 6, "女战士", "349374", 2 ], [ 7, "魔法女孩", "350260", 2 ], [ 8, "战士服", "164416", 2 ], [ 9, "作战服", "164420", 2 ], [ 10, "紧身作战服", "164425", 2 ], [ 11, "塞西亚套装", "321428", 2 ], [ 12, "男式紧身服", "162938", 1 ], [ 13, "道服", "162937", 1 ], [ 14, "男作战服", "162946", 1 ], [ 15, "雷电战士服饰", "164355", 1 ], [ 16, "鱼族战士服", "164360", 1 ], [ 17, "战士服", "164361", 1 ], [ 18, "法师服饰", "164362", 1 ], [ 19, "面具骑士服", "164371", 1 ], [ 20, "黑夜战士服", "164373", 1 ], [ 21, "黄金战甲", "164378", 1 ], [ 22, "蝙蝠侠", "142884", 1 ], [ 23, "超人", "142885", 1 ], [ 24, "毒液", "142886", 1 ], [ 25, "恶灵骑士", "142887", 1 ], [ 26, "钢铁侠", "142888", 1 ], [ 27, "海王", "142889", 1 ], [ 28, "黑豹", "142890", 1 ], [ 29, "金刚狼", "142892", 1 ], [ 30, "雷神", "142894", 1 ], [ 31, "洛基", "142895", 1 ], [ 32, "绿灯侠", "142896", 1 ], [ 33, "绿巨人", "142897", 1 ], [ 34, "美国队长", "142898", 1 ], [ 35, "灭霸", "142899", 1 ], [ 36, "奇异博士", "142900", 1 ], [ 37, "闪电侠", "142901", 1 ], [ 38, "死侍", "142903", 1 ], [ 39, "万磁王", "142904", 1 ], [ 40, "蚁人", "142905", 1 ], [ 41, "鹰眼", "142906", 1 ], [ 42, "蜘蛛侠", "142907", 1 ] ];

class HeroStylingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$C);
    }
}

var foreign42 = Object.freeze({
    __proto__: null,
    HeroStylingOutfitConfig: HeroStylingOutfitConfig
});

const EXCELDATA$B = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "497741", 2 ], [ 2, null, "490925", 2 ], [ 3, null, "436992", 2 ], [ 4, null, "358106", 2 ], [ 5, null, "321373", 2 ], [ 6, null, "299079", 2 ], [ 7, null, "218443", 2 ], [ 8, null, "211008", 2 ], [ 9, null, "164845", 2 ], [ 10, null, "141712", 2 ], [ 11, null, "137428", 2 ], [ 12, null, "127638", 2 ], [ 13, null, "67592", 2 ], [ 14, null, "66562", 2 ], [ 15, null, "65867", 2 ], [ 16, null, "64775", 2 ], [ 17, null, "64712", 2 ], [ 18, null, "64304", 2 ], [ 19, null, "64144", 2 ], [ 20, null, "63870", 2 ], [ 21, null, "63541", 2 ], [ 22, null, "62961", 2 ], [ 23, null, "62960", 2 ], [ 24, null, "62541", 2 ], [ 25, null, "62539", 2 ], [ 26, null, "60984", 2 ], [ 27, null, "60117", 2 ], [ 28, null, "60078", 2 ] ];

class HighHeelsShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$B);
    }
}

var foreign43 = Object.freeze({
    __proto__: null,
    HighHeelsShoesConfig: HighHeelsShoesConfig
});

const EXCELDATA$A = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "尾巴", "136179", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, "孔雀尾巴", "292600", [ "0", "0", "0", "-90", "0", "90", "1", "1", "1" ], 0 ], [ 3, "尾巴", "136173", [ "0", "0", "0", "-90", "0", "-90", "1", "1", "1" ], 0 ], [ 4, "尾巴", "453459", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, "尾巴", "453460", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, "尾巴", "404432", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, "狐狸尾巴", "226476", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 8, "人鱼尾巴", "493583", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, "尾巴", "323388", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 10, null, "404432", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 11, null, "136172", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 12, null, "136182", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 13, null, "136174", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 14, null, "136162", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 15, null, "212788", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 16, null, "213045", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 17, null, "212598", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 18, null, "213046", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 19, null, "212911", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 20, null, "212761", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 21, null, "212762", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 22, null, "212599", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 23, null, "212786", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 24, null, "215996", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 25, null, "348230", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 26, null, "323953", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class HipConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$A);
    }
}

var foreign44 = Object.freeze({
    __proto__: null,
    HipConfig: HipConfig
});

const EXCELDATA$z = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "圣诞节女", "136298", 2 ], [ 2, "煎饼狗子", "141608", 2 ], [ 3, "新年双马尾女", "141918", 2 ], [ 4, "新年女", "142187", 2 ], [ 5, "雪人001", "142264", 2 ], [ 6, "新年女青年", "142285", 2 ], [ 7, "万圣节女", "143399", 2 ], [ 8, "圣诞服装", "162933", 2 ], [ 9, "汉服襦裙", "163276", 2 ], [ 10, "圣诞公主裙", "163326", 2 ], [ 11, "圣诞装", "163549", 2 ], [ 12, "春节时装", "163552", 2 ], [ 13, "雪人装", "164566", 2 ], [ 14, "新年装", "297941", 2 ], [ 15, "兔子套装", "314666", 2 ], [ 16, "汉服长袍", "162964", 1 ], [ 17, "春节时装", "164565", 1 ], [ 18, "摇滚歌手服饰", "164567", 1 ], [ 19, "圣诞老人服", "164568", 1 ], [ 20, "巫医服饰", "164569", 1 ], [ 21, "教廷服饰", "164570", 1 ], [ 22, "鬼脸套装", "164571", 1 ], [ 23, "圣诞老人套装", "164572", 1 ], [ 24, "圣诞装", "164573", 1 ], [ 25, "鸡蛋套装", "314226", 1 ], [ 26, "兔子套装", "314664", 1 ], [ 27, "圣诞老人", "136299", 1 ], [ 28, "Cupid", "141077", 1 ], [ 29, "凌羽琪", "141155", 1 ], [ 30, "新年男", "142186", 1 ], [ 31, "新年男青年", "142273", 1 ], [ 32, "新年男中年", "142284", 1 ], [ 33, "新年男005", "142313", 1 ] ];

class HolidayStylingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$z);
    }
}

var foreign45 = Object.freeze({
    __proto__: null,
    HolidayStylingOutfitConfig: HolidayStylingOutfitConfig
});

const EXCELDATA$y = [ [ "ID", "TriggerGuid", "ModelGuid", "ModelGuid_C", "BagId", "NpcId", "ShareId", "NpcAnimationId" ], [ "", "", "", "", "", "", "", "" ], [ 1, "224AC214", null, null, 10106, null, 0, null, "电吉他" ], [ 2, "35CDCC44", null, null, 10193, null, 0, null, "电吉他" ], [ 3, "34350953", null, null, 10194, null, 0, null, "吉他" ], [ 4, "3EA51D09", null, null, 10195, null, 0, null, "吉他" ], [ 5, "04AEE481", null, null, 10420, null, 0, null, "钢琴" ], [ 6, "05ED08EB", null, null, 10440, null, 0, null, "架子鼓" ], [ 7, "0CAEBC7B", null, null, 10438, null, 0, null, "灯球" ], [ 8, "1B1B284C", null, null, 10439, null, 0, null, "灯球" ], [ 9, "3B1D90D9", null, null, 10441, null, 0, null, "沙发" ], [ 10, "38A812F7", null, null, 10429, null, 0, null, "卡通小人" ], [ 11, "2D253DE4", null, "198914", 10430, null, 0, null, "L" ], [ 12, "1F461FC1", null, "199057", 10431, null, 0, null, "O" ], [ 13, "122CF8D0", null, "199090", 10432, null, 0, null, "V" ], [ 14, "135CB222", null, "198991", 10433, null, 0, null, "E" ], [ 15, "13F0153C", null, "198902", 10434, null, 0, null, "F" ], [ 16, "2B380279", null, "198968", 10435, null, 0, null, "U" ], [ 17, "323796B5", null, "198896", 10436, null, 0, null, "C" ], [ 18, "0BFB2115", null, "198912", 10437, null, 0, null, "K" ], [ 19, "025E8339", null, null, 10442, null, 0, null, "箱子" ], [ 20, "1CB8B39E", null, "121354", 10443, null, 0, null, "红手牌(笑脸)" ], [ 21, "3218B841", null, "121351", 10444, null, 0, null, "蓝手牌(委屈脸)" ], [ 22, "3FC7844F", null, "198892", 10445, null, 0, null, "A" ], [ 23, "3A0B1AA4", null, "198894", 10446, null, 0, null, "B" ], [ 24, "289874F8", null, "198898", 10447, null, 0, null, "D" ], [ 25, "2D35158F", null, "198904", 10448, null, 0, null, "G" ], [ 26, "37179069", null, null, 10449, null, 0, null, "凳子" ], [ 27, "06A7F0E5", null, null, 10412, null, 0, null, "蓝色法杖" ], [ 28, "22E2E57A", null, null, 10413, null, 0, null, "红色法杖" ], [ 29, "2826DD99", null, null, 10414, null, 0, null, "扫帚法杖" ], [ 30, "2A198EFA", null, null, 10415, null, 0, null, "魔法仗" ], [ 31, "1E555942", null, null, 10416, null, 0, null, "地毯" ], [ 32, "2D19DF6C", null, null, 10417, null, 0, null, "足球筐" ], [ 33, "32A7A7B8", null, null, 10418, null, 0, null, "纸板箱" ], [ 34, "34F4253C", null, null, 10419, null, 0, null, "热狗摊" ], [ 35, "3D84B039", null, null, 10421, null, 0, null, "妲己耳朵" ], [ 36, "3AA417A1", null, null, 10422, null, 0, null, "长耳兔灰耳朵" ], [ 37, "3A0611CB", null, null, 10423, null, 0, null, "黑狼耳朵" ], [ 38, "3AC125DE", null, null, 10424, null, 0, null, "气球" ], [ 39, "32B8310E", null, null, 10425, null, 0, null, "卡通小人" ], [ 40, "3E3B0A9B", null, null, 10426, null, 0, null, "卡通小人" ], [ 41, "1A0BA065", null, null, 10406, null, 0, null, "凳子" ], [ 42, "16726419", null, null, 10192, null, 0, null, "女帽子" ], [ 43, "17FB3B3A", null, null, 10174, null, 0, null, "法杖" ], [ 44, "359709F3", null, null, 10151, null, 0, null, "射灯" ], [ 45, "39365A4F", null, "87019", 10152, null, 0, null, "喷火枪" ], [ 46, "2B34AD30", null, null, 10147, null, 0, null, "尖叫鸡" ], [ 47, "0E045A2F", null, null, 10105, null, 0, null, "荧光棒" ], [ 48, "3DFE17A3", null, "175291", 10107, null, 0, null, "左轮手枪" ], [ 49, "26253FF9", null, "176450", 10108, null, 0, null, "散弹枪" ], [ 50, "2DA1B897", null, "176541", 10109, null, 0, null, "步枪" ], [ 51, "31CB4D13", null, "176320", 10112, null, 0, null, "美元" ], [ 52, "20002110", null, null, 10101, null, 0, null, "洋娃娃" ], [ 53, "253BA295", null, "176521", 10102, null, 0, null, "娃娃" ], [ 54, "03839C6A", null, null, 10103, null, 0, null, "书本" ], [ 55, "364243CD", null, "176511", 10104, null, 0, null, "相机" ], [ 56, "39E41FEF", null, "176265", 10111, null, 0, null, "笔记本电脑" ], [ 57, "282CC813", null, "176478", 10114, null, 0, null, "手机" ], [ 58, "09E06B43", null, "162188", 10116, null, 0, null, "手捧鲜花" ], [ 59, "0B2EE355", null, "176260", 10117, null, 0, null, "购物车" ], [ 60, "37CE4DD0", null, "176266", 10119, null, 0, null, "婴儿车" ], [ 61, "2C2B7A39", null, "176501", 10120, null, 0, null, "行李箱" ], [ 62, "0EC71B70", null, "176321", 10121, null, 0, null, "黑色雨伞" ], [ 63, "170B6165", null, null, 10146, null, 0, null, "气球" ], [ 64, "0C858992", null, null, 10148, null, 0, null, "小白兔玩偶" ], [ 65, "1C3B1716", null, null, 10149, null, 0, null, "玩偶" ], [ 66, "3099F378", null, null, 10164, null, 0, null, "杠铃" ], [ 67, "1A6AA485", null, null, 10165, null, 0, null, "杠铃" ], [ 68, "22A2C3CA", null, null, 10166, null, 0, null, "玩偶" ], [ 69, "29C87271", null, null, 10167, null, 0, null, "玩偶" ], [ 70, "22E0C2A0", null, null, 10169, null, 0, null, "奖杯" ], [ 71, "317994EA", null, null, 10170, null, 0, null, "靠垫" ], [ 72, "173E9CED", null, null, 10171, null, 0, null, "靠垫" ], [ 73, "1F7EF865", null, null, 10173, null, 0, null, "游戏机" ], [ 74, "1A4DEA4F", null, null, 10175, null, 0, null, "鲤鱼" ], [ 75, "30DCA4CE", null, null, 10176, null, 0, null, "龙虾" ], [ 76, "30DFB9BA", null, null, 10177, null, 0, null, "金龙鱼" ], [ 77, "124A25AC", null, null, 10178, null, 0, null, "毛鼻鲶" ], [ 78, "3A948C2D", null, null, 10179, null, 0, null, "尖吻鲈" ], [ 79, "1A1960EC", null, null, 10180, null, 0, null, "蓝鳍金枪鱼" ], [ 80, "137C3DFC", null, null, 10181, null, 0, null, "大眼鲤鱼" ], [ 81, "3517B1C8", null, null, 10182, null, 0, null, "大口副鲈" ], [ 82, "1B7F2A56", null, null, 10183, null, 0, null, "皇带鱼" ], [ 83, "0F885A8D", null, null, 10184, null, 0, null, "鲸鱼" ], [ 84, "033F8BC7", null, null, 10185, null, 0, null, "孔雀鱼" ], [ 85, "2BBA0926", null, null, 10186, null, 0, null, "笛鲷" ], [ 86, "0115C5D2", null, null, 10187, null, 0, null, "平颌鱲" ], [ 87, "27471C8D", null, null, 10188, null, 0, null, "鲨鱼" ], [ 88, "3D53903B", null, null, 10189, null, 0, null, "樱花枝" ], [ 89, "3FC58217", null, null, 10190, null, 0, null, "咖啡" ], [ 90, "011F309B", null, null, 10191, null, 0, null, "女帽子" ], [ 91, "279B18E5", null, null, 10197, null, 0, null, "角色模型" ], [ 92, "2ED0380E", null, null, 10198, null, 0, null, "背带鲨鱼" ], [ 93, "0B82C187", null, null, 10199, null, 0, null, "埃及鲨鱼" ], [ 94, "222E5F2C", null, null, 10400, null, 0, null, "埃及章鱼" ], [ 95, "2B30B91A", null, null, 10401, null, 0, null, "埃及金鱼" ], [ 96, "13072EE6", null, null, 10402, null, 0, null, "天使章鱼" ], [ 97, "0EF164F2", null, null, 10403, null, 0, null, "嘟嘟嘴金鱼" ], [ 98, "0A1F52D5", null, null, 10404, null, 0, null, "嘟嘟嘴红金鱼" ], [ 99, "136497DE", null, null, 10405, null, 0, null, "灯笼鱼形态的宠物" ], [ 100, "3F965EAA", null, "172199", 10407, null, 0, null, "紫阳春剑" ], [ 101, "2EA2AC85", null, null, 10408, null, 0, null, "剑" ], [ 102, "218D8D42", null, null, 10409, null, 0, null, "大剑" ], [ 103, "08BA2210", null, null, 10410, null, 0, null, "樱花枝" ], [ 104, "209DADD3", null, null, 10411, null, 0, null, "樱花枝" ], [ 105, "26F28CC5", null, null, 10427, null, 0, null, "卡通小人" ], [ 106, "080EB5B4", null, null, 10428, null, 0, null, "甜品店吉祥物" ], [ 107, "050F3F49", null, null, 10122, null, 0, null, "汉堡" ], [ 108, "103D03C0", null, null, 10123, null, 0, null, "羊奶" ], [ 109, "2083D818", null, null, 10124, null, 0, null, "面包" ], [ 110, "10A78A34", null, null, 10125, null, 0, null, "面包" ], [ 111, "2A879D5B", null, null, 10127, null, 0, null, "饮料" ], [ 112, "1A5C96B8", null, null, 10128, null, 0, null, "饮料" ], [ 113, "004E4C1F", null, null, 10129, null, 0, null, "饮料" ], [ 114, "1C676A4A", null, null, 10131, null, 0, null, "酒" ], [ 115, "2300CB9F", null, null, 10133, null, 0, null, "奶昔" ], [ 116, "214CD6A8", null, null, 10134, null, 0, null, "冰淇淋" ], [ 117, "2B6173AC", null, null, 10138, null, 0, null, "烧烤" ], [ 118, "192EEF1B", null, null, 10141, null, 0, null, "奶茶" ], [ 119, "129123ED", null, null, 10143, null, 0, null, "猫粮" ], [ 120, "2DDFA879", null, null, 10154, null, 0, null, "蛋糕" ], [ 121, "1F5D16DF", null, "23116", 10157, null, 0, null, "一盘蛋糕" ], [ 122, "2DBA3007", null, null, 10159, null, 0, null, "咖啡" ], [ 123, "11DE3617", null, null, 10162, null, 0, null, "清酒" ], [ 124, "1F8B4506", null, null, 10163, null, 0, null, "清酒" ], [ 125, "1D2C18D1", null, null, 20002, null, 0, null, "火焰翅膀" ], [ 126, "2916ADF8", null, null, 20004, null, 0, null, "翅膀" ], [ 127, "06C9F1FE", null, null, 20006, null, 0, null, "翅膀" ], [ 128, "142E03ED", null, null, 20008, null, 0, null, "翅膀" ], [ 129, "26D884D0", null, null, 20010, null, 0, null, "双层翅膀" ], [ 130, "1145F838", null, null, 20012, null, 0, null, "翅膀" ], [ 131, "0DA363C5", null, null, 20014, null, 0, null, "翅膀" ], [ 132, "18F12461", null, null, 20016, null, 0, null, "翅膀" ], [ 133, "09A98640", null, null, 20018, null, 0, null, "翅膀" ], [ 134, "29259717", null, null, 20020, null, 0, null, "翅膀" ], [ 135, "18263521", null, null, 20022, null, 0, null, "翅膀" ], [ 136, "2FEA3789", null, null, 20024, null, 0, null, "翅膀" ], [ 137, "014FF45D", null, null, 20026, null, 0, null, "翅膀" ], [ 138, "0405BC9D", null, null, 20028, null, 0, null, "翅膀" ], [ 139, "094A02FA", null, null, 20030, null, 0, null, "翅膀" ], [ 140, "299D82EF", null, null, 20032, null, 0, null, "翅膀" ], [ 141, "3FAFE6CC", null, null, 20034, null, 0, null, "翅膀" ], [ 142, "2AD6A4AE", null, null, 20036, null, 0, null, "翅膀" ], [ 143, "36C39B14", null, null, 20038, null, 0, null, "翅膀" ], [ 144, "3522E74F", null, null, 20040, null, 0, null, "翅膀" ], [ 145, "2FE7B16D", null, null, 20042, null, 0, null, "翅膀" ], [ 146, "37DAF393", null, null, 20044, null, 0, null, "翅膀" ], [ 147, "3E372B7B", null, null, 20046, null, 0, null, "六翼翅膀" ], [ 148, "2C44780B", null, null, 20048, null, 0, null, "翅膀" ], [ 149, "3BE2742B", null, null, 20050, null, 0, null, "翅膀" ], [ 150, "2D5EE2BA", null, null, 20052, null, 0, null, "翅膀" ], [ 151, "21667B97", null, null, 20054, null, 0, null, "翅膀" ], [ 152, "1BA1097C", null, null, 20056, null, 0, null, "翅膀" ], [ 153, "01DAA052", null, null, 20058, null, 0, null, "翅膀" ], [ 154, "0079B931", null, null, 20060, null, 0, null, "翅膀" ], [ 155, "0A6CF066", null, null, 20062, null, 0, null, "火焰翅膀" ], [ 156, "0170FAC5", "10EE2A0C", null, 30002, null, 0, null, "烟花筒" ], [ 157, "26A8A892", null, null, 30004, null, 0, null, "炮弹" ], [ 158, "17A75E0B", "11FC9E63", null, 30006, null, 0, null, "烟花筒" ], [ 159, "00C80687", "009A5BCB", null, 30008, null, 0, null, "烟花筒" ], [ 160, "35CFC979", "0BABC56F", null, 30010, null, 0, null, "烟花筒" ], [ 161, "282879EE", "086F059A", null, 30012, null, 0, null, "烟花筒" ], [ 162, "1348916C", "2CE0DFEA", null, 30014, null, 0, null, "烟花筒" ], [ 163, "14BC2A1E", "1C4054BD", null, 30016, null, 0, null, "烟花筒" ], [ 164, "351C315A", "0C3BA4A7", null, 30018, null, 0, null, "烟花筒" ], [ 165, "1851FD98", "2BF65CD0", null, 30020, null, 0, null, "烟花筒" ], [ 166, "0BC4E95E", "1FBB9B3D", null, 30022, null, 0, null, "烟花筒" ], [ 167, "1926D26C", "1AD6F243", null, 30024, null, 0, null, "烟花筒" ], [ 168, "3BE44928", "0CA04CBA", null, 30026, null, 0, null, "烟花筒" ], [ 169, "3731FC4C", "1E7500AE", null, 30028, null, 0, null, "烟花筒" ], [ 170, "2AB82CCF", "0DEDEC96", null, 30030, null, 0, null, "烟花筒" ], [ 171, "23E53611", "29469B64", null, 30032, null, 0, null, "烟花筒" ], [ 172, "09D6F64A", "038E0DE6", null, 30034, null, 0, null, "烟花筒" ], [ 173, "21EBA335", "02D1FC4B", null, 30036, null, 0, null, "烟花筒" ], [ 174, "0AEFD6F9", "1C1338D2", null, 30038, null, 0, null, "烟花筒" ], [ 175, "2CEB6159", "0F8364EB", null, 30040, null, 0, null, "烟花筒" ], [ 176, "3B8E291C", "2B16F449", null, 30042, null, 0, null, "烟花筒" ], [ 177, "0942A9BF", "2A1D15C4", null, 30044, null, 0, null, "烟花筒" ], [ 178, "0C77E34B", "2D266A62", null, 30046, null, 0, null, "炮竹" ], [ 179, "03AABEC8", "19765D9B", null, 30048, null, 0, null, "炮竹" ], [ 180, "0BAE4938", "224D3EAB", null, 30050, null, 0, null, "炮竹" ], [ 181, "2072060C", "2B5E0169", null, 30052, null, 0, null, "炮竹" ], [ 182, "125FDADA", "2BDB0504", null, 30054, null, 0, null, "炮竹" ], [ 183, "0CEBF7F6", "0972F491", null, 30056, null, 0, null, "炮竹" ], [ 184, "0CBA3B39", "03CA58A6", null, 30058, null, 0, null, "炮竹" ], [ 185, "3C02005B", "3846CB30", null, 30060, null, 0, null, "炮竹" ], [ 186, "197982A9", "249786AD", null, 30062, null, 0, null, "炮竹" ], [ 187, "0C2A81EC", "22179468", null, 30064, null, 0, null, "炮竹" ], [ 188, "385D9FB5", "04B8B96E", null, 30066, null, 0, null, "炮竹" ], [ 189, "3684FDBA", "3DCE0055", null, 30068, null, 0, null, "炮竹" ], [ 190, "30776600", "05A9EE0A", null, 30070, null, 0, null, "炮竹" ], [ 191, "2FE9605C", "069FA242", null, 30072, null, 0, null, "炮竹" ], [ 192, "3E3F8384", "38A2E844", null, 30074, null, 0, null, "炮竹" ], [ 193, "2897C252", null, null, 60001, null, 0, null, "滑板" ], [ 194, "0B49E4CA", null, null, 60002, null, 0, null, "滑板2" ], [ 195, "046CC428", null, null, 60003, null, 0, null, "滑板3" ], [ 196, "15F06D91", null, null, 60004, null, 0, null, "冲浪板" ], [ 197, "33053BEF", null, null, 60005, null, 0, null, "冲浪板_1" ], [ 198, "0074DBFD", null, null, 60006, null, 0, null, "自行车" ], [ 199, "182128DB", null, null, 60007, null, 0, null, "自行车1" ], [ 200, "2A6DF1E4", null, "159590", 60008, null, 0, null, "花猪" ], [ 201, "17410470", null, "160319", 60009, null, 0, null, "狗儿子" ], [ 202, "0A5C1D80", null, "174968", 60010, null, 0, null, "彩虹马" ], [ 203, "071E50F6", null, "159933", 60011, null, 0, null, "熊猫" ], [ 204, "08EF9811", null, "160634", 60012, null, 0, null, "小龙" ], [ 205, "3A194CF5", null, null, 60013, null, 0, null, "御剑" ], [ 206, "300D2EC9", null, null, 60014, null, 0, null, "鱼" ], [ 207, null, null, null, 0, "39AB2FB0", 2, "151060", "冲浪板" ], [ 208, null, null, null, 0, "254A21DD", 3, "151060", "冲浪板" ], [ 209, null, null, null, 0, "31DE1825", 7, "151060", "鱼" ], [ 210, null, null, null, 0, "0A031A75", 8, "151060", "滑板" ] ];

class InteractConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$y);
    }
}

var foreign46 = Object.freeze({
    __proto__: null,
    InteractConfig: InteractConfig
});

const EXCELDATA$x = [ [ "ID", "Name", "Value", "Value_Ch" ], [ "", "Key|ReadByName", "MainLanguage", "ChildLanguage" ], [ 1, "Text_TheItemBarIsFull", "The item bar is full", "道具栏已满" ], [ 2, "Text_ThisItemIsInUse", "This item is in use", "正在使用此道具" ], [ 3, "Text_Tips1", "Someone is using it, please try another one", "有人正在使用，请换个试试" ], [ 4, "Text_SetUp1", "Base Setup", "基础设置" ], [ 5, "Text_PictureQuality", "Picture Quality", "画质" ], [ 6, "Text_SoundEffects", "Sound Effects", "音效" ], [ 7, "Text_BackgroundMusic", "Background Music", "背景音乐" ], [ 8, "Text_ViewAngleScaling", "View Angle Scaling", "视角缩放" ], [ 9, "Text_DisplayNicknames", "Display Nicknames", "显示昵称" ], [ 10, "Text_ResetLocation", "Reset Location", "重置位置" ], [ 11, "Text_RestoringSettings", "Restoring Settings", "还原设置" ], [ 12, "Text_On", "ON", "开" ], [ 13, "Text_Off", "OFF", "关" ], [ 14, "Text_ObtainedTips", "Obtained, open the knapsack to use", "已获得，打开背包使用" ], [ 15, "Text_Advertising", "Advertising", "广告奖励" ], [ 16, "Text_ADGetTips", "See the AD for free guide you get", "看广告免费指引你获得" ], [ 17, "Text_Dont", "Don't", "不要" ], [ 18, "Text_Free", "free", "免费获得" ], [ 19, "Text_Fail", "Fail", "指引失败，请重试" ], [ 20, "Text_NoOnTheList", "Not", "未上榜" ], [ 21, "Text_Ranking", "Ranking", "排名" ], [ 22, "Text_Nickname", "Nickname", "昵称" ], [ 23, "Text_Score", "Score", "分数" ], [ 24, "Text_Duration", "Duration", "时长" ], [ 25, "Text_TopInTermsOfDuration", "Top {0} In Terms Of Duration", "时长全服前{0}名" ], [ 26, "Text_StartGame", "Start the game", "开始游戏" ], [ 27, "Text_WelcomeTo", "Welcome to\nMy Cherry blossom town", "欢迎来到\n樱花换装派对" ], [ 28, "Text_UpNext", "Up next", "下一个" ], [ 29, "Text_GuideEnd", "With the guide over, start your trip to the cherry blossom town", "引导结束，开启你的樱花小镇之旅吧" ], [ 30, "Text_Close", "Close", "关闭" ], [ 31, "Text_MyCharacterId", "My Character ID- Share Friend Try On", "我的角色ID-分享好友试穿" ], [ 32, "Text_PleaseEnter", "Please Enter The Friend Role ID", "请输入好友角色ID" ], [ 33, "Text_Cancel", "Cancel", "取消" ], [ 34, "Text_FreeTryOn", "Free Try On", "免费试穿" ], [ 35, "Text_SaveImagesForFree", "Save images for free", "免费保存形象" ], [ 36, "Text_TryOnYourFriendAvatarForFree", "Try On Your Friend's Avatar For Free", "免费试穿好友的角色形象" ], [ 37, "Text_CopySuccessfully", "Copy Successfully", "复制成功" ], [ 38, "Text_InvalidID", "Invalid ID!", "ID无效！" ], [ 39, "Text_Loading", "Loading", "加载中" ], [ 40, "Text_TryItOnSuccessfully", "Try it on successfully", "试穿成功" ], [ 41, "Text_CopyTheCharacterIDShareFriendsTryOn", "Copy the character ID share friends try on", "复制角色ID分享好友试穿" ], [ 42, "Text_TryItOnForFree", "Try it on for free", "看广告免费试穿" ], [ 43, "Text_GuideTips", "Reach near the target point", "达到目标点附近" ], [ 44, "Text_BootPrompt", "Boot prompt", "引导提示" ], [ 45, "Text_FreeGuideYouGet", "Free guide you get", "免费指引你获得" ], [ 46, "Text_SignIn_1", "Activity is not enabled", "活动未开启" ], [ 47, "Text_SignIn_2", "Successful costume change", "换装成功" ], [ 48, "Text_SignIn_3", "Insufficient check-in time", "签到时间不足" ], [ 49, "Text_SignIn_4", "Check-in bonus", "签到奖励" ], [ 50, "Text_SignIn_5", "Cumulative Check-In For {0} Days", "已经累积签到{0}天" ], [ 51, "Text_SignIn_6", "Has been \nObtained", "已获得" ], [ 52, "Text_SignIn_7", "Change of dress", "换装" ], [ 53, "Text_SignIn_8", "Insufficient check-in", "签到不足" ], [ 54, "Text_SignIn_9", "Day {0}", "第{0}天" ], [ 55, "Text_SignIn_10", "Sign In", "签到" ], [ 56, "Text_OpenMallTextBlock", "Free change of clothes", "免费换装" ], [ 57, "Text_FreeChangeOfClothes1", "Try on, please wait patiently.", "试穿中，请耐心等待。" ], [ 58, "Text_FreeChangeOfClothes2", "Free fitting {0} minutes", "免费试穿{0}分钟" ], [ 59, "Text_FreeChangeOfClothes3", "Try it on, please go back to try it on", "试穿结束，请打开商店重新试穿" ], [ 60, "Text_Rank1", "The leaderboard is wrong.", "排行榜出错啦" ], [ 61, "Text_Tab1_1", "Appearance", "捏脸" ], [ 62, "Text_Tab1_2", "Clothing", "换装" ], [ 63, "Text_Tab1_3", "Collection", "保存穿搭" ], [ 64, "Text_Tab1_4", "Test", "测试" ], [ 65, "Text_Tab2_101", "Body Type", "体型" ], [ 66, "Text_Tab2_102", "Skin Tone", "肤色" ], [ 67, "Text_Tab2_103", "Face", "脸型" ], [ 68, "Text_Tab2_104", "Eyes", "眼睛" ], [ 69, "Text_Tab2_105", "Eyebrows", "眉毛" ], [ 70, "Text_Tab2_106", "Makeup", "妆容" ], [ 71, "Text_Tab2_107", "Expression", "表情" ], [ 72, "Text_Tab2_108", "Outfit", "套装" ], [ 73, "Text_Tab2_109", "Hair", "头发" ], [ 74, "Text_Tab2_110", "Top", "上衣" ], [ 75, "Text_Tab2_111", "Bottom", "下衣" ], [ 76, "Text_Tab2_112", "Gloves", "鞋子" ], [ 77, "Text_Tab2_113", "Shoes", "手套" ], [ 78, "Text_Tab2_114", "Pet", "宠物" ], [ 79, "Text_Tab2_115", "Accessory", "饰品" ], [ 80, "Text_Tab2_501", "Body Type", "体型", "收藏" ], [ 81, "Text_Tab2_502", "Skin Tone", "肤色", "收藏" ], [ 82, "Text_Tab2_503", "Face", "脸型", "收藏" ], [ 83, "Text_Tab2_504", "Eyes", "眼睛", "收藏" ], [ 84, "Text_Tab2_505", "Eyebrows", "眉毛", "收藏" ], [ 85, "Text_Tab2_506", "Makeup", "妆容", "收藏" ], [ 86, "Text_Tab2_507", "Expression", "表情", "收藏" ], [ 87, "Text_Tab2_508", "Outfit", "套装", "收藏" ], [ 88, "Text_Tab2_509", "Hair", "头发", "收藏" ], [ 89, "Text_Tab2_510", "Top", "上衣", "收藏" ], [ 90, "Text_Tab2_511", "Bottom", "下衣", "收藏" ], [ 91, "Text_Tab2_512", "Gloves", "鞋子", "收藏" ], [ 92, "Text_Tab2_513", "Shoes", "手套", "收藏" ], [ 93, "Text_Tab2_514", "Pet", "宠物", "收藏" ], [ 94, "Text_Tab2_515", "Accessory", "饰品", "收藏" ], [ 95, "Text_Tab3_1001", "Pupil Style", "瞳孔样式" ], [ 96, "Text_Tab3_1002", "Lens", "瞳孔贴花" ], [ 97, "Text_Tab3_1003", "Upper Highlight", "上高光" ], [ 98, "Text_Tab3_1004", "Lower Highlight", "下高光" ], [ 99, "Text_Tab3_1005", "Eyelashes", "睫毛" ], [ 100, "Text_Tab3_1006", "Eyeshadow", "眼影" ], [ 101, "Text_Tab3_1007", "Blush", "腮红" ], [ 102, "Text_Tab3_1008", "Lip Makeup", "口红" ], [ 103, "Text_Tab3_1009", "Face Tattoo", "面部彩绘" ], [ 104, "Text_Tab3_1010", "Full Hair", "整体发型" ], [ 105, "Text_Tab3_1011", "Front Hair", "前发" ], [ 106, "Text_Tab3_1012", "Back Hair", "后发" ], [ 107, "Text_Tab3_1013", "Left Hand", "左手" ], [ 108, "Text_Tab3_1014", "Right Hand", "右手" ], [ 109, "Text_Tab3_1015", "Back", "背饰" ], [ 110, "Text_Tab3_1016", "Head", "头饰" ], [ 111, "Text_Tab3_1017", "Face", "面饰" ], [ 112, "Text_Tab3_1018", "Hip", "臀部" ], [ 113, "Text_Tab3_1019", "Shoulder", "肩部" ], [ 114, "Text_Tab3_1020", "Effects", "特效" ], [ 115, "Text_Tab3_2001", "Pupil Style", "瞳孔样式", "收藏" ], [ 116, "Text_Tab3_2002", "Lens", "瞳孔贴花", "收藏" ], [ 117, "Text_Tab3_2003", "Upper Highlight", "上高光", "收藏" ], [ 118, "Text_Tab3_2004", "Lower Highlight", "下高光", "收藏" ], [ 119, "Text_Tab3_2005", "Eyelashes", "睫毛", "收藏" ], [ 120, "Text_Tab3_2006", "Eyeshadow", "眼影", "收藏" ], [ 121, "Text_Tab3_2007", "Blush", "腮红", "收藏" ], [ 122, "Text_Tab3_2008", "Lip Makeup", "口红", "收藏" ], [ 123, "Text_Tab3_2009", "Face Tattoo", "面部彩绘", "收藏" ], [ 124, "Text_Tab3_2010", "Full Hair", "整体发型", "收藏" ], [ 125, "Text_Tab3_2011", "Front Hair", "前发", "收藏" ], [ 126, "Text_Tab3_2012", "Back Hair", "后发", "收藏" ], [ 127, "Text_Tab3_2013", "Left Hand", "左手", "收藏" ], [ 128, "Text_Tab3_2014", "Right Hand", "右手", "收藏" ], [ 129, "Text_Tab3_2015", "Back", "背饰", "收藏" ], [ 130, "Text_Tab3_2016", "Ear", "耳饰", "收藏" ], [ 131, "Text_Tab3_2017", "Face", "面饰", "收藏" ], [ 132, "Text_Tab3_2018", "Hip", "臀部", "收藏" ], [ 133, "Text_Tab3_2019", "Shoulder", "肩部", "收藏" ], [ 134, "Text_Tab3_2020", "Effects", "特效", "收藏" ], [ 135, "Text_OpenClothTextBlock", "Shop", "换装商店" ], [ 136, "Text_MallItem_Free", "Free", "免费" ], [ 137, "Text_ThisFeatureIsNotEnabled", "This feature is not enabled", "此功能未开启" ], [ 138, "Text_BodyTypeDescribe", "{0} times", "{0}倍" ], [ 139, "Text_Expression_Default", "Default", "默认表情" ], [ 140, "Text_Expression_Smile", "Smile", "微笑" ], [ 141, "Text_Expression_HaveFun", "Have Fun", "开心" ], [ 142, "Text_Expression_Sad", "Sad", "伤心" ], [ 143, "Text_Expression_GetAngry", "Get Angry", "生气" ], [ 144, "Text_Expression_Embarrassment", "Embarrassment", "尴尬" ], [ 145, "Text_Expression_Laugh", "Laugh", "笑" ], [ 146, "Text_Expression_BeNaughty", "Be Naughty", "调皮" ], [ 147, "Text_Expression_Cute", "Cute", "可爱" ], [ 148, "Text_Expression_Doubt", "Doubt", "疑惑" ], [ 149, "Text_Tab3_1021", "Trailing", "拖尾" ], [ 150, "Text_Tab3_2021", "Trailing", "拖尾", "收藏" ], [ 151, "Text_ColorPick", "Color Pick", "调色板" ], [ 152, "Text_ColorPart", "Part {0}", "部位 {0}" ], [ 153, "Text_NotSupportToning", "This {0} Does Not Support Toning", "这个{0}不支持调色" ], [ 154, "Text_PupilColor", "Pupil Color", "瞳孔颜色" ], [ 155, "Text_LeftPupilColor", "Left Pupil Color", "左瞳孔颜色" ], [ 156, "Text_RightPupilColor", "Right Pupil Color", "右瞳孔颜色" ], [ 157, "Text_DecalColor", "Decal Color", "贴花颜色" ], [ 158, "Text_UpperHighlightColor", "Upper Highlight Color", "上高光颜色" ], [ 159, "Text_LowerHighlightColor", "Lower Highlight Color", "下高光颜色" ], [ 160, "Text_EyelashColor", "Eyelash Color", "睫毛颜色" ], [ 161, "Text_EyeshaowColor", "Eyeshaow Color", "眼影颜色" ], [ 162, "Text_BlushColor", "Blush Color", "腮红颜色" ], [ 163, "Text_LipstickColor", "Lipstick Color", "口红颜色" ], [ 164, "Text_Monochrome", "Monochrome", "单色" ], [ 165, "Text_TopColor", "Top Color", "发顶色" ], [ 166, "Text_TailColor", "Tail Color", "发尾色" ], [ 167, "Text_FreeSave", "Free Save", "免费保存" ], [ 168, "Text_ResetImage", "Reset Image", "重置平台形象" ], [ 169, "Text_ResetImageFaild", "Failed to reset platform image", "重置平台形象失败" ], [ 170, "Text_SaveColor", "Save {0} Color", "保存{0}颜色" ], [ 171, "Text_SaveTips", "Save Tips", "保存提示" ], [ 172, "Text_Save", "Save", "保存" ], [ 173, "Text_NoSave", "No Save", "不保存" ], [ 174, "Text_WhetherSaveImage", "Whether Save Image", "是否保存当前角色形象" ], [ 175, "Text_CloseTips", "Close Tips", "关闭提示" ], [ 176, "Text_SaveSuccessfully", "Save Successfully", "保存成功" ], [ 177, "Text_ResetSuccessfully", "Reset Successfully", "重置成功" ], [ 178, "Text_SwitchSuccessfully", "Switch Successfully", "切换成功" ], [ 179, "Text_WhetherToKeepTheCurrentColor", "Whether to keep the current color", "是否保留当前颜色" ], [ 180, "Text_Retain", "Retain", "保留" ], [ 181, "Text_NoRetain", "No Retain", "不保留" ], [ 182, "Text_Tab3_1022", "Daily Styling", "日常造型1" ], [ 183, "Text_Tab3_1023", "Muppet Styling", "布偶造型" ], [ 184, "Text_Tab3_1024", "Hero Styling", "英雄造型" ], [ 185, "Text_Tab3_1025", "Fantasy Modeling", "幻想造型" ], [ 186, "Text_Tab3_1026", "Holiday Styling", "节日造型" ], [ 187, "Text_Tab3_1027", "Science Fiction Styling", "科幻造型" ], [ 188, "Text_Tab3_1028", "Ancient Molding", "古代造型" ], [ 189, "Text_Tab3_1029", "Long Piece", "长单件" ], [ 190, "Text_Tab3_1030", "Jacket", "短外套" ], [ 191, "Text_Tab3_1031", "Short Piece", "短单件" ], [ 192, "Text_Tab3_1032", "Outfit", "套装" ], [ 193, "Text_Tab3_1033", "Long Coat", "长外套" ], [ 194, "Text_Tab3_1034", "Kilt", "短裙" ], [ 195, "Text_Tab3_1035", "Trousers", "长裤" ], [ 196, "Text_Tab3_1036", "Shorts", "短裤" ], [ 197, "Text_Tab3_1037", "Long Dress", "长裙" ], [ 198, "Text_Tab3_1038", "Pantyhose", "裤袜" ], [ 199, "Text_Tab3_1039", "Gloves", "手套" ], [ 200, "Text_Tab3_1040", "Glove Accessory", "手套饰品" ], [ 201, "Text_Tab3_1041", "Everyday Shoes", "日常鞋" ], [ 202, "Text_Tab3_1042", "Boots", "靴子" ], [ 203, "Text_Tab3_1043", "Toe Brace", "足套" ], [ 204, "Text_Tab3_1044", "Nudity", "裸饰" ], [ 205, "Text_Tab3_1045", "High Heeled Shoes", "高跟鞋" ], [ 206, "Text_Tab3_1046", "Sneakers", "运动鞋" ], [ 207, "Text_Tab3_1047", "Daily Styling", "日常造型2" ], [ 208, "Text_HUDPanelTips1", null, "服装签到" ], [ 209, "Text_HUDPanelTips2", null, "试穿排行榜" ], [ 210, "Text_HUDPanelTips3", null, "全服排行榜" ], [ 211, "Text_HUDPanelTips4", null, "设置" ], [ 212, "Text_HUDPanelTips5", null, "免费换装" ], [ 213, "Text_HUDPanelTips6", null, "换装商店" ], [ 214, "Text_HUDPanelTips7", null, "背景音乐" ], [ 215, "Text_TryOnTips1", null, "排名" ], [ 216, "Text_TryOnTips2", null, "昵称" ], [ 217, "Text_TryOnTips3", null, "被试穿次数" ], [ 218, "Text_TryOnTips4", null, "试穿好友形象" ], [ 219, "Text_TryOnTips5", null, "自己的形象" ], [ 220, "Text_TryOnTips6", null, "试穿失败、好友已离开房间" ], [ 221, "Text_TryOnTips7", null, "换个好友试试吧" ], [ 222, "Text_TryOnTips8", null, "试穿失败、好友服装不规范" ], [ 223, "Text_TryOnTips9", null, "被好友试穿权限" ], [ 224, "Text_TryOnTips10", null, "允许" ], [ 225, "Text_TryOnTips11", null, "不允许" ], [ 226, "Text_TryOnTips12", null, "好友试穿权限已关闭，不允许试穿" ], [ 227, "Text_Tab3_1048", "Pet", "灵宠" ], [ 228, "Text_SaveSuccefully", "Save Succefully", "保存穿搭成功" ], [ 229, "Text_SaveCurrentCharacter", null, "保存当前穿搭\n（{0}/{1}）" ], [ 230, "Text_MaxSaveCount", null, "最多只能保存{0}个" ], [ 231, "Text_DeleteSucceed", null, "删除成功" ] ];

class LanguageConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$x);
    }
    get Text_TheItemBarIsFull() {
        return this.getElement(1);
    }
    get Text_ThisItemIsInUse() {
        return this.getElement(2);
    }
    get Text_Tips1() {
        return this.getElement(3);
    }
    get Text_SetUp1() {
        return this.getElement(4);
    }
    get Text_PictureQuality() {
        return this.getElement(5);
    }
    get Text_SoundEffects() {
        return this.getElement(6);
    }
    get Text_BackgroundMusic() {
        return this.getElement(7);
    }
    get Text_ViewAngleScaling() {
        return this.getElement(8);
    }
    get Text_DisplayNicknames() {
        return this.getElement(9);
    }
    get Text_ResetLocation() {
        return this.getElement(10);
    }
    get Text_RestoringSettings() {
        return this.getElement(11);
    }
    get Text_On() {
        return this.getElement(12);
    }
    get Text_Off() {
        return this.getElement(13);
    }
    get Text_ObtainedTips() {
        return this.getElement(14);
    }
    get Text_Advertising() {
        return this.getElement(15);
    }
    get Text_ADGetTips() {
        return this.getElement(16);
    }
    get Text_Dont() {
        return this.getElement(17);
    }
    get Text_Free() {
        return this.getElement(18);
    }
    get Text_Fail() {
        return this.getElement(19);
    }
    get Text_NoOnTheList() {
        return this.getElement(20);
    }
    get Text_Ranking() {
        return this.getElement(21);
    }
    get Text_Nickname() {
        return this.getElement(22);
    }
    get Text_Score() {
        return this.getElement(23);
    }
    get Text_Duration() {
        return this.getElement(24);
    }
    get Text_TopInTermsOfDuration() {
        return this.getElement(25);
    }
    get Text_StartGame() {
        return this.getElement(26);
    }
    get Text_WelcomeTo() {
        return this.getElement(27);
    }
    get Text_UpNext() {
        return this.getElement(28);
    }
    get Text_GuideEnd() {
        return this.getElement(29);
    }
    get Text_Close() {
        return this.getElement(30);
    }
    get Text_MyCharacterId() {
        return this.getElement(31);
    }
    get Text_PleaseEnter() {
        return this.getElement(32);
    }
    get Text_Cancel() {
        return this.getElement(33);
    }
    get Text_FreeTryOn() {
        return this.getElement(34);
    }
    get Text_SaveImagesForFree() {
        return this.getElement(35);
    }
    get Text_TryOnYourFriendAvatarForFree() {
        return this.getElement(36);
    }
    get Text_CopySuccessfully() {
        return this.getElement(37);
    }
    get Text_InvalidID() {
        return this.getElement(38);
    }
    get Text_Loading() {
        return this.getElement(39);
    }
    get Text_TryItOnSuccessfully() {
        return this.getElement(40);
    }
    get Text_CopyTheCharacterIDShareFriendsTryOn() {
        return this.getElement(41);
    }
    get Text_TryItOnForFree() {
        return this.getElement(42);
    }
    get Text_GuideTips() {
        return this.getElement(43);
    }
    get Text_BootPrompt() {
        return this.getElement(44);
    }
    get Text_FreeGuideYouGet() {
        return this.getElement(45);
    }
    get Text_SignIn_1() {
        return this.getElement(46);
    }
    get Text_SignIn_2() {
        return this.getElement(47);
    }
    get Text_SignIn_3() {
        return this.getElement(48);
    }
    get Text_SignIn_4() {
        return this.getElement(49);
    }
    get Text_SignIn_5() {
        return this.getElement(50);
    }
    get Text_SignIn_6() {
        return this.getElement(51);
    }
    get Text_SignIn_7() {
        return this.getElement(52);
    }
    get Text_SignIn_8() {
        return this.getElement(53);
    }
    get Text_SignIn_9() {
        return this.getElement(54);
    }
    get Text_SignIn_10() {
        return this.getElement(55);
    }
    get Text_OpenMallTextBlock() {
        return this.getElement(56);
    }
    get Text_FreeChangeOfClothes1() {
        return this.getElement(57);
    }
    get Text_FreeChangeOfClothes2() {
        return this.getElement(58);
    }
    get Text_FreeChangeOfClothes3() {
        return this.getElement(59);
    }
    get Text_Rank1() {
        return this.getElement(60);
    }
    get Text_Tab1_1() {
        return this.getElement(61);
    }
    get Text_Tab1_2() {
        return this.getElement(62);
    }
    get Text_Tab1_3() {
        return this.getElement(63);
    }
    get Text_Tab1_4() {
        return this.getElement(64);
    }
    get Text_Tab2_101() {
        return this.getElement(65);
    }
    get Text_Tab2_102() {
        return this.getElement(66);
    }
    get Text_Tab2_103() {
        return this.getElement(67);
    }
    get Text_Tab2_104() {
        return this.getElement(68);
    }
    get Text_Tab2_105() {
        return this.getElement(69);
    }
    get Text_Tab2_106() {
        return this.getElement(70);
    }
    get Text_Tab2_107() {
        return this.getElement(71);
    }
    get Text_Tab2_108() {
        return this.getElement(72);
    }
    get Text_Tab2_109() {
        return this.getElement(73);
    }
    get Text_Tab2_110() {
        return this.getElement(74);
    }
    get Text_Tab2_111() {
        return this.getElement(75);
    }
    get Text_Tab2_112() {
        return this.getElement(76);
    }
    get Text_Tab2_113() {
        return this.getElement(77);
    }
    get Text_Tab2_114() {
        return this.getElement(78);
    }
    get Text_Tab2_115() {
        return this.getElement(79);
    }
    get Text_Tab2_501() {
        return this.getElement(80);
    }
    get Text_Tab2_502() {
        return this.getElement(81);
    }
    get Text_Tab2_503() {
        return this.getElement(82);
    }
    get Text_Tab2_504() {
        return this.getElement(83);
    }
    get Text_Tab2_505() {
        return this.getElement(84);
    }
    get Text_Tab2_506() {
        return this.getElement(85);
    }
    get Text_Tab2_507() {
        return this.getElement(86);
    }
    get Text_Tab2_508() {
        return this.getElement(87);
    }
    get Text_Tab2_509() {
        return this.getElement(88);
    }
    get Text_Tab2_510() {
        return this.getElement(89);
    }
    get Text_Tab2_511() {
        return this.getElement(90);
    }
    get Text_Tab2_512() {
        return this.getElement(91);
    }
    get Text_Tab2_513() {
        return this.getElement(92);
    }
    get Text_Tab2_514() {
        return this.getElement(93);
    }
    get Text_Tab2_515() {
        return this.getElement(94);
    }
    get Text_Tab3_1001() {
        return this.getElement(95);
    }
    get Text_Tab3_1002() {
        return this.getElement(96);
    }
    get Text_Tab3_1003() {
        return this.getElement(97);
    }
    get Text_Tab3_1004() {
        return this.getElement(98);
    }
    get Text_Tab3_1005() {
        return this.getElement(99);
    }
    get Text_Tab3_1006() {
        return this.getElement(100);
    }
    get Text_Tab3_1007() {
        return this.getElement(101);
    }
    get Text_Tab3_1008() {
        return this.getElement(102);
    }
    get Text_Tab3_1009() {
        return this.getElement(103);
    }
    get Text_Tab3_1010() {
        return this.getElement(104);
    }
    get Text_Tab3_1011() {
        return this.getElement(105);
    }
    get Text_Tab3_1012() {
        return this.getElement(106);
    }
    get Text_Tab3_1013() {
        return this.getElement(107);
    }
    get Text_Tab3_1014() {
        return this.getElement(108);
    }
    get Text_Tab3_1015() {
        return this.getElement(109);
    }
    get Text_Tab3_1016() {
        return this.getElement(110);
    }
    get Text_Tab3_1017() {
        return this.getElement(111);
    }
    get Text_Tab3_1018() {
        return this.getElement(112);
    }
    get Text_Tab3_1019() {
        return this.getElement(113);
    }
    get Text_Tab3_1020() {
        return this.getElement(114);
    }
    get Text_Tab3_2001() {
        return this.getElement(115);
    }
    get Text_Tab3_2002() {
        return this.getElement(116);
    }
    get Text_Tab3_2003() {
        return this.getElement(117);
    }
    get Text_Tab3_2004() {
        return this.getElement(118);
    }
    get Text_Tab3_2005() {
        return this.getElement(119);
    }
    get Text_Tab3_2006() {
        return this.getElement(120);
    }
    get Text_Tab3_2007() {
        return this.getElement(121);
    }
    get Text_Tab3_2008() {
        return this.getElement(122);
    }
    get Text_Tab3_2009() {
        return this.getElement(123);
    }
    get Text_Tab3_2010() {
        return this.getElement(124);
    }
    get Text_Tab3_2011() {
        return this.getElement(125);
    }
    get Text_Tab3_2012() {
        return this.getElement(126);
    }
    get Text_Tab3_2013() {
        return this.getElement(127);
    }
    get Text_Tab3_2014() {
        return this.getElement(128);
    }
    get Text_Tab3_2015() {
        return this.getElement(129);
    }
    get Text_Tab3_2016() {
        return this.getElement(130);
    }
    get Text_Tab3_2017() {
        return this.getElement(131);
    }
    get Text_Tab3_2018() {
        return this.getElement(132);
    }
    get Text_Tab3_2019() {
        return this.getElement(133);
    }
    get Text_Tab3_2020() {
        return this.getElement(134);
    }
    get Text_OpenClothTextBlock() {
        return this.getElement(135);
    }
    get Text_MallItem_Free() {
        return this.getElement(136);
    }
    get Text_ThisFeatureIsNotEnabled() {
        return this.getElement(137);
    }
    get Text_BodyTypeDescribe() {
        return this.getElement(138);
    }
    get Text_Expression_Default() {
        return this.getElement(139);
    }
    get Text_Expression_Smile() {
        return this.getElement(140);
    }
    get Text_Expression_HaveFun() {
        return this.getElement(141);
    }
    get Text_Expression_Sad() {
        return this.getElement(142);
    }
    get Text_Expression_GetAngry() {
        return this.getElement(143);
    }
    get Text_Expression_Embarrassment() {
        return this.getElement(144);
    }
    get Text_Expression_Laugh() {
        return this.getElement(145);
    }
    get Text_Expression_BeNaughty() {
        return this.getElement(146);
    }
    get Text_Expression_Cute() {
        return this.getElement(147);
    }
    get Text_Expression_Doubt() {
        return this.getElement(148);
    }
    get Text_Tab3_1021() {
        return this.getElement(149);
    }
    get Text_Tab3_2021() {
        return this.getElement(150);
    }
    get Text_ColorPick() {
        return this.getElement(151);
    }
    get Text_ColorPart() {
        return this.getElement(152);
    }
    get Text_NotSupportToning() {
        return this.getElement(153);
    }
    get Text_PupilColor() {
        return this.getElement(154);
    }
    get Text_LeftPupilColor() {
        return this.getElement(155);
    }
    get Text_RightPupilColor() {
        return this.getElement(156);
    }
    get Text_DecalColor() {
        return this.getElement(157);
    }
    get Text_UpperHighlightColor() {
        return this.getElement(158);
    }
    get Text_LowerHighlightColor() {
        return this.getElement(159);
    }
    get Text_EyelashColor() {
        return this.getElement(160);
    }
    get Text_EyeshaowColor() {
        return this.getElement(161);
    }
    get Text_BlushColor() {
        return this.getElement(162);
    }
    get Text_LipstickColor() {
        return this.getElement(163);
    }
    get Text_Monochrome() {
        return this.getElement(164);
    }
    get Text_TopColor() {
        return this.getElement(165);
    }
    get Text_TailColor() {
        return this.getElement(166);
    }
    get Text_FreeSave() {
        return this.getElement(167);
    }
    get Text_ResetImage() {
        return this.getElement(168);
    }
    get Text_ResetImageFaild() {
        return this.getElement(169);
    }
    get Text_SaveColor() {
        return this.getElement(170);
    }
    get Text_SaveTips() {
        return this.getElement(171);
    }
    get Text_Save() {
        return this.getElement(172);
    }
    get Text_NoSave() {
        return this.getElement(173);
    }
    get Text_WhetherSaveImage() {
        return this.getElement(174);
    }
    get Text_CloseTips() {
        return this.getElement(175);
    }
    get Text_SaveSuccessfully() {
        return this.getElement(176);
    }
    get Text_ResetSuccessfully() {
        return this.getElement(177);
    }
    get Text_SwitchSuccessfully() {
        return this.getElement(178);
    }
    get Text_WhetherToKeepTheCurrentColor() {
        return this.getElement(179);
    }
    get Text_Retain() {
        return this.getElement(180);
    }
    get Text_NoRetain() {
        return this.getElement(181);
    }
    get Text_Tab3_1022() {
        return this.getElement(182);
    }
    get Text_Tab3_1023() {
        return this.getElement(183);
    }
    get Text_Tab3_1024() {
        return this.getElement(184);
    }
    get Text_Tab3_1025() {
        return this.getElement(185);
    }
    get Text_Tab3_1026() {
        return this.getElement(186);
    }
    get Text_Tab3_1027() {
        return this.getElement(187);
    }
    get Text_Tab3_1028() {
        return this.getElement(188);
    }
    get Text_Tab3_1029() {
        return this.getElement(189);
    }
    get Text_Tab3_1030() {
        return this.getElement(190);
    }
    get Text_Tab3_1031() {
        return this.getElement(191);
    }
    get Text_Tab3_1032() {
        return this.getElement(192);
    }
    get Text_Tab3_1033() {
        return this.getElement(193);
    }
    get Text_Tab3_1034() {
        return this.getElement(194);
    }
    get Text_Tab3_1035() {
        return this.getElement(195);
    }
    get Text_Tab3_1036() {
        return this.getElement(196);
    }
    get Text_Tab3_1037() {
        return this.getElement(197);
    }
    get Text_Tab3_1038() {
        return this.getElement(198);
    }
    get Text_Tab3_1039() {
        return this.getElement(199);
    }
    get Text_Tab3_1040() {
        return this.getElement(200);
    }
    get Text_Tab3_1041() {
        return this.getElement(201);
    }
    get Text_Tab3_1042() {
        return this.getElement(202);
    }
    get Text_Tab3_1043() {
        return this.getElement(203);
    }
    get Text_Tab3_1044() {
        return this.getElement(204);
    }
    get Text_Tab3_1045() {
        return this.getElement(205);
    }
    get Text_Tab3_1046() {
        return this.getElement(206);
    }
    get Text_Tab3_1047() {
        return this.getElement(207);
    }
    get Text_HUDPanelTips1() {
        return this.getElement(208);
    }
    get Text_HUDPanelTips2() {
        return this.getElement(209);
    }
    get Text_HUDPanelTips3() {
        return this.getElement(210);
    }
    get Text_HUDPanelTips4() {
        return this.getElement(211);
    }
    get Text_HUDPanelTips5() {
        return this.getElement(212);
    }
    get Text_HUDPanelTips6() {
        return this.getElement(213);
    }
    get Text_HUDPanelTips7() {
        return this.getElement(214);
    }
    get Text_TryOnTips1() {
        return this.getElement(215);
    }
    get Text_TryOnTips2() {
        return this.getElement(216);
    }
    get Text_TryOnTips3() {
        return this.getElement(217);
    }
    get Text_TryOnTips4() {
        return this.getElement(218);
    }
    get Text_TryOnTips5() {
        return this.getElement(219);
    }
    get Text_TryOnTips6() {
        return this.getElement(220);
    }
    get Text_TryOnTips7() {
        return this.getElement(221);
    }
    get Text_TryOnTips8() {
        return this.getElement(222);
    }
    get Text_TryOnTips9() {
        return this.getElement(223);
    }
    get Text_TryOnTips10() {
        return this.getElement(224);
    }
    get Text_TryOnTips11() {
        return this.getElement(225);
    }
    get Text_TryOnTips12() {
        return this.getElement(226);
    }
    get Text_Tab3_1048() {
        return this.getElement(227);
    }
    get Text_SaveSuccefully() {
        return this.getElement(228);
    }
    get Text_SaveCurrentCharacter() {
        return this.getElement(229);
    }
    get Text_MaxSaveCount() {
        return this.getElement(230);
    }
    get Text_DeleteSucceed() {
        return this.getElement(231);
    }
}

var foreign47 = Object.freeze({
    __proto__: null,
    LanguageConfig: LanguageConfig
});

const EXCELDATA$w = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "单手刀", "334208", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, "星月魔杖", "291285", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, "散弹喷枪", "155702", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 4, "紫光剑", "304952", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, "弓箭", "304643", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, "星月魔杖", "304949", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, "法杖", "304953", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class LeftHandConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$w);
    }
}

var foreign48 = Object.freeze({
    __proto__: null,
    LeftHandConfig: LeftHandConfig
});

const EXCELDATA$v = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "291374", 0 ], [ 2, null, "291373", 0 ], [ 3, null, "291372", 0 ], [ 4, null, "291371", 0 ], [ 5, null, "291370", 0 ], [ 6, null, "291369", 0 ], [ 7, null, "291368", 0 ], [ 8, null, "291367", 0 ], [ 9, null, "291366", 0 ], [ 10, null, "291365", 0 ], [ 11, null, "291364", 0 ], [ 12, null, "291363", 0 ], [ 13, null, "291362", 0 ], [ 14, null, "291361", 0 ], [ 15, null, "291360", 0 ], [ 16, null, "291359", 0 ], [ 17, null, "291358", 0 ], [ 18, null, "291357", 0 ], [ 19, null, "291356", 0 ], [ 20, null, "291355", 0 ], [ 21, null, "291354", 0 ], [ 22, null, "291353", 0 ], [ 23, null, "291352", 0 ], [ 24, null, "291351", 0 ], [ 25, null, "291350", 0 ], [ 26, null, "291349", 0 ], [ 27, null, "291348", 0 ], [ 28, null, "291347", 0 ], [ 29, null, "291346", 0 ], [ 30, null, "291345", 0 ], [ 31, null, "291344", 0 ], [ 32, null, "291343", 0 ], [ 33, null, "291342", 0 ], [ 34, null, "291341", 0 ], [ 35, null, "291340", 0 ], [ 36, null, "270031", 0 ], [ 37, null, "228490", 0 ], [ 38, null, "193330", 0 ], [ 39, null, "193329", 0 ], [ 40, null, "193328", 0 ], [ 41, null, "185329", 0 ], [ 42, null, "116948", 0 ], [ 43, null, "116947", 0 ], [ 44, null, "116946", 0 ], [ 45, null, "116945", 0 ], [ 46, null, "116944", 0 ], [ 47, null, "116625", 0 ], [ 48, null, "115870", 0 ], [ 49, null, "115869", 0 ], [ 50, null, "112641", 0 ], [ 51, null, "112592", 0 ], [ 52, null, "109582", 0 ], [ 53, null, "108744", 0 ], [ 54, null, "108743", 0 ], [ 55, null, "108742", 0 ], [ 56, null, "100892", 0 ], [ 57, null, "98605", 0 ], [ 58, null, "77768", 0 ], [ 59, null, "77767", 0 ], [ 60, null, "77766", 0 ], [ 61, null, "77590", 0 ], [ 62, null, "77589", 0 ], [ 63, null, "77588", 0 ], [ 64, null, "77587", 0 ], [ 65, null, "77586", 0 ], [ 66, null, "77585", 0 ], [ 67, null, "77584", 0 ], [ 68, null, "77583", 0 ], [ 69, null, "77582", 0 ], [ 70, null, "77581", 0 ], [ 71, null, "77509", 0 ], [ 72, null, "77508", 0 ], [ 73, null, "77507", 0 ], [ 74, null, "77506", 0 ], [ 75, null, "77505", 0 ], [ 76, null, "77504", 0 ], [ 77, null, "77503", 0 ], [ 78, null, "77502", 0 ], [ 79, null, "77477", 0 ], [ 80, null, "77476", 0 ], [ 81, null, "77475", 0 ], [ 82, null, "77474", 0 ], [ 83, null, "77473", 0 ], [ 84, null, "77472", 0 ], [ 85, null, "77471", 0 ], [ 86, null, "77470", 0 ], [ 87, null, "77469", 0 ], [ 88, null, "77446", 0 ], [ 89, null, "77445", 0 ], [ 90, null, "77444", 0 ], [ 91, null, "68986", 0 ], [ 92, null, "68985", 0 ], [ 93, null, "68984", 0 ], [ 94, null, "48672", 0 ], [ 95, null, "48671", 0 ], [ 96, null, "48670", 0 ], [ 97, null, "48669", 0 ], [ 98, null, "48668", 0 ], [ 99, null, "48667", 0 ], [ 100, null, "48666", 0 ], [ 101, null, "48665", 0 ], [ 102, null, "48664", 0 ], [ 103, null, "48663", 0 ], [ 104, null, "32111", 0 ], [ 105, null, "32110", 0 ], [ 106, null, "32109", 0 ], [ 107, null, "32107", 0 ], [ 108, null, "32106", 0 ], [ 109, null, "32104", 0 ], [ 110, null, "32102", 0 ], [ 111, null, "32100", 0 ], [ 112, null, "32099", 0 ], [ 113, null, "32097", 0 ], [ 114, null, "32087", 0 ], [ 115, null, "32086", 0 ], [ 116, null, "32085", 0 ], [ 117, null, "32084", 0 ], [ 118, null, "32083", 0 ], [ 119, null, "22746", 0 ] ];

class LensConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$v);
    }
}

var foreign49 = Object.freeze({
    __proto__: null,
    LensConfig: LensConfig
});

const EXCELDATA$u = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "531767", 0 ], [ 2, null, "531766", 0 ], [ 3, null, "370253", 0 ], [ 4, null, "370242", 0 ], [ 5, null, "370241", 0 ], [ 6, null, "370240", 0 ], [ 7, null, "370238", 0 ], [ 8, null, "367137", 0 ], [ 9, null, "270030", 0 ], [ 10, null, "267300", 0 ], [ 11, null, "267297", 0 ], [ 12, null, "267289", 0 ], [ 13, null, "267288", 0 ], [ 14, null, "267286", 0 ], [ 15, null, "215818", 0 ], [ 16, null, "215817", 0 ], [ 17, null, "215816", 0 ], [ 18, null, "215815", 0 ], [ 19, null, "215814", 0 ], [ 20, null, "215813", 0 ], [ 21, null, "215812", 0 ], [ 22, null, "215811", 0 ], [ 23, null, "215810", 0 ], [ 24, null, "215809", 0 ], [ 25, null, "215808", 0 ], [ 26, null, "215807", 0 ], [ 27, null, "215806", 0 ], [ 28, null, "215805", 0 ], [ 29, null, "215804", 0 ], [ 30, null, "215803", 0 ], [ 31, null, "215802", 0 ], [ 32, null, "215800", 0 ], [ 33, null, "215799", 0 ], [ 34, null, "215798", 0 ], [ 35, null, "215797", 0 ], [ 36, null, "215795", 0 ], [ 37, null, "215794", 0 ], [ 38, null, "215793", 0 ], [ 39, null, "215792", 0 ], [ 40, null, "215791", 0 ], [ 41, null, "215790", 0 ], [ 42, null, "215789", 0 ], [ 43, null, "215788", 0 ], [ 44, null, "215787", 0 ], [ 45, null, "215786", 0 ], [ 46, null, "215785", 0 ], [ 47, null, "215784", 0 ], [ 48, null, "215783", 0 ], [ 49, null, "215782", 0 ], [ 50, null, "215781", 0 ], [ 51, null, "215780", 0 ], [ 52, null, "215779", 0 ], [ 53, null, "215778", 0 ], [ 54, null, "215777", 0 ], [ 55, null, "215776", 0 ], [ 56, null, "215775", 0 ], [ 57, null, "215774", 0 ], [ 58, null, "215773", 0 ], [ 59, null, "215772", 0 ], [ 60, null, "129304", 0 ], [ 61, null, "112587", 0 ], [ 62, null, "77603", 0 ], [ 63, null, "77602", 0 ], [ 64, null, "77526", 0 ], [ 65, null, "77525", 0 ], [ 66, null, "77524", 0 ], [ 67, null, "77523", 0 ], [ 68, null, "77522", 0 ], [ 69, null, "77521", 0 ], [ 70, null, "77520", 0 ], [ 71, null, "75947", 0 ], [ 72, null, "32092", 0 ], [ 73, null, "32091", 0 ], [ 74, null, "32090", 0 ], [ 75, null, "32089", 0 ], [ 76, null, "32088", 0 ], [ 77, null, "32080", 0 ] ];

class LipMakeupConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$u);
    }
}

var foreign50 = Object.freeze({
    __proto__: null,
    LipMakeupConfig: LipMakeupConfig
});

const EXCELDATA$t = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "509866", 2 ], [ 2, null, "502242", 2 ], [ 3, null, "478216", 2 ], [ 4, null, "476300", 2 ], [ 5, null, "390742", 2 ], [ 6, null, "390421", 2 ], [ 7, null, "390411", 2 ], [ 8, null, "390344", 2 ], [ 9, null, "340073", 2 ], [ 10, null, "313728", 2 ], [ 11, null, "300486", 2 ], [ 12, null, "269622", 2 ], [ 13, null, "241444", 2 ], [ 14, null, "240054", 2 ], [ 15, null, "192595", 2 ], [ 16, null, "171302", 2 ], [ 17, null, "142607", 2 ], [ 18, null, "138105", 2 ], [ 19, null, "137427", 2 ], [ 20, null, "131790", 2 ], [ 21, null, "127682", 2 ], [ 22, null, "119278", 2 ], [ 23, null, "117488", 2 ], [ 24, null, "116974", 2 ], [ 25, null, "115846", 2 ], [ 26, null, "112206", 2 ], [ 27, null, "111724", 2 ], [ 28, null, "111723", 2 ], [ 29, null, "111718", 2 ], [ 30, null, "111251", 2 ], [ 31, null, "111248", 2 ], [ 32, null, "111085", 2 ], [ 33, null, "109832", 2 ], [ 34, null, "64729", 2 ], [ 35, null, "64152", 2 ], [ 36, null, "63878", 2 ], [ 37, null, "63314", 2 ], [ 38, null, "63313", 2 ], [ 39, null, "62550", 2 ], [ 40, null, "509876", 1 ], [ 41, null, "507470", 1 ], [ 42, null, "504605", 1 ], [ 43, null, "502160", 1 ], [ 44, null, "494890", 1 ], [ 45, null, "479103", 1 ], [ 46, null, "476241", 1 ], [ 47, null, "458750", 1 ], [ 48, null, "458131", 1 ], [ 49, null, "382997", 1 ], [ 50, null, "356545", 1 ], [ 51, null, "348896", 1 ], [ 52, null, "320845", 1 ], [ 53, null, "313981", 1 ], [ 54, null, "299161", 1 ], [ 55, null, "291008", 1 ], [ 56, null, "264150", 1 ], [ 57, null, "250472", 1 ], [ 58, null, "240886", 1 ], [ 59, null, "224166", 1 ], [ 60, null, "221669", 1 ], [ 61, null, "212897", 1 ], [ 62, null, "200239", 1 ], [ 63, null, "192555", 1 ], [ 64, null, "181106", 1 ], [ 65, null, "171317", 1 ], [ 66, null, "144965", 1 ], [ 67, null, "144877", 1 ], [ 68, null, "140276", 1 ], [ 69, null, "134563", 1 ], [ 70, null, "134560", 1 ], [ 71, null, "131745", 1 ], [ 72, null, "129275", 1 ], [ 73, null, "129250", 1 ], [ 74, null, "129179", 1 ], [ 75, null, "129091", 1 ], [ 76, null, "127714", 1 ], [ 77, null, "127500", 1 ], [ 78, null, "126682", 1 ], [ 79, null, "125690", 1 ], [ 80, null, "122778", 1 ], [ 81, null, "120577", 1 ], [ 82, null, "119891", 1 ], [ 83, null, "119341", 1 ], [ 84, null, "119290", 1 ], [ 85, null, "119257", 1 ], [ 86, null, "118077", 1 ], [ 87, null, "117682", 1 ], [ 88, null, "116983", 1 ], [ 89, null, "115941", 1 ], [ 90, null, "112575", 1 ], [ 91, null, "111761", 1 ], [ 92, null, "111613", 1 ], [ 93, null, "111575", 1 ], [ 94, null, "111487", 1 ], [ 95, null, "111418", 1 ], [ 96, null, "111395", 1 ], [ 97, null, "111352", 1 ], [ 98, null, "111159", 1 ], [ 99, null, "109149", 1 ], [ 100, null, "109063", 1 ], [ 101, null, "98552", 1 ], [ 102, null, "94784", 1 ], [ 103, null, "75659", 1 ], [ 104, null, "74122", 1 ], [ 105, null, "74119", 1 ], [ 106, null, "66699", 1 ], [ 107, null, "66596", 1 ], [ 108, null, "66426", 1 ], [ 109, null, "66425", 1 ], [ 110, null, "66164", 1 ], [ 111, null, "65982", 1 ], [ 112, null, "65782", 1 ], [ 113, null, "65727", 1 ], [ 114, null, "65062", 1 ], [ 115, null, "65010", 1 ], [ 116, null, "64997", 1 ], [ 117, null, "64950", 1 ], [ 118, null, "64805", 1 ], [ 119, null, "64794", 1 ], [ 120, null, "64723", 1 ], [ 121, null, "64554", 1 ], [ 122, null, "63965", 1 ], [ 123, null, "63917", 1 ], [ 124, null, "63682", 1 ], [ 125, null, "63681", 1 ], [ 126, null, "63680", 1 ], [ 127, null, "63594", 1 ], [ 128, null, "60386", 1 ] ];

class LongPantsBottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$t);
    }
}

var foreign51 = Object.freeze({
    __proto__: null,
    LongPantsBottomConfig: LongPantsBottomConfig
});

const EXCELDATA$s = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "502238", 2 ], [ 2, null, "497919", 2 ], [ 3, null, "497780", 2 ], [ 4, null, "497738", 2 ], [ 5, null, "495176", 2 ], [ 6, null, "490926", 2 ], [ 7, null, "468350", 2 ], [ 8, null, "457968", 2 ], [ 9, null, "457815", 2 ], [ 10, null, "457732", 2 ], [ 11, null, "455507", 2 ], [ 12, null, "440246", 2 ], [ 13, null, "437604", 2 ], [ 14, null, "437075", 2 ], [ 15, null, "412080", 2 ], [ 16, null, "390746", 2 ], [ 17, null, "390457", 2 ], [ 18, null, "390445", 2 ], [ 19, null, "390420", 2 ], [ 20, null, "390417", 2 ], [ 21, null, "390415", 2 ], [ 22, null, "383397", 2 ], [ 23, null, "383392", 2 ], [ 24, null, "358152", 2 ], [ 25, null, "340074", 2 ], [ 26, null, "325905", 2 ], [ 27, null, "323597", 2 ], [ 28, null, "313726", 2 ], [ 29, null, "299082", 2 ], [ 30, null, "298037", 2 ], [ 31, null, "269653", 2 ], [ 32, null, "269652", 2 ], [ 33, null, "224242", 2 ], [ 34, null, "224241", 2 ], [ 35, null, "224240", 2 ], [ 36, null, "224239", 2 ], [ 37, null, "224238", 2 ], [ 38, null, "192850", 2 ], [ 39, null, "171802", 2 ], [ 40, null, "171092", 2 ], [ 41, null, "171091", 2 ], [ 42, null, "140483", 2 ], [ 43, null, "137385", 2 ], [ 44, null, "125737", 2 ], [ 45, null, "121055", 2 ], [ 46, null, "117491", 2 ], [ 47, null, "111205", 2 ], [ 48, null, "64774", 2 ], [ 49, null, "64140", 2 ], [ 50, null, "63295", 2 ], [ 51, null, "62537", 2 ], [ 52, null, "62536", 2 ], [ 53, null, "60982", 2 ], [ 54, null, "60114", 2 ], [ 55, null, "504623", 1 ], [ 56, null, "502263", 1 ], [ 57, null, "494891", 1 ], [ 58, null, "477531", 1 ], [ 59, null, "192842", 1 ], [ 60, null, "181113", 1 ], [ 61, null, "140280", 1 ], [ 62, null, "127800", 1 ], [ 63, null, "126679", 1 ], [ 64, null, "122919", 1 ], [ 65, null, "122779", 1 ], [ 66, null, "119483", 1 ], [ 67, null, "119338", 1 ], [ 68, null, "112568", 1 ], [ 69, null, "109058", 1 ], [ 70, null, "96576", 1 ], [ 71, null, "66726", 1 ], [ 72, null, "65973", 1 ], [ 73, null, "63710", 1 ] ];

class LongSinglePieceTopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$s);
    }
}

var foreign52 = Object.freeze({
    __proto__: null,
    LongSinglePieceTopConfig: LongSinglePieceTopConfig
});

const EXCELDATA$r = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "313993", 2 ], [ 2, null, "296021", 2 ], [ 3, null, "128837", 2 ], [ 4, null, "127279", 2 ], [ 5, null, "121054", 2 ], [ 6, null, "64418", 2 ], [ 7, null, "62971", 2 ], [ 8, null, "193166", 1 ], [ 9, null, "127801", 1 ], [ 10, null, "127348", 1 ] ];

class LongSkirtBottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$r);
    }
}

var foreign53 = Object.freeze({
    __proto__: null,
    LongSkirtBottomConfig: LongSkirtBottomConfig
});

const EXCELDATA$q = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "32098", 0 ], [ 2, null, "48017", 0 ], [ 3, null, "48018", 0 ], [ 4, null, "48019", 0 ], [ 5, null, "48020", 0 ], [ 6, null, "48021", 0 ], [ 7, null, "48022", 0 ], [ 8, null, "48023", 0 ], [ 9, null, "48024", 0 ], [ 10, null, "48025", 0 ], [ 11, null, "48026", 0 ], [ 12, null, "48027", 0 ], [ 13, null, "48028", 0 ], [ 14, null, "48029", 0 ], [ 15, null, "48035", 0 ] ];

class LowerHighlightConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$q);
    }
}

var foreign54 = Object.freeze({
    __proto__: null,
    LowerHighlightConfig: LowerHighlightConfig
});

const EXCELDATA$p = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "回声战士", "141606", 2 ], [ 2, "福瑞", "141617", 2 ], [ 3, "海绵宝宝装", "142135", 2 ], [ 4, "猫人装", "142137", 2 ], [ 5, "长腿妈妈", "143403", 2 ], [ 6, "猫猫头套服饰", "163304", 2 ], [ 7, "猫咪玩偶服", "164422", 2 ], [ 8, "大头玩偶服", "164427", 2 ], [ 9, "交个朋友鸭", "270464", 2 ], [ 10, "交个朋友鸭", "270465", 2 ], [ 11, "卡通玩偶服饰", "162955", 1 ], [ 12, "玩偶熊服饰", "164354", 1 ], [ 13, "小蓝人服饰", "164356", 1 ], [ 14, "方块玩偶服", "164359", 1 ], [ 15, "兔子玩偶服", "164364", 1 ], [ 16, "玩具鸡服饰", "164366", 1 ], [ 17, "刺猬玩偶服", "164367", 1 ], [ 18, "玩具兔服饰", "164368", 1 ], [ 19, "狗头毛毛虫玩偶服", "164377", 1 ], [ 20, "雪人装", "164417", 1 ], [ 21, "橘龙", "212971", 1 ], [ 22, "跳舞熊", "213498", 1 ], [ 23, "蓝龙", "216268", 1 ], [ 24, "绿龙", "216269", 1 ], [ 25, "黑龙", "216270", 1 ], [ 26, "成都五彩熊", "141156", 1 ], [ 27, "小黑子", "141476", 1 ], [ 28, "鸡人装", "142136", 1 ], [ 29, "兔人装", "142138", 1 ], [ 30, "熊人装", "142147", 1 ], [ 31, "Bunzo bunny", "143383", 1 ], [ 32, "Enderman", "143384", 1 ], [ 33, "Rainbow friends", "143385", 1 ], [ 34, "索尼克", "143387", 1 ], [ 35, "狗头毛毛虫", "143390", 1 ] ];

class MuppetStylingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$p);
    }
}

var foreign55 = Object.freeze({
    __proto__: null,
    MuppetStylingOutfitConfig: MuppetStylingOutfitConfig
});

const EXCELDATA$o = [ [ "id", "Guid", "Annotation" ], [ "", "", "" ], [ 1, "63341", "Chirp" ], [ 2, "118698", "STAY" ], [ 3, "118699", "bad guy" ], [ 4, "117222", "I will live" ], [ 5, "118697", "Let Me Love You" ], [ 6, "118700", "Running up That Hill" ], [ 7, "118701", "Love To Hate Me" ], [ 8, "118702", "TOMBOY" ], [ 9, "118703", "Shut Down" ], [ 10, "118704", "Celestial" ], [ 11, "118712", "As It Was" ], [ 12, "118706", "Good Morning" ], [ 13, "118707", "Alone" ], [ 14, "118709", "Chanderiler" ], [ 15, "118711", "Don't Wanna Know" ], [ 16, "118716", "Mood" ], [ 17, "117220", "Golden wheel" ], [ 18, "128884", "I don't know what it's called" ], [ 19, "128888", "I don't know what it's called" ] ];

class MusicConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$o);
    }
}

var foreign56 = Object.freeze({
    __proto__: null,
    MusicConfig: MusicConfig
});

const EXCELDATA$n = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "124879", 2 ], [ 2, null, "65712", 2 ], [ 3, null, "64412", 2 ], [ 4, null, "64142", 2 ], [ 5, null, "127349", 1 ], [ 6, null, "109137", 1 ] ];

class NakedDressShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$n);
    }
}

var foreign57 = Object.freeze({
    __proto__: null,
    NakedDressShoesConfig: NakedDressShoesConfig
});

const EXCELDATA$m = [ [ "ID", "Describe", "AssetId", "SexType", "IsTransition" ], [ "", "", "", "", "" ], [ 1, "一定过套装", "253153", 2, 0 ], [ 2, "一定过套装", "263401", 1, 0 ], [ 3, "主打求神套装", "264188", 2, 0 ], [ 4, "主打求神套装", "264189", 1, 0 ], [ 5, "新年装", "297941", 2, 0 ], [ 6, "温柔女孩", "303702", 2, 0 ], [ 7, "阳光男", "303705", 1, 0 ], [ 8, "叛逆女孩", "303706", 2, 0 ], [ 9, "叛逆男孩", "303703", 1, 0 ], [ 10, "制服女", "367076", 2, 1 ], [ 11, "制服女", "435694", 2, 1 ], [ 12, "白人女天使", "137837", 2, 1 ], [ 13, "白人举重运动员", "141018", 1, 1 ], [ 14, "钢铁侠", "357563", 1, 1 ], [ 15, "女仆套装女", "350569", 2, 1 ], [ 16, "橘龙", "212971", 1, 1 ], [ 17, "华丽海盗服", "163624", 2, 0 ] ];

class OutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$m);
    }
}

var foreign58 = Object.freeze({
    __proto__: null,
    OutfitConfig: OutfitConfig
});

const EXCELDATA$l = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, null, "420535", [ "0", "50", "0", "0", "0", "0", "2", "2", "2" ], 0 ], [ 2, null, "156405", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 3, null, "267954", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 4, null, "289523", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 5, null, "289524", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 6, null, "289525", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 7, null, "289526", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 8, null, "289527", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 9, null, "365903", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 10, null, "365906", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 11, null, "365918", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 12, null, "365921", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 13, null, "365922", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 14, null, "366268", [ "0", "50", "0", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 15, null, "379426", [ "0", "50", "25", "0", "0", "0", "1", "1", "1" ], 0 ], [ 16, null, "379427", [ "0", "50", "25", "0", "0", "0", "1", "1", "1" ], 0 ], [ 17, null, "380285", [ "0", "50", "25", "0", "0", "0", "1", "1", "1" ], 0 ], [ 18, null, "380286", [ "0", "50", "25", "0", "0", "0", "1", "1", "1" ], 0 ], [ 19, null, "260129", [ "0", "50", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class PetConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$l);
    }
}

var foreign59 = Object.freeze({
    __proto__: null,
    PetConfig: PetConfig
});

const EXCELDATA$k = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "美瞳", "531757", 0 ], [ 2, "美瞳", "531159", 0 ], [ 3, "美瞳", "461646", 0 ], [ 4, null, "458422", 0 ], [ 5, null, "398609", 0 ], [ 6, null, "267296", 0 ], [ 7, null, "267295", 0 ], [ 8, null, "267294", 0 ], [ 9, null, "267291", 0 ], [ 10, null, "267285", 0 ], [ 11, null, "266476", 0 ], [ 12, null, "266475", 0 ], [ 13, null, "266474", 0 ], [ 14, null, "266473", 0 ], [ 15, null, "266472", 0 ], [ 16, null, "266372", 0 ], [ 17, null, "266371", 0 ], [ 18, null, "266363", 0 ], [ 19, null, "266362", 0 ], [ 20, null, "266361", 0 ], [ 21, null, "266360", 0 ], [ 22, null, "266359", 0 ], [ 23, null, "266358", 0 ], [ 24, null, "215181", 0 ], [ 25, null, "215180", 0 ], [ 26, null, "215179", 0 ], [ 27, null, "215178", 0 ], [ 28, null, "215177", 0 ], [ 29, null, "215176", 0 ], [ 30, null, "215175", 0 ], [ 31, null, "215174", 0 ], [ 32, null, "215173", 0 ], [ 33, null, "215172", 0 ], [ 34, null, "215171", 0 ], [ 35, null, "215170", 0 ], [ 36, null, "215169", 0 ], [ 37, null, "215168", 0 ], [ 38, null, "215167", 0 ], [ 39, null, "215166", 0 ], [ 40, null, "215165", 0 ], [ 41, null, "215164", 0 ], [ 42, null, "215163", 0 ], [ 43, null, "215162", 0 ], [ 44, null, "185330", 0 ], [ 45, null, "121577", 0 ], [ 46, null, "117054", 0 ], [ 47, null, "77770", 0 ], [ 48, null, "77769", 0 ], [ 49, null, "77598", 0 ], [ 50, null, "77597", 0 ], [ 51, null, "77596", 0 ], [ 52, null, "77518", 0 ], [ 53, null, "77517", 0 ], [ 54, null, "77485", 0 ], [ 55, null, "77484", 0 ], [ 56, null, "70244", 0 ], [ 57, null, "70243", 0 ], [ 58, null, "70242", 0 ], [ 59, null, "70241", 0 ], [ 60, null, "47973", 0 ], [ 61, null, "47972", 0 ], [ 62, null, "47971", 0 ], [ 63, null, "47970", 0 ], [ 64, null, "47969", 0 ], [ 65, null, "47968", 0 ], [ 66, null, "47967", 0 ], [ 67, null, "47966", 0 ], [ 68, null, "47965", 0 ], [ 69, null, "47964", 0 ], [ 70, null, "47963", 0 ], [ 71, null, "47962", 0 ], [ 72, null, "47961", 0 ], [ 73, null, "47960", 0 ], [ 74, null, "47959", 0 ], [ 75, null, "47958", 0 ], [ 76, null, "47957", 0 ], [ 77, null, "47956", 0 ], [ 78, null, "32093", 0 ], [ 79, null, "30422", 0 ], [ 80, null, "25891", 0 ], [ 81, null, "22599", 0 ] ];

class PupilStyleConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$k);
    }
}

var foreign60 = Object.freeze({
    __proto__: null,
    PupilStyleConfig: PupilStyleConfig
});

const EXCELDATA$j = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, "单手刀", "334208", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, null, "297029", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, "散弹喷枪", "155702", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 4, null, "122956", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, null, "122952", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, null, "31734", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, null, "31728", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 8, null, "31724", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, null, "221099", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 10, null, "122716", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 11, null, "166941", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 12, null, "155696", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 13, null, "122726", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 14, null, "168811", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 15, null, "155702", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 16, null, "122720", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class RightHandConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$j);
    }
}

var foreign61 = Object.freeze({
    __proto__: null,
    RightHandConfig: RightHandConfig
});

const EXCELDATA$i = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "短发女", "351026", 2 ], [ 2, "短发女", "411825", 2 ], [ 3, "机械女", "163329", 2 ], [ 4, "赛博套装", "163330", 2 ], [ 5, "机甲套装", "163553", 2 ], [ 6, "机器人", "162950", 1 ], [ 7, "赛博服饰", "162971", 1 ], [ 8, "机甲套装", "164428", 1 ], [ 9, "刺猬小子", "351402", 1 ], [ 10, "魔法男孩", "361919", 1 ] ];

class ScienceFictionStylingOutfitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$i);
    }
}

var foreign62 = Object.freeze({
    __proto__: null,
    ScienceFictionStylingOutfitConfig: ScienceFictionStylingOutfitConfig
});

const EXCELDATA$h = [ [ "ID", "ShareId" ], [ "", "" ], [ 1, "1022S89K", "电锯人" ], [ 2, "1022S8X6", "黑爵士" ], [ 3, "1022S7KJ", "白-爵士" ], [ 4, "1022S7KD", "鬼" ], [ 5, "1022S7K9", "青蛙" ], [ 6, "1022S88E", "恐龙" ], [ 7, "1022S7IE", "射手-" ], [ 8, "1022S861", "繁星" ], [ 9, "1022S85O", "竹节虫-女-黑" ], [ 10, "1022S85E", "竹节虫-女-黑" ], [ 11, "1022S8QF", "竹节虫-男-黑" ], [ 12, "1022S82R", "竹节虫-女-白" ], [ 13, "1022S8R5", "挨个子-女" ], [ 14, "1022S8RC", "竹节虫-女-黑" ], [ 15, "1022S8RL", "新手礼包-矮个子" ], [ 16, "1022S7FQ", "挨个子-女白" ], [ 17, "1022S8RW", "挨个子-女白" ], [ 18, "1022S8SB", "竹节虫-女-白" ], [ 19, "1022S7G7", "挨个子-女黑" ], [ 20, "1022S84B", "竹节虫-女-白" ], [ 21, "1022S7GF", "挨个子-女黑" ], [ 22, "1022S7GT", "兔子帽子女" ], [ 23, "1022S8T2", "棺材女红" ], [ 24, "1022S855", "挨个子-女白" ], [ 25, "102383MF", "圣诞-女" ], [ 26, "102383TY", "圣诞男" ], [ 27, "102382PL", "女" ] ];

class ShareIdConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$h);
    }
}

var foreign63 = Object.freeze({
    __proto__: null,
    ShareIdConfig: ShareIdConfig
});

const EXCELDATA$g = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "长袜制服鞋", "57729", 2 ], [ 2, "细跟尖头鞋", "60078", 1 ], [ 3, "猫猫鞋套", "63301", 0 ], [ 4, "皮鞋", "383403", 2 ], [ 5, "小熊鞋", "362125", 2 ] ];

class ShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$g);
    }
}

var foreign64 = Object.freeze({
    __proto__: null,
    ShoesConfig: ShoesConfig
});

const EXCELDATA$f = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "509868", 2 ], [ 2, null, "478218", 2 ], [ 3, null, "383390", 2 ], [ 4, null, "370735", 2 ], [ 5, null, "356245", 2 ], [ 6, null, "344228", 2 ], [ 7, null, "321370", 2 ], [ 8, null, "313079", 2 ], [ 9, null, "297929", 2 ], [ 10, null, "296023", 2 ], [ 11, null, "292004", 2 ], [ 12, null, "171377", 2 ], [ 13, null, "171301", 2 ], [ 14, null, "137425", 2 ], [ 15, null, "121948", 2 ], [ 16, null, "119366", 2 ], [ 17, null, "119350", 2 ], [ 18, null, "115922", 2 ], [ 19, null, "111253", 2 ], [ 20, null, "111241", 2 ], [ 21, null, "109839", 2 ], [ 22, null, "65656", 2 ], [ 23, null, "63648", 2 ], [ 24, null, "63539", 2 ], [ 25, null, "63300", 2 ], [ 26, null, "62958", 2 ], [ 27, null, "62777", 2 ], [ 28, null, "59857", 2 ], [ 29, null, "509895", 1 ], [ 30, null, "479087", 1 ], [ 31, null, "383409", 1 ], [ 32, null, "356544", 1 ], [ 33, null, "336269", 1 ], [ 34, null, "300136", 1 ], [ 35, null, "291009", 1 ], [ 36, null, "266166", 1 ], [ 37, null, "171318", 1 ], [ 38, null, "171118", 1 ], [ 39, null, "140934", 1 ], [ 40, null, "137437", 1 ], [ 41, null, "127499", 1 ], [ 42, null, "122089", 1 ], [ 43, null, "120060", 1 ], [ 44, null, "120059", 1 ], [ 45, null, "120058", 1 ], [ 46, null, "120056", 1 ], [ 47, null, "119893", 1 ], [ 48, null, "118079", 1 ], [ 49, null, "116791", 1 ], [ 50, null, "115938", 1 ], [ 51, null, "112202", 1 ], [ 52, null, "112201", 1 ], [ 53, null, "111573", 1 ], [ 54, null, "111518", 1 ], [ 55, null, "111161", 1 ], [ 56, null, "98550", 1 ], [ 57, null, "74113", 1 ], [ 58, null, "66414", 1 ], [ 59, null, "66160", 1 ], [ 60, null, "65006", 1 ], [ 61, null, "64995", 1 ], [ 62, null, "64803", 1 ], [ 63, null, "64544", 1 ], [ 64, null, "63883", 1 ], [ 65, null, "63674", 1 ], [ 66, null, "63671", 1 ] ];

class ShortJacketTopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$f);
    }
}

var foreign65 = Object.freeze({
    __proto__: null,
    ShortJacketTopConfig: ShortJacketTopConfig
});

const EXCELDATA$e = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "497740", 2 ], [ 2, null, "457813", 2 ], [ 3, null, "457730", 2 ], [ 4, null, "390740", 2 ], [ 5, null, "390416", 2 ], [ 6, null, "383395", 2 ], [ 7, null, "344230", 2 ], [ 8, null, "344064", 2 ], [ 9, null, "321371", 2 ], [ 10, null, "294324", 2 ], [ 11, null, "241190", 2 ], [ 12, null, "218442", 2 ], [ 13, null, "210327", 2 ], [ 14, null, "181361", 2 ], [ 15, null, "144575", 2 ], [ 16, null, "140329", 2 ], [ 17, null, "125734", 2 ], [ 18, null, "122110", 2 ], [ 19, null, "111722", 2 ], [ 20, null, "66424", 2 ], [ 21, null, "66302", 2 ], [ 22, null, "64457", 2 ], [ 23, null, "63552", 2 ], [ 24, null, "63315", 2 ], [ 25, null, "59855", 2 ], [ 26, null, "383411", 1 ], [ 27, null, "382168", 1 ], [ 28, null, "266167", 1 ], [ 29, null, "250471", 1 ], [ 30, null, "241332", 1 ], [ 31, null, "145069", 1 ], [ 32, null, "111510", 1 ], [ 33, null, "75460", 1 ], [ 34, null, "66110", 1 ], [ 35, null, "65616", 1 ], [ 36, null, "64783", 1 ], [ 37, null, "64553", 1 ], [ 38, null, "64187", 1 ], [ 39, null, "63915", 1 ], [ 40, null, "63688", 1 ] ];

class ShortsBottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$e);
    }
}

var foreign66 = Object.freeze({
    __proto__: null,
    ShortsBottomConfig: ShortsBottomConfig
});

const EXCELDATA$d = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "458656", 2 ], [ 2, null, "390745", 2 ], [ 3, null, "390419", 2 ], [ 4, null, "390332", 2 ], [ 5, null, "383400", 2 ], [ 6, null, "362161", 2 ], [ 7, null, "346550", 2 ], [ 8, null, "344058", 2 ], [ 9, null, "323610", 2 ], [ 10, null, "322900", 2 ], [ 11, null, "322894", 2 ], [ 12, null, "314285", 2 ], [ 13, null, "313848", 2 ], [ 14, null, "313730", 2 ], [ 15, null, "313078", 2 ], [ 16, null, "300488", 2 ], [ 17, null, "241187", 2 ], [ 18, null, "240938", 2 ], [ 19, null, "240052", 2 ], [ 20, null, "224080", 2 ], [ 21, null, "224079", 2 ], [ 22, null, "224078", 2 ], [ 23, null, "224077", 2 ], [ 24, null, "224076", 2 ], [ 25, null, "223960", 2 ], [ 26, null, "223959", 2 ], [ 27, null, "223958", 2 ], [ 28, null, "223957", 2 ], [ 29, null, "192596", 2 ], [ 30, null, "174758", 2 ], [ 31, null, "171064", 2 ], [ 32, null, "152034", 2 ], [ 33, null, "140330", 2 ], [ 34, null, "138031", 2 ], [ 35, null, "137599", 2 ], [ 36, null, "137518", 2 ], [ 37, null, "137505", 2 ], [ 38, null, "128834", 2 ], [ 39, null, "127681", 2 ], [ 40, null, "127522", 2 ], [ 41, null, "127277", 2 ], [ 42, null, "126615", 2 ], [ 43, null, "122100", 2 ], [ 44, null, "119362", 2 ], [ 45, null, "119358", 2 ], [ 46, null, "119354", 2 ], [ 47, null, "119277", 2 ], [ 48, null, "119229", 2 ], [ 49, null, "117497", 2 ], [ 50, null, "115921", 2 ], [ 51, null, "115849", 2 ], [ 52, null, "111721", 2 ], [ 53, null, "111714", 2 ], [ 54, null, "111673", 2 ], [ 55, null, "111529", 2 ], [ 56, null, "111519", 2 ], [ 57, null, "111517", 2 ], [ 58, null, "111516", 2 ], [ 59, null, "111509", 2 ], [ 60, null, "111507", 2 ], [ 61, null, "111505", 2 ], [ 62, null, "111497", 2 ], [ 63, null, "111496", 2 ], [ 64, null, "111307", 2 ], [ 65, null, "111303", 2 ], [ 66, null, "111240", 2 ], [ 67, null, "111203", 2 ], [ 68, null, "111088", 2 ], [ 69, null, "66413", 2 ], [ 70, null, "66301", 2 ], [ 71, null, "64728", 2 ], [ 72, null, "64545", 2 ], [ 73, null, "64410", 2 ], [ 74, null, "63953", 2 ], [ 75, null, "63304", 2 ], [ 76, null, "62959", 2 ], [ 77, null, "62956", 2 ], [ 78, null, "60983", 2 ], [ 79, null, "59880", 2 ], [ 80, null, "59853", 2 ], [ 81, null, "57730", 2 ], [ 82, null, "507453", 1 ], [ 83, null, "476242", 1 ], [ 84, null, "458752", 1 ], [ 85, null, "458129", 1 ], [ 86, null, "383410", 1 ], [ 87, null, "383002", 1 ], [ 88, null, "382166", 1 ], [ 89, null, "313977", 1 ], [ 90, null, "313681", 1 ], [ 91, null, "250440", 1 ], [ 92, null, "250439", 1 ], [ 93, null, "241389", 1 ], [ 94, null, "240885", 1 ], [ 95, null, "224168", 1 ], [ 96, null, "196935", 1 ], [ 97, null, "192556", 1 ], [ 98, null, "140278", 1 ], [ 99, null, "129334", 1 ], [ 100, null, "129249", 1 ], [ 101, null, "129177", 1 ], [ 102, null, "129087", 1 ], [ 103, null, "128801", 1 ], [ 104, null, "127802", 1 ], [ 105, null, "127716", 1 ], [ 106, null, "127351", 1 ], [ 107, null, "125689", 1 ], [ 108, null, "122009", 1 ], [ 109, null, "121533", 1 ], [ 110, null, "120575", 1 ], [ 111, null, "120057", 1 ], [ 112, null, "119289", 1 ], [ 113, null, "119112", 1 ], [ 114, null, "117681", 1 ], [ 115, null, "116726", 1 ], [ 116, null, "112200", 1 ], [ 117, null, "111498", 1 ], [ 118, null, "111403", 1 ], [ 119, null, "111282", 1 ], [ 120, null, "94782", 1 ], [ 121, null, "74114", 1 ], [ 122, null, "66696", 1 ], [ 123, null, "66415", 1 ], [ 124, null, "65780", 1 ], [ 125, null, "65614", 1 ], [ 126, null, "64793", 1 ], [ 127, null, "64708", 1 ], [ 128, null, "64543", 1 ], [ 129, null, "64542", 1 ], [ 130, null, "63906", 1 ], [ 131, null, "63686", 1 ], [ 132, null, "63672", 1 ], [ 133, null, "63593", 1 ] ];

class ShortSinglePieceTopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$d);
    }
}

var foreign67 = Object.freeze({
    __proto__: null,
    ShortSinglePieceTopConfig: ShortSinglePieceTopConfig
});

const EXCELDATA$c = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "468349", 2 ], [ 2, null, "440230", 2 ], [ 3, null, "412115", 2 ], [ 4, null, "390433", 2 ], [ 5, null, "383391", 2 ], [ 6, null, "370794", 2 ], [ 7, null, "356246", 2 ], [ 8, null, "314286", 2 ], [ 9, null, "297931", 2 ], [ 10, null, "292002", 2 ], [ 11, null, "240937", 2 ], [ 12, null, "174757", 2 ], [ 13, null, "138032", 2 ], [ 14, null, "127523", 2 ], [ 15, null, "126616", 2 ], [ 16, null, "122101", 2 ], [ 17, null, "121947", 2 ], [ 18, null, "119227", 2 ], [ 19, null, "116967", 2 ], [ 20, null, "116956", 2 ], [ 21, null, "116955", 2 ], [ 22, null, "66356", 2 ], [ 23, null, "65665", 2 ], [ 24, null, "64334", 2 ], [ 25, null, "64333", 2 ], [ 26, null, "63650", 2 ], [ 27, null, "62970", 2 ], [ 28, null, "62790", 2 ], [ 29, null, "60994", 2 ], [ 30, null, "60113", 2 ], [ 31, null, "57736", 2 ] ];

class ShortSkirtBottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$c);
    }
}

var foreign68 = Object.freeze({
    __proto__: null,
    ShortSkirtBottomConfig: ShortSkirtBottomConfig
});

const EXCELDATA$b = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, null, "152404", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 2, null, "152387", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 3, null, "152384", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 4, null, "152395", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 5, null, "152380", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 6, null, "152393", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 7, null, "152400", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 8, null, "152407", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 9, null, "152382", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 10, null, "152397", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 11, null, "152381", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 12, null, "152396", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 13, null, "152392", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 14, null, "152399", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 15, null, "152408", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 16, null, "152391", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 17, null, "152405", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 18, null, "152402", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 19, null, "152409", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 20, null, "152383", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 21, null, "152406", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 22, null, "152403", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 23, null, "152385", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 24, null, "152386", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 25, null, "152388", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 26, null, "152389", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 27, null, "152390", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 28, null, "152394", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 29, null, "152398", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 30, null, "152401", [ "0", "-35", "-25", "0", "0", "0", "0.1", "0.1", "0.1" ], 0 ], [ 31, null, "87027", [ "0", "-35", "-50", "0", "0", "-90", "0.5", "0.5", "0.5" ], 0 ], [ 32, null, "152259", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 33, null, "177575", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 34, null, "177646", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 35, null, "178141", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 36, null, "179400", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 37, null, "179470", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 38, null, "179487", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 39, null, "180526", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 40, null, "180527", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 41, null, "180962", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 42, null, "180963", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 43, null, "180965", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 44, null, "180966", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 45, null, "180967", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 46, null, "180968", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 47, null, "181639", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 48, null, "184402", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 49, null, "184489", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 50, null, "184541", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 51, null, "184555", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 52, null, "184556", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 53, null, "184561", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 54, null, "185376", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 55, null, "185448", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 56, null, "185537", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 57, null, "185598", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 58, null, "185627", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 59, null, "185708", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 60, null, "186357", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 61, null, "186532", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 62, null, "186533", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 63, null, "186534", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 64, null, "186655", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 65, null, "186656", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 66, null, "186657", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 67, null, "186685", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 68, null, "186807", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 69, null, "186897", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 70, null, "191800", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 71, null, "191806", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 72, null, "191852", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 73, null, "191950", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 74, null, "192290", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 75, null, "192359", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 76, null, "192385", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 77, null, "192395", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 78, null, "192420", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 79, null, "192533", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 80, null, "192579", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 81, null, "194960", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 82, null, "194965", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 83, null, "195014", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 84, null, "195088", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 85, null, "195089", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 86, null, "195090", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 87, null, "195162", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 88, null, "195260", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 89, null, "195261", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 90, null, "195262", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 91, null, "195771", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 92, null, "195772", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 93, null, "195773", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 94, null, "195774", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 95, null, "196299", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 96, null, "196300", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 97, null, "196301", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 98, null, "196302", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 99, null, "196536", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 100, null, "197005", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 101, null, "197006", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 102, null, "197007", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 103, null, "197008", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 104, null, "198126", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 105, null, "198127", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 106, null, "198128", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 107, null, "198630", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 108, null, "198631", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 109, null, "198632", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 110, null, "198633", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 111, null, "198651", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 112, null, "198652", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 113, null, "198653", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 114, null, "198654", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 115, null, "199401", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 116, null, "199402", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 117, null, "199403", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 118, null, "199404", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 119, null, "200181", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 120, null, "200182", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 121, null, "200183", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 122, null, "203716", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 123, null, "203717", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 124, null, "203718", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 125, null, "203719", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 126, null, "209370", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 127, null, "209371", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 128, null, "209372", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 129, null, "209373", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 130, null, "217695", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 131, null, "217700", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 132, null, "217949", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 133, null, "218295", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ], [ 134, null, "218316", [ "0", "-35", "-50", "0", "0", "-90", "1", "1", "1" ], 0 ] ];

class ShoulderConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$b);
    }
}

var foreign69 = Object.freeze({
    __proto__: null,
    ShoulderConfig: ShoulderConfig
});

const EXCELDATA$a = [ [ "ID", "Describe", "SkinTone", "SexType" ], [ "", "", "", "" ], [ 1, null, "ColorPick", 0 ], [ 2, null, "FDF4EFFF", 0 ], [ 3, null, "FAEDE5FF", 0 ], [ 4, null, "F8E7E0FF", 0 ], [ 5, null, "F5E2D4FF", 0 ], [ 6, null, "F3D8C7FF", 0 ], [ 7, null, "EACCC1FF", 0 ], [ 8, null, "F6E6D6FF", 0 ], [ 9, null, "F0DEC8FF", 0 ], [ 10, null, "EDD9BEFF", 0 ], [ 11, null, "E8D0B4FF", 0 ], [ 12, null, "E7CAA2FF", 0 ], [ 13, null, "DCBB8EFF", 0 ], [ 14, null, "DCC2A7FF", 0 ], [ 15, null, "C7A58CFF", 0 ], [ 16, null, "AB8874FF", 0 ], [ 17, null, "96735FFF", 0 ], [ 18, null, "805F4CFF", 0 ], [ 19, null, "5B4337FF", 0 ], [ 20, null, "D0B9ABFF", 0 ], [ 21, null, "C1ABA0FF", 0 ], [ 22, null, "A38881FF", 0 ], [ 23, null, "806B68FF", 0 ], [ 24, null, "64504FFF", 0 ], [ 25, null, "423431FF", 0 ], [ 26, null, "E4C3A0FF", 0 ], [ 27, null, "E3BA8CFF", 0 ], [ 28, null, "D1A173FF", 0 ], [ 29, null, "B37D51FF", 0 ], [ 30, null, "976238FF", 0 ], [ 31, null, "6D3F25FF", 0 ], [ 32, null, "7D553CFF", 0 ], [ 33, null, "794F37FF", 0 ], [ 34, null, "5F3C26FF", 0 ], [ 35, null, "5B3822FF", 0 ], [ 36, null, "3D2314FF", 0 ], [ 37, null, "341C10FF", 0 ], [ 38, null, "F9E175FF", 0 ], [ 39, null, "B0C87EFF", 0 ], [ 40, null, "8AB8DCFF", 0 ], [ 41, null, "FBF5F5FF", 0 ] ];

class SkinToneConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$a);
    }
}

var foreign71 = Object.freeze({
    __proto__: null,
    SkinToneConfig: SkinToneConfig
});

const EXCELDATA$9 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "121946", 2 ], [ 2, null, "115634", 2 ], [ 3, null, "111207", 2 ], [ 4, null, "111206", 2 ], [ 5, null, "64727", 2 ], [ 6, null, "64711", 2 ], [ 7, null, "64147", 2 ], [ 8, null, "59854", 2 ], [ 9, null, "458132", 1 ], [ 10, null, "356543", 1 ], [ 11, null, "266168", 1 ], [ 12, null, "250456", 1 ], [ 13, null, "240887", 1 ], [ 14, null, "129210", 1 ], [ 15, null, "119890", 1 ], [ 16, null, "115937", 1 ], [ 17, null, "66416", 1 ], [ 18, null, "66163", 1 ], [ 19, null, "65009", 1 ], [ 20, null, "64792", 1 ], [ 21, null, "63687", 1 ], [ 22, null, "63596", 1 ] ];

class SportsShoesShoesConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$9);
    }
}

var foreign72 = Object.freeze({
    __proto__: null,
    SportsShoesShoesConfig: SportsShoesShoesConfig
});

const EXCELDATA$8 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "241445", 2 ], [ 2, null, "221704", 2 ], [ 3, null, "211010", 2 ], [ 4, null, "210328", 2 ], [ 5, null, "181365", 2 ], [ 6, null, "171774", 2 ], [ 7, null, "142608", 2 ], [ 8, null, "141708", 2 ], [ 9, null, "134234", 2 ], [ 10, null, "131789", 2 ], [ 11, null, "127639", 2 ], [ 12, null, "124880", 2 ], [ 13, null, "119745", 2 ], [ 14, null, "86088", 2 ], [ 15, null, "71960", 2 ], [ 16, null, "67583", 2 ], [ 17, null, "67582", 2 ], [ 18, null, "67541", 2 ], [ 19, null, "66712", 2 ], [ 20, null, "66572", 2 ], [ 21, null, "65870", 2 ], [ 22, null, "65710", 2 ], [ 23, null, "65655", 2 ], [ 24, null, "65654", 2 ], [ 25, null, "64710", 2 ], [ 26, null, "64709", 2 ], [ 27, null, "64627", 2 ], [ 28, null, "64559", 2 ], [ 29, null, "64305", 2 ], [ 30, null, "64141", 2 ], [ 31, null, "64138", 2 ], [ 32, null, "63954", 2 ], [ 33, null, "63871", 2 ], [ 34, null, "63868", 2 ], [ 35, null, "63538", 2 ], [ 36, null, "63536", 2 ], [ 37, null, "63292", 2 ], [ 38, null, "63291", 2 ], [ 39, null, "63290", 2 ], [ 40, null, "62778", 2 ], [ 41, null, "62776", 2 ], [ 42, null, "62535", 2 ], [ 43, null, "60981", 2 ], [ 44, null, "60077", 2 ], [ 45, null, "59955", 2 ], [ 46, null, "59536", 2 ], [ 47, null, "320844", 1 ], [ 48, null, "212895", 1 ], [ 49, null, "200242", 1 ], [ 50, null, "186268", 1 ], [ 51, null, "131747", 1 ], [ 52, null, "129936", 1 ], [ 53, null, "119773", 1 ], [ 54, null, "119669", 1 ], [ 55, null, "119393", 1 ], [ 56, null, "111612", 1 ], [ 57, null, "109144", 1 ], [ 58, null, "92015", 1 ], [ 59, null, "75457", 1 ], [ 60, null, "66615", 1 ], [ 61, null, "66554", 1 ], [ 62, null, "64813", 1 ], [ 63, null, "63711", 1 ], [ 64, null, "60381", 1 ] ];

class SuitTopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$8);
    }
}

var foreign73 = Object.freeze({
    __proto__: null,
    SuitTopConfig: SuitTopConfig
});

const EXCELDATA$7 = [ [ "ID", "Describe", "Text", "Tab2" ], [ "", "", "Language", "" ], [ 1, "捏脸", "Text_Tab1_1", [ 101, 102, 103, 104, 105, 106, 107 ] ], [ 2, "换装", "Text_Tab1_2", [ 108, 109, 110, 111, 112, 113, 115, 114 ] ], [ 3, "收藏", "Text_Tab1_3", null ] ];

class Tab1Config extends ConfigBase {
    constructor() {
        super(EXCELDATA$7);
    }
}

var foreign74 = Object.freeze({
    __proto__: null,
    Tab1Config: Tab1Config
});

const EXCELDATA$6 = [ [ "ID", "Describe", "Text", "Tab3" ], [ "", "", "Language", "" ], [ 101, "体型", "Text_Tab2_101", null ], [ 102, "肤色", "Text_Tab2_102", null ], [ 103, "脸型", "Text_Tab2_103", null ], [ 104, "眼睛", "Text_Tab2_104", [ 1001, 1002, 1003, 1004, 1005 ] ], [ 105, "眉毛", "Text_Tab2_105", null ], [ 106, "妆容", "Text_Tab2_106", [ 1006, 1007, 1008, 1009 ] ], [ 107, "表情", "Text_Tab2_107", null ], [ 108, "套装", "Text_Tab2_108", [ 1022, 1047, 1023, 1024, 1025, 1026, 1027, 1028 ] ], [ 109, "头发", "Text_Tab2_109", [ 1010, 1011, 1012 ] ], [ 110, "上衣", "Text_Tab2_110", [ 1029, 1030, 1031, 1032, 1033 ] ], [ 111, "下衣", "Text_Tab2_111", [ 1034, 1035, 1036, 1037, 1038 ] ], [ 112, "鞋子", "Text_Tab2_112", [ 1041, 1042, 1043, 1044, 1045, 1046 ] ], [ 113, "手套", "Text_Tab2_113", [ 1039, 1040 ] ], [ 114, "宠物", "Text_Tab2_114", null ], [ 115, "饰品", "Text_Tab2_115", [ 1020, 1015, 1048, 1014, 1018, 1016, 1017, 1019, 1021 ] ], [ 501, "体型_收藏", "Text_Tab2_501", null ], [ 502, "肤色_收藏", "Text_Tab2_502", null ], [ 503, "脸型_收藏", "Text_Tab2_503", null ], [ 504, "眼睛_收藏", "Text_Tab2_504", [ 2001, 2002, 2003, 2004, 2005 ] ], [ 505, "眉毛_收藏", "Text_Tab2_505", null ], [ 506, "妆容_收藏", "Text_Tab2_506", [ 2006, 2007, 2008, 2009 ] ], [ 507, "表情_收藏", "Text_Tab2_507", null ], [ 508, "套装_收藏", "Text_Tab2_508", null ], [ 509, "头发_收藏", "Text_Tab2_509", [ 2010, 2011, 2012 ] ], [ 510, "上衣_收藏", "Text_Tab2_510", null ], [ 511, "下衣_收藏", "Text_Tab2_511", null ], [ 512, "鞋子_收藏", "Text_Tab2_512", null ], [ 513, "手套_收藏", "Text_Tab2_513", null ], [ 514, "宠物_收藏", "Text_Tab2_514", null ], [ 515, "饰品_收藏", "Text_Tab2_515", [ 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 ] ] ];

class Tab2Config extends ConfigBase {
    constructor() {
        super(EXCELDATA$6);
    }
}

var foreign75 = Object.freeze({
    __proto__: null,
    Tab2Config: Tab2Config
});

const EXCELDATA$5 = [ [ "ID", "Describe", "Text" ], [ "", "", "Language" ], [ 1001, "瞳孔样式", "Text_Tab3_1001" ], [ 1002, "瞳孔贴画", "Text_Tab3_1002" ], [ 1003, "上高光", "Text_Tab3_1003" ], [ 1004, "下高光", "Text_Tab3_1004" ], [ 1005, "睫毛", "Text_Tab3_1005" ], [ 1006, "眼影", "Text_Tab3_1006" ], [ 1007, "腮红", "Text_Tab3_1007" ], [ 1008, "口红", "Text_Tab3_1008" ], [ 1009, "面部彩绘", "Text_Tab3_1009" ], [ 1010, "整体发型", "Text_Tab3_1010" ], [ 1011, "前发", "Text_Tab3_1011" ], [ 1012, "后发", "Text_Tab3_1012" ], [ 1013, "左手", "Text_Tab3_1013" ], [ 1014, "右手", "Text_Tab3_1014" ], [ 1015, "背饰", "Text_Tab3_1015" ], [ 1016, "耳饰", "Text_Tab3_1016" ], [ 1017, "面饰", "Text_Tab3_1017" ], [ 1018, "臀部", "Text_Tab3_1018" ], [ 1019, "肩部", "Text_Tab3_1019" ], [ 1020, "特效", "Text_Tab3_1020" ], [ 1021, "拖尾", "Text_Tab3_1021" ], [ 1022, "日常造型1", "Text_Tab3_1022" ], [ 1023, "布偶造型", "Text_Tab3_1023" ], [ 1024, "英雄造型", "Text_Tab3_1024" ], [ 1025, "幻想造型", "Text_Tab3_1025" ], [ 1026, "节日造型", "Text_Tab3_1026" ], [ 1027, "科幻造型", "Text_Tab3_1027" ], [ 1028, "古代造型", "Text_Tab3_1028" ], [ 1029, "长单件", "Text_Tab3_1029" ], [ 1030, "短外套", "Text_Tab3_1030" ], [ 1031, "短单件", "Text_Tab3_1031" ], [ 1032, "套装", "Text_Tab3_1032" ], [ 1033, "长外套", "Text_Tab3_1033" ], [ 1034, "短裙", "Text_Tab3_1034" ], [ 1035, "长裤", "Text_Tab3_1035" ], [ 1036, "短裤", "Text_Tab3_1036" ], [ 1037, "长裙", "Text_Tab3_1037" ], [ 1038, "裤袜", "Text_Tab3_1038" ], [ 1039, "手套", "Text_Tab3_1039" ], [ 1040, "手套饰品", "Text_Tab3_1040" ], [ 1041, "日常鞋", "Text_Tab3_1041" ], [ 1042, "靴子", "Text_Tab3_1042" ], [ 1043, "足套", "Text_Tab3_1043" ], [ 1044, "裸饰", "Text_Tab3_1044" ], [ 1045, "高跟鞋", "Text_Tab3_1045" ], [ 1046, "运动鞋", "Text_Tab3_1046" ], [ 1047, "日常造型2", "Text_Tab3_1047" ], [ 1048, "灵宠", "Text_Tab3_1048" ], [ 2001, "瞳孔样式_收藏", "Text_Tab3_2001" ], [ 2002, "瞳孔贴花_收藏", "Text_Tab3_2002" ], [ 2003, "上高光_收藏", "Text_Tab3_2003" ], [ 2004, "下高光_收藏", "Text_Tab3_2004" ], [ 2005, "睫毛_收藏", "Text_Tab3_2005" ], [ 2006, "眼影_收藏", "Text_Tab3_2006" ], [ 2007, "腮红_收藏", "Text_Tab3_2007" ], [ 2008, "口红_收藏", "Text_Tab3_2008" ], [ 2009, "面部彩绘_收藏", "Text_Tab3_2009" ], [ 2010, "整体发型_收藏", "Text_Tab3_2010" ], [ 2011, "前发_收藏", "Text_Tab3_2011" ], [ 2012, "后发_收藏", "Text_Tab3_2012" ], [ 2013, "左手_收藏", "Text_Tab3_2013" ], [ 2014, "右手_收藏", "Text_Tab3_2014" ], [ 2015, "背饰_收藏", "Text_Tab3_2015" ], [ 2016, "耳饰_收藏", "Text_Tab3_2016" ], [ 2017, "面饰_收藏", "Text_Tab3_2017" ], [ 2018, "臀部_收藏", "Text_Tab3_2018" ], [ 2019, "肩部_收藏", "Text_Tab3_2019" ], [ 2020, "特效_收藏", "Text_Tab3_2020" ], [ 2021, "拖尾_收藏", "Text_Tab3_1021" ] ];

class Tab3Config extends ConfigBase {
    constructor() {
        super(EXCELDATA$5);
    }
}

var foreign76 = Object.freeze({
    __proto__: null,
    Tab3Config: Tab3Config
});

const EXCELDATA$4 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "497927", 2 ], [ 2, null, "497783", 2 ], [ 3, null, "458637", 2 ], [ 4, null, "437607", 2 ], [ 5, null, "299081", 2 ], [ 6, null, "224015", 2 ], [ 7, null, "221706", 2 ], [ 8, null, "217271", 2 ], [ 9, null, "211009", 2 ], [ 10, null, "141710", 2 ], [ 11, null, "137517", 2 ], [ 12, null, "137504", 2 ], [ 13, null, "137491", 2 ], [ 14, null, "137382", 2 ], [ 15, null, "134233", 2 ], [ 16, null, "127636", 2 ], [ 17, null, "119743", 2 ], [ 18, null, "116973", 2 ], [ 19, null, "67589", 2 ], [ 20, null, "66576", 2 ], [ 21, null, "65869", 2 ], [ 22, null, "65659", 2 ], [ 23, null, "64776", 2 ], [ 24, null, "64722", 2 ], [ 25, null, "64309", 2 ], [ 26, null, "64153", 2 ], [ 27, null, "63877", 2 ], [ 28, null, "63553", 2 ], [ 29, null, "63312", 2 ], [ 30, null, "62792", 2 ], [ 31, null, "62791", 2 ], [ 32, null, "62549", 2 ], [ 33, null, "60993", 2 ], [ 34, null, "64815", 1 ] ];

class TightsBottomConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$4);
    }
}

var foreign77 = Object.freeze({
    __proto__: null,
    TightsBottomConfig: TightsBottomConfig
});

const EXCELDATA$3 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, "弓道服", "59536", 2 ], [ 2, "毛衣外套", "59857", 2 ], [ 3, "拖尾婚纱", "60077", 2 ], [ 4, "蝴蝶结桃心裙", "59955", 2 ], [ 5, "恐龙玩偶服", "509868", 2 ], [ 6, "恐龙玩偶服", "509895", 1 ], [ 7, "礼服", "476302", 2 ], [ 8, "礼服", "458752", 1 ], [ 9, "战损休闲装", "458129", 1 ], [ 10, "披风长袖", "455507", 1 ], [ 11, "紧身衣", "64542", 1 ], [ 12, "长袍上衣", "504623", 1 ], [ 13, "礼服", "476242", 1 ], [ 14, "学士服", "264153", 1 ] ];

class TopConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$3);
    }
}

var foreign78 = Object.freeze({
    __proto__: null,
    TopConfig: TopConfig
});

const EXCELDATA$2 = [ [ "ID", "Describe", "AssetId", "Transform", "SexType" ], [ "", "", "", "", "" ], [ 1, null, "484538", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 2, null, "472914", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 3, null, "472706", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 4, null, "467037", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 5, null, "444603", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 6, null, "398522", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 7, null, "397400", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 8, null, "384139", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 9, null, "380860", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 10, null, "380858", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 11, null, "380849", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 12, null, "379886", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 13, null, "375147", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 14, null, "375146", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 15, null, "357366", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 16, null, "357364", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 17, null, "351325", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 18, null, "350256", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 19, null, "350163", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 20, null, "350055", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 21, null, "350053", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 22, null, "349960", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 23, null, "317495", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 24, null, "314952", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 25, null, "314951", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 26, null, "314950", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 27, null, "314949", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 28, null, "314948", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 29, null, "314947", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 30, null, "314946", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 31, null, "314945", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 32, null, "314944", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 33, null, "314943", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 34, null, "290033", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 35, null, "289529", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 36, null, "289528", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 37, null, "287117", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 38, null, "267975", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 39, null, "271639", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 40, null, "265670", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 41, null, "225996", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 42, null, "221187", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 43, null, "221186", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 44, null, "197804", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 45, null, "196217", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 46, null, "195115", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 47, null, "193220", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 48, null, "192273", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 49, null, "186344", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 50, null, "181013", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 51, null, "181011", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 52, null, "153613", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 53, null, "151528", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 54, null, "151527", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 55, null, "150907", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 56, null, "145513", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 57, null, "145510", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 58, null, "145509", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 59, null, "145508", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 60, null, "145507", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 61, null, "145506", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 62, null, "145505", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 63, null, "145504", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 64, null, "145503", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 65, null, "145502", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 66, null, "145500", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 67, null, "145499", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 68, null, "145498", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 69, null, "145497", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 70, null, "145496", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 71, null, "145495", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 72, null, "145494", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 73, null, "145493", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ], [ 74, null, "145492", [ "0", "0", "0", "0", "0", "0", "1", "1", "1" ], 0 ] ];

class TrailingConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$2);
    }
}

var foreign79 = Object.freeze({
    __proto__: null,
    TrailingConfig: TrailingConfig
});

const EXCELDATA$1 = [ [ "ID", "Describe", "AssetId", "SexType" ], [ "", "", "", "" ], [ 1, null, "152735", 0 ], [ 2, null, "77447", 0 ], [ 3, null, "48629", 0 ], [ 4, null, "48041", 0 ], [ 5, null, "48040", 0 ], [ 6, null, "48039", 0 ], [ 7, null, "48038", 0 ], [ 8, null, "48037", 0 ], [ 9, null, "48036", 0 ], [ 10, null, "48034", 0 ], [ 11, null, "48033", 0 ], [ 12, null, "48032", 0 ], [ 13, null, "48031", 0 ], [ 14, null, "48030", 0 ], [ 15, null, "32112", 0 ], [ 16, null, "22660", 0 ], [ 17, null, "22616", 0 ] ];

class UpperHighlightConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA$1);
    }
}

var foreign80 = Object.freeze({
    __proto__: null,
    UpperHighlightConfig: UpperHighlightConfig
});

class GameConfig {
    static initLanguage(languageIndex, getLanguageFun) {
        ConfigBase.initLanguage(languageIndex, getLanguageFun);
        this.configMap.clear();
    }
    static getConfig(ConfigClass) {
        if (!this.configMap.has(ConfigClass.name)) {
            this.configMap.set(ConfigClass.name, new ConfigClass);
        }
        return this.configMap.get(ConfigClass.name);
    }
    static get AccessoriesGloves() {
        return this.getConfig(AccessoriesGlovesConfig);
    }
    static get ActionConfig() {
        return this.getConfig(ActionConfigConfig);
    }
    static get ActionProp() {
        return this.getConfig(ActionPropConfig);
    }
    static get ALongCoatTop() {
        return this.getConfig(ALongCoatTopConfig);
    }
    static get AncientMoldingOutfit() {
        return this.getConfig(AncientMoldingOutfitConfig);
    }
    static get BackHair() {
        return this.getConfig(BackHairConfig);
    }
    static get BackPet() {
        return this.getConfig(BackPetConfig);
    }
    static get Back() {
        return this.getConfig(BackConfig);
    }
    static get Blush() {
        return this.getConfig(BlushConfig);
    }
    static get BodyType() {
        return this.getConfig(BodyTypeConfig);
    }
    static get BootsShoes() {
        return this.getConfig(BootsShoesConfig);
    }
    static get Bottom() {
        return this.getConfig(BottomConfig);
    }
    static get Chat() {
        return this.getConfig(ChatConfig);
    }
    static get ColorValue() {
        return this.getConfig(ColorValueConfig);
    }
    static get DailyStylingOutfit1() {
        return this.getConfig(DailyStylingOutfit1Config);
    }
    static get DailyStylingOutfit2() {
        return this.getConfig(DailyStylingOutfit2Config);
    }
    static get Description() {
        return this.getConfig(DescriptionConfig);
    }
    static get Ear() {
        return this.getConfig(EarConfig);
    }
    static get Effects() {
        return this.getConfig(EffectsConfig);
    }
    static get EverydayShoes() {
        return this.getConfig(EverydayShoesConfig);
    }
    static get Expression() {
        return this.getConfig(ExpressionConfig);
    }
    static get Eyebrows() {
        return this.getConfig(EyebrowsConfig);
    }
    static get Eyelashes() {
        return this.getConfig(EyelashesConfig);
    }
    static get Eyeshadow() {
        return this.getConfig(EyeshadowConfig);
    }
    static get FaceExpression() {
        return this.getConfig(FaceExpressionConfig);
    }
    static get FaceTattoo() {
        return this.getConfig(FaceTattooConfig);
    }
    static get Face() {
        return this.getConfig(FaceConfig);
    }
    static get Facing() {
        return this.getConfig(FacingConfig);
    }
    static get FantasyModelingOutfit() {
        return this.getConfig(FantasyModelingOutfitConfig);
    }
    static get FootCoverShoes() {
        return this.getConfig(FootCoverShoesConfig);
    }
    static get FrontHair() {
        return this.getConfig(FrontHairConfig);
    }
    static get FullHair() {
        return this.getConfig(FullHairConfig);
    }
    static get GlovesGloves() {
        return this.getConfig(GlovesGlovesConfig);
    }
    static get Gloves() {
        return this.getConfig(GlovesConfig);
    }
    static get HeroStylingOutfit() {
        return this.getConfig(HeroStylingOutfitConfig);
    }
    static get HighHeelsShoes() {
        return this.getConfig(HighHeelsShoesConfig);
    }
    static get Hip() {
        return this.getConfig(HipConfig);
    }
    static get HolidayStylingOutfit() {
        return this.getConfig(HolidayStylingOutfitConfig);
    }
    static get Interact() {
        return this.getConfig(InteractConfig);
    }
    static get Language() {
        return this.getConfig(LanguageConfig);
    }
    static get LeftHand() {
        return this.getConfig(LeftHandConfig);
    }
    static get Lens() {
        return this.getConfig(LensConfig);
    }
    static get LipMakeup() {
        return this.getConfig(LipMakeupConfig);
    }
    static get LongPantsBottom() {
        return this.getConfig(LongPantsBottomConfig);
    }
    static get LongSinglePieceTop() {
        return this.getConfig(LongSinglePieceTopConfig);
    }
    static get LongSkirtBottom() {
        return this.getConfig(LongSkirtBottomConfig);
    }
    static get LowerHighlight() {
        return this.getConfig(LowerHighlightConfig);
    }
    static get MuppetStylingOutfit() {
        return this.getConfig(MuppetStylingOutfitConfig);
    }
    static get Music() {
        return this.getConfig(MusicConfig);
    }
    static get NakedDressShoes() {
        return this.getConfig(NakedDressShoesConfig);
    }
    static get Outfit() {
        return this.getConfig(OutfitConfig);
    }
    static get Pet() {
        return this.getConfig(PetConfig);
    }
    static get PupilStyle() {
        return this.getConfig(PupilStyleConfig);
    }
    static get RightHand() {
        return this.getConfig(RightHandConfig);
    }
    static get ScienceFictionStylingOutfit() {
        return this.getConfig(ScienceFictionStylingOutfitConfig);
    }
    static get ShareId() {
        return this.getConfig(ShareIdConfig);
    }
    static get Shoes() {
        return this.getConfig(ShoesConfig);
    }
    static get ShortJacketTop() {
        return this.getConfig(ShortJacketTopConfig);
    }
    static get ShortsBottom() {
        return this.getConfig(ShortsBottomConfig);
    }
    static get ShortSinglePieceTop() {
        return this.getConfig(ShortSinglePieceTopConfig);
    }
    static get ShortSkirtBottom() {
        return this.getConfig(ShortSkirtBottomConfig);
    }
    static get Shoulder() {
        return this.getConfig(ShoulderConfig);
    }
    static get SkinTone() {
        return this.getConfig(SkinToneConfig);
    }
    static get SportsShoesShoes() {
        return this.getConfig(SportsShoesShoesConfig);
    }
    static get SuitTop() {
        return this.getConfig(SuitTopConfig);
    }
    static get Tab1() {
        return this.getConfig(Tab1Config);
    }
    static get Tab2() {
        return this.getConfig(Tab2Config);
    }
    static get Tab3() {
        return this.getConfig(Tab3Config);
    }
    static get TightsBottom() {
        return this.getConfig(TightsBottomConfig);
    }
    static get Top() {
        return this.getConfig(TopConfig);
    }
    static get Trailing() {
        return this.getConfig(TrailingConfig);
    }
    static get UpperHighlight() {
        return this.getConfig(UpperHighlightConfig);
    }
}

GameConfig.configMap = new Map;

var foreign39 = Object.freeze({
    __proto__: null,
    GameConfig: GameConfig
});

const EXCELDATA = [ [ "ID", "TriggerGuid", "InteractivityGuid", "HumanoidSlotType", "SitStance", "BagId" ], [ "", "", "", "", "", "" ], [ 1, "379F8E9E", "0D0850BD", 19, "122227", 10006 ], [ 2, "2555EDAA", "3D215C3A", 17, "122231", 10106 ], [ 3, "36A4512B", "270D9130", 18, "122232", 10016 ], [ 4, "0A2CF72B", "38F1AE5C", 19, "15208", 10016 ] ];

class SitConfig extends ConfigBase {
    constructor() {
        super(EXCELDATA);
    }
}

var foreign70 = Object.freeze({
    __proto__: null,
    SitConfig: SitConfig
});

class GlobalData {}

GlobalData.languageId = 1;

GlobalData.isOpenIAA = false;

GlobalData.bagCount = 5;

GlobalData.worldCount = 500;

GlobalData.freeTime = 999;

GlobalData.offMusicIconGuid = `133403`;

GlobalData.onMusicIconGuid = `133445`;

GlobalData.savaMaxCount = 6;

var EventType;

(function(EventType) {
    EventType["OnOffMainUI"] = "OnOffMainUI";
    EventType["SwitchCamera"] = "SwitchCamera";
})(EventType || (EventType = {}));

var CameraManagerType;

(function(CameraManagerType) {
    CameraManagerType[CameraManagerType["Head"] = 104] = "Head";
    CameraManagerType[CameraManagerType["Body"] = 105] = "Body";
})(CameraManagerType || (CameraManagerType = {}));

var foreign82 = Object.freeze({
    __proto__: null,
    get CameraManagerType() {
        return CameraManagerType;
    },
    get EventType() {
        return EventType;
    },
    default: GlobalData
});

var MapEx;

(function(MapEx) {
    function isNull(map) {
        return !map || map == null || map == undefined;
    }
    MapEx.isNull = isNull;
    function get(map, key) {
        if (map[key]) {
            return map[key];
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            return map[key];
        }
        return null;
    }
    MapEx.get = get;
    function set(map, key, val) {
        map[key] = val;
    }
    MapEx.set = set;
    function del(map, key) {
        if (map[key]) {
            delete map[key];
            return true;
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            delete map[key];
            return true;
        }
        return false;
    }
    MapEx.del = del;
    function has(map, key) {
        if (map[key]) {
            return true;
        }
        let has = false;
        let keys = Object.keys(map);
        for (let i = 0; i < keys.length; ++i) {
            if (keys[i] == key) {
                has = true;
                break;
            }
        }
        if (has) {
            return true;
        }
        return false;
    }
    MapEx.has = has;
    function count(map) {
        let res = 0;
        forEach(map, (e => {
            ++res;
        }));
        return res;
    }
    MapEx.count = count;
    function forEach(map, callback) {
        for (let key in map) {
            if (map[key]) {
                callback(key, map[key]);
            }
        }
    }
    MapEx.forEach = forEach;
    function copy(map) {
        let res = {};
        for (let key in map) {
            res[key] = map[key];
        }
        return res;
    }
    MapEx.copy = copy;
})(MapEx || (MapEx = {}));

var foreign142 = Object.freeze({
    __proto__: null,
    get MapEx() {
        return MapEx;
    }
});

class CharacterData extends Subdata {
    constructor() {
        super(...arguments);
        this.characterDataMap = {};
    }
    setCharacterData(key, value) {
        MapEx.set(this.characterDataMap, key, value);
        this.save(false);
        return true;
    }
    delCharacterData(key) {
        if (MapEx.has(this.characterDataMap, key)) {
            MapEx.del(this.characterDataMap, key);
            this.save(false);
            return true;
        }
        return false;
    }
    clearCharacterData() {
        this.characterDataMap = {};
        this.save(false);
        return true;
    }
}

__decorate([ Decorator.persistence() ], CharacterData.prototype, "characterDataMap", void 0);

var foreign84 = Object.freeze({
    __proto__: null,
    CharacterData: CharacterData
});

class Decora {
    constructor(decoraStr) {
        let arr = decoraStr.split("#");
        if (arr.length < 4) throw new Error(`decoraStr Fail`);
        this.skeletonName = arr[0];
        this.assetId = arr[1];
        this.slotName = arr[2];
        this.relativeTransform = mw.Transform.fromString(arr[3]);
    }
}

var DecorType;

(function(DecorType) {
    DecorType[DecorType["None"] = 1] = "None";
    DecorType[DecorType["StaticObj"] = 2] = "StaticObj";
    DecorType[DecorType["Effect"] = 3] = "Effect";
})(DecorType || (DecorType = {}));

var ItemType;

(function(ItemType) {
    ItemType[ItemType["物品类型"] = 1] = "物品类型";
    ItemType[ItemType["道具类型"] = 2] = "道具类型";
    ItemType[ItemType["消耗类型"] = 3] = "消耗类型";
    ItemType[ItemType["服饰类型"] = 4] = "服饰类型";
    ItemType[ItemType["上衣"] = 5] = "上衣";
    ItemType[ItemType["下衣"] = 6] = "下衣";
    ItemType[ItemType["手套"] = 7] = "手套";
    ItemType[ItemType["鞋子"] = 8] = "鞋子";
    ItemType[ItemType["前发"] = 9] = "前发";
    ItemType[ItemType["后发"] = 10] = "后发";
    ItemType[ItemType["眼睛贴图"] = 11] = "眼睛贴图";
    ItemType[ItemType["瞳孔贴图"] = 12] = "瞳孔贴图";
    ItemType[ItemType["睫毛"] = 13] = "睫毛";
    ItemType[ItemType["眉毛"] = 14] = "眉毛";
    ItemType[ItemType["唇膏"] = 15] = "唇膏";
    ItemType[ItemType["腮红"] = 16] = "腮红";
    ItemType[ItemType["表情"] = 17] = "表情";
    ItemType[ItemType["整体发型"] = 18] = "整体发型";
    ItemType[ItemType["套装"] = 19] = "套装";
    ItemType[ItemType["体型"] = 20] = "体型";
    ItemType[ItemType["面部"] = 21] = "面部";
    ItemType[ItemType["UGC上衣"] = 22] = "UGC上衣";
    ItemType[ItemType["UGC下衣"] = 23] = "UGC下衣";
    ItemType[ItemType["UGC手套"] = 24] = "UGC手套";
    ItemType[ItemType["UGC鞋子"] = 25] = "UGC鞋子";
    ItemType[ItemType["眼影"] = 26] = "眼影";
    ItemType[ItemType["背景_废弃"] = 27] = "背景_废弃";
    ItemType[ItemType["挂件_左手"] = 28] = "挂件_左手";
    ItemType[ItemType["挂件_背部"] = 29] = "挂件_背部";
    ItemType[ItemType["挂件_头部"] = 30] = "挂件_头部";
    ItemType[ItemType["挂件_耳部"] = 31] = "挂件_耳部";
    ItemType[ItemType["挂件_面部"] = 32] = "挂件_面部";
    ItemType[ItemType["耳朵"] = 33] = "耳朵";
    ItemType[ItemType["鼻子"] = 34] = "鼻子";
    ItemType[ItemType["嘴巴"] = 35] = "嘴巴";
    ItemType[ItemType["面部彩绘"] = 36] = "面部彩绘";
    ItemType[ItemType["上高光"] = 37] = "上高光";
    ItemType[ItemType["下高光"] = 38] = "下高光";
    ItemType[ItemType["挂件_臀部"] = 39] = "挂件_臀部";
    ItemType[ItemType["挂件_肩部"] = 40] = "挂件_肩部";
    ItemType[ItemType["背景"] = 41] = "背景";
    ItemType[ItemType["挂件_宠物"] = 42] = "挂件_宠物";
    ItemType[ItemType["挂件_特效"] = 43] = "挂件_特效";
    ItemType[ItemType["脸型"] = 44] = "脸型";
    ItemType[ItemType["全妆"] = 45] = "全妆";
    ItemType[ItemType["V1皮套"] = 46] = "V1皮套";
    ItemType[ItemType["挂件_左手_全骨骼"] = 47] = "挂件_左手_全骨骼";
    ItemType[ItemType["挂件_背饰_全骨骼"] = 48] = "挂件_背饰_全骨骼";
    ItemType[ItemType["挂件_头饰_全骨骼"] = 49] = "挂件_头饰_全骨骼";
    ItemType[ItemType["挂件_耳饰_全骨骼"] = 50] = "挂件_耳饰_全骨骼";
    ItemType[ItemType["挂件_面饰_全骨骼"] = 51] = "挂件_面饰_全骨骼";
    ItemType[ItemType["挂件_臀部_全骨骼"] = 52] = "挂件_臀部_全骨骼";
    ItemType[ItemType["挂件_肩部_全骨骼"] = 53] = "挂件_肩部_全骨骼";
    ItemType[ItemType["肤色"] = 1234124] = "肤色";
})(ItemType || (ItemType = {}));

var AvatarDecora;

(function(AvatarDecora) {
    AvatarDecora.dynamicItemType = [ ItemType.挂件_左手_全骨骼, ItemType.挂件_背饰_全骨骼, ItemType.挂件_头饰_全骨骼, ItemType.挂件_耳饰_全骨骼, ItemType.挂件_面饰_全骨骼, ItemType.挂件_臀部_全骨骼, ItemType.挂件_肩部_全骨骼 ];
    AvatarDecora.staticItemType = [ ItemType.挂件_左手, ItemType.挂件_背部, ItemType.挂件_头部, ItemType.挂件_耳部, ItemType.挂件_面部, ItemType.挂件_臀部, ItemType.挂件_肩部 ];
    function getDynamicIndexBySlotIndex(slotIndex) {
        let itemType;
        switch (slotIndex) {
          case mw.HumanoidSlotType.LeftGlove:
            itemType = ItemType.挂件_左手_全骨骼;
            break;

          case mw.HumanoidSlotType.BackOrnamental:
            itemType = ItemType.挂件_背饰_全骨骼;
            break;

          case mw.HumanoidSlotType.Head:
            itemType = ItemType.挂件_头饰_全骨骼;
            break;

          case mw.HumanoidSlotType.LeftHead:
            itemType = ItemType.挂件_耳饰_全骨骼;
            break;

          case mw.HumanoidSlotType.FaceOrnamental:
            itemType = ItemType.挂件_面饰_全骨骼;
            break;

          case mw.HumanoidSlotType.Buttocks:
            itemType = ItemType.挂件_臀部_全骨骼;
            break;

          case mw.HumanoidSlotType.RightBack:
            itemType = ItemType.挂件_肩部_全骨骼;
            break;
        }
        return getDynamicIndexByItemType(itemType);
    }
    AvatarDecora.getDynamicIndexBySlotIndex = getDynamicIndexBySlotIndex;
    function getDynamicIndexByItemType(itemType) {
        return AvatarDecora.dynamicItemType.indexOf(itemType);
    }
    AvatarDecora.getDynamicIndexByItemType = getDynamicIndexByItemType;
    function getItemTypeByDynamicIndex(dynamicIndex) {
        return AvatarDecora.dynamicItemType[dynamicIndex];
    }
    AvatarDecora.getItemTypeByDynamicIndex = getItemTypeByDynamicIndex;
    function exclusiveItemType(itemType) {
        const index = AvatarDecora.dynamicItemType.indexOf(itemType);
        if (index >= 0) return AvatarDecora.staticItemType[index];
        const index2 = AvatarDecora.staticItemType.indexOf(itemType);
        if (index2 >= 0) return AvatarDecora.dynamicItemType[index];
    }
    AvatarDecora.exclusiveItemType = exclusiveItemType;
    function setDecor3(char, itemType, assetId, slotData) {
        if (AvatarDecora.dynamicItemType.includes(itemType)) {
            return setDynamicDecor(char, getDynamicIndexByItemType(itemType), assetId);
        } else if (AvatarDecora.staticItemType.includes(itemType)) {
            const slotIndex = getSlotByItemType(itemType);
            if (slotIndex == slotData.slotIndex && slotData?.offset) {
                return setDecoraBase(char, slotIndex, assetId, slotData.offset);
            }
        } else if (itemType == ItemType.挂件_特效) {
            if (slotData?.offset) {
                return setDecoraBase(char, slotData.slotIndex, assetId, slotData.offset);
            }
        }
        console.error(`挂件数据异常:itemType:${itemType},assetId:${assetId},slotData:${JSON.stringify(slotData)}`);
    }
    AvatarDecora.setDecor3 = setDecor3;
    async function setDecora(decoraStr, char = undefined) {
        let decora = deserialize(decoraStr);
        return setDecoraBase(char, decora.slotIndex, decora.assetId, decora.relativeTransform);
    }
    AvatarDecora.setDecora = setDecora;
    async function setDecora2(char, slotIndex, assetId, offset) {
        return setDecoraBase(char, slotIndex, assetId, offset);
    }
    AvatarDecora.setDecora2 = setDecora2;
    async function setDecoraBase(char, slotIndex, assetId, offset) {
        let obj = await GameObject.asyncSpawn(assetId);
        if (obj) {
            obj.setCollision(mw.PropertyStatus.Off, true);
            char.description.advance.slotAndDecoration.slot[slotIndex].decoration.add(obj, offset);
            return true;
        }
        return false;
    }
    AvatarDecora.setDecoraBase = setDecoraBase;
    function clearDynamicDecorByIndex(char, dynamicIndex) {
        const decor = char.description.advance.dynamicAttachments[dynamicIndex];
        if (decor?.style?.length > 0) {
            decor.style = "";
        }
    }
    AvatarDecora.clearDynamicDecorByIndex = clearDynamicDecorByIndex;
    async function setDynamicDecor(char, dynamicIndex, assetId) {
        if (!EDynamicAttachmentIndex[dynamicIndex]) {
            console.error(`动态骨骼索引异常:${dynamicIndex}`);
            return false;
        }
        let downloadSucceed = await AssetUtil.asyncDownloadAsset(assetId);
        if (!downloadSucceed) return false;
        if (char.description.advance.dynamicAttachments[dynamicIndex].style != assetId) {
            char.description.advance.dynamicAttachments[dynamicIndex].style = assetId;
        }
        await char.asyncReady();
        const succeed = char.description.advance.dynamicAttachments[dynamicIndex].style == assetId;
        if (succeed) {
            clearOneDecoraByItemType(exclusiveItemType(getItemTypeByDynamicIndex(dynamicIndex)), char);
        }
        return succeed;
    }
    AvatarDecora.setDynamicDecor = setDynamicDecor;
    function clearOneDecoraBySlotIndex(slotIndex, char = undefined, objType = DecorType.StaticObj) {
        if (objType == DecorType.Effect) {
            let slot = char.description.advance.slotAndDecoration.slot;
            if (!slot || slot.length == 0) return;
            for (let i = 0; i < slot.length; ++i) {
                let decoration = slot[i]?.decoration;
                if (!decoration) continue;
                for (let j = 0; j < decoration.length; ++j) {
                    let attachmentGameObject = decoration[j]?.attachmentGameObject;
                    if (!attachmentGameObject || !(attachmentGameObject instanceof mw.Effect)) continue;
                    decoration.delete(attachmentGameObject, true);
                }
            }
        } else {
            let decoration = char.description.advance.slotAndDecoration.slot[slotIndex].decoration;
            if (!decoration || decoration.length == 0) return;
            for (let i = 0; i < decoration.length; ++i) {
                let attachmentGameObject = decoration[i]?.attachmentGameObject;
                if (!attachmentGameObject) continue;
                switch (objType) {
                  case DecorType.None:
                    decoration.delete(attachmentGameObject, true);
                    break;

                  case DecorType.StaticObj:
                    if (!(attachmentGameObject instanceof mw.Effect)) {
                        decoration.delete(attachmentGameObject, true);
                    }
                    break;

                  default:
                    console.error(`未知挂件类型${objType}`);
                    break;
                }
            }
        }
    }
    AvatarDecora.clearOneDecoraBySlotIndex = clearOneDecoraBySlotIndex;
    function clearAllDecora(char = undefined) {
        char.detachAllFromSlot({
            isDestroy: true
        });
        for (let i = 0; i < char.description.advance.dynamicAttachments.length; ++i) {
            if (char.description.advance.dynamicAttachments[i].style != "") {
                char.description.advance.dynamicAttachments[i].style = "";
            }
        }
    }
    AvatarDecora.clearAllDecora = clearAllDecora;
    function deserialize(decoraStr) {
        if (decoraStr.includes("#")) {
            let strs = decoraStr.split("#");
            if (strs[1] && strs[2]) return {
                assetId: strs[1],
                slotIndex: getSlotIndexByName(strs[2]),
                relativeTransform: mw.Transform.fromString(strs[3]),
                highModel: strs[4] == "high"
            };
        } else {
            let strs = decoraStr.split("$");
            if (strs.length >= 3) return {
                assetId: strs[0],
                slotIndex: getSlotIndexByName(strs[1]),
                relativeTransform: mw.Transform.fromString(strs[2]),
                highModel: strs[3] == "high"
            };
        }
        return undefined;
    }
    AvatarDecora.deserialize = deserialize;
    function getSlotIndexByName(slotName) {
        switch (slotName) {
          case "Head":
            return HumanoidSlotType["Head"];

          case "Left_Glove":
            return HumanoidSlotType["LeftGlove"];

          case "Left_Head":
            return HumanoidSlotType["LeftHead"];

          case "BackOrnamental":
            return HumanoidSlotType["BackOrnamental"];

          case "Buns":
            return HumanoidSlotType["Buttocks"];

          case "Right_Shoulder":
            return HumanoidSlotType["RightShoulder"];
        }
        return HumanoidSlotType[slotName];
    }
    AvatarDecora.getSlotIndexByName = getSlotIndexByName;
    function getSlotNameByIndex(slotIndex) {
        return HumanoidSlotType[slotIndex];
    }
    AvatarDecora.getSlotNameByIndex = getSlotNameByIndex;
    function getDecorationsString(char) {
        let slot = char.description.advance.slotAndDecoration.slot;
        let decs = [];
        for (let i = 0; i < slot.length; i++) {
            for (let j = 0; j < slot[i].decoration.length; j++) {
                let str = `MW_Skeleton#${slot[i].decoration[j].attachmentAssetId}#${getSlotNameByIndex(i)}#${slot[i].decoration[j].attachmentOffset.toString()}`;
                decs.push(str);
            }
        }
        return decs;
    }
    AvatarDecora.getDecorationsString = getDecorationsString;
    async function vefDescra(char) {
        let slot = char.description.advance.slotAndDecoration.slot;
        for (let i = 0; i < slot.length; i++) {
            let objs = [];
            for (let j = 0; j < slot[i].decoration.length; j++) {
                if (objs.includes(slot[i].decoration[j].attachmentAssetId)) slot[i].decoration.delete(slot[i].decoration[j].attachmentGameObject, true); else objs.push(slot[i].decoration[j].attachmentAssetId);
            }
        }
    }
    AvatarDecora.vefDescra = vefDescra;
    function getSlotByItemType(itemType) {
        switch (itemType) {
          case ItemType.挂件_左手:
            return mw.HumanoidSlotType.LeftGlove;

          case ItemType.挂件_背部:
            return mw.HumanoidSlotType.BackOrnamental;

          case ItemType.挂件_头部:
            return mw.HumanoidSlotType.Head;

          case ItemType.挂件_耳部:
            return mw.HumanoidSlotType.LeftHead;

          case ItemType.挂件_面部:
            return mw.HumanoidSlotType.FaceOrnamental;

          case ItemType.挂件_臀部:
            return mw.HumanoidSlotType.Buttocks;

          case ItemType.挂件_肩部:
            return mw.HumanoidSlotType.RightBack;
        }
    }
    AvatarDecora.getSlotByItemType = getSlotByItemType;
    function clearOneDecoraByItemType(itemType, char) {
        if (itemType == ItemType.挂件_特效) {
            let slot = char.description.advance.slotAndDecoration.slot;
            for (let i = 0; i < slot.length; i++) {
                for (let j = 0; j < slot[i].decoration.length; j++) {
                    let obj = slot[i].decoration[j].attachmentGameObject;
                    if (obj instanceof mw.Effect) {
                        slot[i].decoration.delete(obj, true);
                    }
                }
            }
        } else if (AvatarDecora.dynamicItemType.includes(itemType)) {
            clearDynamicDecorByIndex(char, getDynamicIndexByItemType(itemType));
        } else {
            let slotIndex = getSlotByItemType(itemType);
            let slot = char.description.advance.slotAndDecoration.slot[slotIndex];
            if (!slot || slot.decoration.length == 0) return;
            for (let j = 0; j < slot.decoration.length; j++) {
                let obj = slot.decoration[j].attachmentGameObject;
                if (!(obj instanceof mw.Effect)) {
                    slot.decoration.delete(obj, true);
                }
            }
        }
    }
    AvatarDecora.clearOneDecoraByItemType = clearOneDecoraByItemType;
    function getDecorByItemType(char, itemType) {
        if (itemType == ItemType.挂件_特效) {
            let slot = char.description.advance.slotAndDecoration.slot;
            for (let i = 0; i < slot.length; i++) {
                for (let j = 0; j < slot[i].decoration.length; j++) {
                    const obj = slot[i].decoration[j].attachmentGameObject;
                    if (obj instanceof mw.Effect) {
                        return slot[i].decoration[j].attachmentAssetId;
                    }
                }
            }
        } else if (AvatarDecora.dynamicItemType.includes(itemType)) {
            return char.description.advance.dynamicAttachments[getDynamicIndexByItemType(itemType)]?.style;
        } else {
            let slotIndex = getSlotByItemType(itemType);
            if (mw.HumanoidSlotType[slotIndex]) {
                let slot = char.description.advance.slotAndDecoration.slot[slotIndex];
                let f = slot;
                for (let j = 0; j < f.decoration.length; j++) {
                    if (!(f.decoration[j].attachmentGameObject instanceof mw.Effect)) {
                        let assetId = f.decoration[j].attachmentAssetId;
                        if (assetId) return assetId;
                    }
                }
            }
        }
    }
    AvatarDecora.getDecorByItemType = getDecorByItemType;
})(AvatarDecora || (AvatarDecora = {}));

var foreign138 = Object.freeze({
    __proto__: null,
    get AvatarDecora() {
        return AvatarDecora;
    },
    get DecorType() {
        return DecorType;
    },
    Decora: Decora,
    get ItemType() {
        return ItemType;
    }
});

var AvatarApi;

(function(AvatarApi) {
    let ValueType;
    (function(ValueType) {
        ValueType[ValueType["Number"] = 1] = "Number";
        ValueType[ValueType["String"] = 2] = "String";
        ValueType[ValueType["Color"] = 3] = "Color";
    })(ValueType || (ValueType = {}));
    class FuncCls {
        constructor(getFunc, setFunc, cfg, hasArea) {
            this.getFunc = getFunc;
            this.setFunc = setFunc;
            this.cfg = cfg;
            this.hasArea = hasArea;
        }
    }
    AvatarApi.funcMap = new Map;
    var areaCountMap = new Map;
    function initMap() {
        for (const cfg of GameConfig.Description.getAllElement()) {
            let getFunc;
            let setFunc;
            let hasArea = false;
            if (cfg.tsAttribute.includes("[]")) {
                const s = cfg.tsAttribute.replace("[]", "[areaIndex]");
                getFunc = new Function("char", "areaIndex", `return char.description.${s}`);
                console.log();
                hasArea = true;
                setFunc = new Function("char", "value", "areaIndex", `char.description.${s} = value`);
                let str = cfg.tsAttribute.split("[]");
                const tmp = str[0];
                const func = new Function("char", `return char.description.${tmp}.length`);
                areaCountMap.set(cfg.funcIndex, func);
            } else {
                getFunc = new Function("char", `return char.description.${cfg.tsAttribute}`);
                setFunc = new Function("char", "value", `char.description.${cfg.tsAttribute} = value`);
            }
            AvatarApi.funcMap.set(cfg.funcIndex, new FuncCls(getFunc, setFunc, cfg, hasArea));
        }
    }
    initMap();
    class DescriptionApiData {
        constructor() {
            this.apiValue = [];
        }
    }
    AvatarApi.DescriptionApiData = DescriptionApiData;
    async function setDescriptionByApiData2(char, apiData) {
        if (apiData.apiValue.length % 2 != 0) throw new Error(`apiData.apiValue数据长度异常,${JSON.stringify(apiData)}`);
        const dMap = new Map;
        const baseMap = new Map;
        const subMap = new Map;
        let funcIndex175Value;
        let loadMainPartSucceed = true;
        const onLoadDescriptionFailed = () => {
            loadMainPartSucceed = false;
            console.log(`setDescriptionByApiData2 加载主要部件失败`);
        };
        char.onLoadDescriptionFailed.add(onLoadDescriptionFailed);
        for (let i = 0; i < apiData.apiValue.length; i += 2) {
            const funcIndex = apiData.apiValue[i];
            const funcObj = AvatarApi.funcMap.get(funcIndex);
            let areaIndex;
            let value;
            if (funcObj.hasArea) {
                const strValue = apiData.apiValue[i + 1];
                const strArr = strValue.split("|");
                areaIndex = parseInt(strArr[0]);
                value = deserialize(funcObj.cfg.valueType, strArr[1]);
            } else value = deserialize(funcObj.cfg.valueType, apiData.apiValue[i + 1]);
            if (dMap.has(funcIndex)) {
                dMap.get(funcIndex).push({
                    funcObj: funcObj,
                    areaIndex: areaIndex,
                    value: value
                });
            } else {
                dMap.set(funcIndex, [ {
                    funcObj: funcObj,
                    areaIndex: areaIndex,
                    value: value
                } ]);
            }
            if (funcIndex == 175) funcIndex175Value = value;
        }
        for (const [funcIndex, v] of dMap) {
            const funcObj = AvatarApi.funcMap.get(funcIndex);
            if (funcObj.cfg.dependence) {
                subMap.set(funcIndex, v);
            } else {
                baseMap.set(funcIndex, v);
            }
        }
        for (const [k, v] of baseMap) {
            for (const e of v) {
                try {
                    e.funcObj.setFunc(char, e.value, e.areaIndex);
                } catch (error) {
                    if (e.areaIndex != null) console.error(`setDescriptionByApiData1 error,funcIndex(${e.funcObj.cfg.funcIndex}),areaIndex(${e.areaIndex}),value(${e.value})`); else console.error(`setDescriptionByApiData1 error,funcIndex(${e.funcObj.cfg.funcIndex}),value(${e.value})`);
                }
            }
        }
        for (const [k, v] of subMap) {
            for (const e of v) {
                try {
                    e.funcObj.setFunc(char, e.value, e.areaIndex);
                } catch (error) {
                    if (e.areaIndex != null) console.error(`setDescriptionByApiData1 error,funcIndex(${e.funcObj.cfg.funcIndex}),areaIndex(${e.areaIndex}),value(${e.value})`); else console.error(`setDescriptionByApiData1 error,funcIndex(${e.funcObj.cfg.funcIndex}),value(${e.value})`);
                }
            }
        }
        if (funcIndex175Value) {
            let style = getStyle(funcIndex175Value);
            if (!(style == StyleType.Quadratic)) {
                char.description.advance.hair.frontHair.style = "";
            }
        }
        await setSlotData(char, apiData.slotData);
        await setDynamicDecor(char, apiData.dynDecor);
        char.onLoadDescriptionFailed.remove(onLoadDescriptionFailed);
        return loadMainPartSucceed;
    }
    AvatarApi.setDescriptionByApiData2 = setDescriptionByApiData2;
    function eqSerializationValue(char, funcIndex, value, areaIndex) {
        const curValue = getByFuncIndex(char, funcIndex, areaIndex);
        if (curValue == null || curValue == `undefined` || value == null || value == `undefined`) return true;
        const valueType = AvatarApi.funcMap.get(funcIndex).cfg.valueType;
        const curV = serialization(valueType, curValue);
        let eqValue = false;
        switch (valueType) {
          case ValueType.Number:
            eqValue = Math.abs(curV - value) <= .01;
            break;

          case ValueType.Color:
            try {
                let curColor = deserialize(ValueType.Color, curV);
                let color = deserialize(ValueType.Color, value);
                eqValue = curColor.equality(color, .01);
            } catch (error) {
                console.log(`eqSerializationValue error:${error}`);
            }
            break;

          default:
            eqValue = curV == value;
            break;
        }
        return eqValue;
    }
    function getAllData(char, dataVersion = 1) {
        const data = new DescriptionApiData;
        data.version = dataVersion;
        if (data.version == 1) {
            for (const [funcIndex, v] of AvatarApi.funcMap) {
                if (areaCountMap.has(funcIndex)) {
                    for (let areaIndex = 0; areaIndex <= areaCountMap.get(funcIndex)(char); areaIndex++) {
                        const serializationValue = getSerializationValueByFuncIndex(char, funcIndex, areaIndex);
                        if (serializationValue != null) data.apiValue.push(funcIndex, `${areaIndex}|${serializationValue}`);
                    }
                } else {
                    const serializationValue = getSerializationValueByFuncIndex(char, funcIndex);
                    if (serializationValue != null) data.apiValue.push(funcIndex, serializationValue);
                }
                data.slotData = getSlotDataArr(char);
                data.dynDecor = getDynamicDecor(char);
            }
        }
        return data;
    }
    AvatarApi.getAllData = getAllData;
    function getAsset(char) {
        const assets = [];
        for (const [funcIndex, v] of AvatarApi.funcMap) {
            if (v.cfg.valueType == ValueType.String && !areaCountMap.has(funcIndex)) {
                if (areaCountMap.has(funcIndex)) {
                    for (let areaIndex = 0; areaIndex <= areaCountMap.get(funcIndex)(char); areaIndex++) {
                        const serializationValue = getSerializationValueByFuncIndex(char, funcIndex, areaIndex);
                        if (serializationValue != null) assets.push({
                            funcIndex: funcIndex,
                            assetId: serializationValue,
                            areaIndex: areaIndex
                        });
                    }
                } else {
                    const serializationValue = getSerializationValueByFuncIndex(char, funcIndex);
                    if (serializationValue != null) assets.push({
                        funcIndex: funcIndex,
                        assetId: serializationValue
                    });
                }
            }
        }
        return assets;
    }
    AvatarApi.getAsset = getAsset;
    function getByFuncIndexArr(char, funcIndexArr, dataVersion = 1) {
        const data = new DescriptionApiData;
        data.version = dataVersion;
        if (data.version == 1) {
            for (const funcIndex of funcIndexArr) {
                if (areaCountMap.has(funcIndex)) {
                    for (let areaIndex = 0; areaIndex <= areaCountMap.get(funcIndex)(char); areaIndex++) {
                        const serializationValue = getSerializationValueByFuncIndex(char, funcIndex, areaIndex);
                        if (serializationValue != null) data.apiValue.push(funcIndex, `${areaIndex}|${serializationValue}`);
                    }
                } else {
                    const serializationValue = getSerializationValueByFuncIndex(char, funcIndex);
                    if (serializationValue != null) data.apiValue.push(funcIndex, serializationValue);
                }
            }
        }
        return data;
    }
    AvatarApi.getByFuncIndexArr = getByFuncIndexArr;
    function getDataBySaveType(char, saveType, dataVersion = 1, extraFuncIndexArr) {
        let funcIndexArr = [];
        for (const cfg of GameConfig.Description.getAllElement()) {
            switch (cfg.saveType) {
              case saveType:
                funcIndexArr.push(cfg.funcIndex);
                break;
            }
        }
        extraFuncIndexArr?.forEach((e => {
            funcIndexArr.push(e);
        }));
        return getByFuncIndexArr(char, funcIndexArr, dataVersion);
    }
    AvatarApi.getDataBySaveType = getDataBySaveType;
    function getDataBySaveTypeArr(char, saveTypeArr, dataVersion = 1, extraFuncIndexArr) {
        let funcIndexArr = [];
        for (const cfg of GameConfig.Description.getAllElement()) {
            saveTypeArr.forEach((saveType => {
                if (cfg.saveType == saveType) funcIndexArr.push(cfg.funcIndex);
            }));
        }
        extraFuncIndexArr?.forEach((e => {
            funcIndexArr.push(e);
        }));
        return getByFuncIndexArr(char, funcIndexArr, dataVersion);
    }
    AvatarApi.getDataBySaveTypeArr = getDataBySaveTypeArr;
    function getSerializationValueByFuncIndex(char, funcIndex, areaIndex) {
        try {
            const funcObj = AvatarApi.funcMap.get(funcIndex);
            const v2 = funcObj.getFunc(char, areaIndex);
            if (v2 != null) {
                const serializationValue = serialization(funcObj.cfg.valueType, v2);
                return serializationValue;
            }
            return null;
        } catch (error) {
            console.error(`getSerializationValueByFuncIndex error,funcIndex(${funcIndex}),areaCount(${areaIndex})`);
            return null;
        }
    }
    AvatarApi.getSerializationValueByFuncIndex = getSerializationValueByFuncIndex;
    function setByFuncIndex(char, funcIndex, value, areaIndex) {
        const funcObj = AvatarApi.funcMap.get(funcIndex);
        funcObj.setFunc(char, value, areaIndex);
    }
    AvatarApi.setByFuncIndex = setByFuncIndex;
    function getByFuncIndex(char, funcIndex, areaIndex) {
        const funcObj = AvatarApi.funcMap.get(funcIndex);
        const value = funcObj.getFunc(char, areaIndex);
        return value;
    }
    AvatarApi.getByFuncIndex = getByFuncIndex;
    function serialization(valueType, value) {
        let v;
        switch (valueType) {
          case ValueType.Color:
            if (value.r > 1) value.r = 1; else if (value.r < 0) value.r = 0;
            if (value.g > 1) value.g = 1; else if (value.g < 0) value.g = 0;
            if (value.b > 1) value.b = 1; else if (value.b < 0) value.b = 0;
            if (value.a > 1) value.a = 1; else if (value.a < 0) value.a = 0;
            if (value.r + value.g + value.b + value.a == 0) v = "0"; else if (value.r == 1 && value.g == 1 && value.b == 1 && value.a == 1) v = "f"; else v = linearToHex(value);
            break;

          case ValueType.Number:
            let numb = Number(value);
            if (Number(numb) % 1 !== 0) v = parseFloat(numb.toFixed(3)); else v = numb;
            break;

          case ValueType.String:
            if (value && value != "undefined") v = value;
            break;
        }
        return v;
    }
    function deserialize(valueType, value) {
        let v;
        switch (valueType) {
          case ValueType.Color:
            if (value == "0") value = "00000000"; else if (value == "f") value = "ffffff";
            v = hexToColor(value);
            break;

          case ValueType.Number:
            v = value;
            break;

          case ValueType.String:
            if (value && value != "undefined") v = value;
            break;
        }
        return v;
    }
    function hexToColor(hex, outer) {
        try {
            const hexRegex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
            const match = hex.match(hexRegex);
            if (match) {
                const r = parseInt(match[1], 16) / 255;
                const g = parseInt(match[2], 16) / 255;
                const b = parseInt(match[3], 16) / 255;
                const a = match[4] ? parseInt(match[4], 16) / 255 : 1;
                if (!outer) outer = new mw.LinearColor(r, g, b, a); else {
                    outer.r = r;
                    outer.g = g;
                    outer.b = b;
                    outer.a = a;
                }
                return outer;
            }
        } catch (error) {
            console.error(`hexToColor error,hex(${hex}):${error}`);
            return LinearColor.white;
        }
    }
    function linearToHex(color) {
        let colorHex;
        try {
            const r = color.r;
            const g = color.g;
            const b = color.b;
            const a = color.a;
            const hexR = Math.round(r * 255).toString(16).padStart(2, "0");
            const hexG = Math.round(g * 255).toString(16).padStart(2, "0");
            const hexB = Math.round(b * 255).toString(16).padStart(2, "0");
            const hexA = Math.round(a * 255).toString(16).padStart(2, "0");
            if (hexA === `ff`) colorHex = `${hexR}${hexG}${hexB}`;
            colorHex = `${hexR}${hexG}${hexB}${hexA}`;
        } catch (error) {
            console.error(`linearToHex error:${error}`);
        }
        if (colorHex?.length > 8) {
            console.log(`dddddddddddddddddddddddddddd:颜色换算大于八位,${color},${colorHex}`);
            throw new Error(`颜色换算大于八位,${color}`);
        }
        return colorHex;
    }
    function toStrings(char) {
        let strArr = [];
        for (const [k, v] of AvatarApi.funcMap) {
            if (v.hasArea) {
                for (let i = 0; i < areaCountMap.get(k)(char); i++) {
                    const str = `funcIndex(${v.cfg.funcIndex}),areaIndex(${i}),value(${v.getFunc(char, i)}),cfg:${JSON.stringify(v.cfg)}`;
                    strArr.push(str);
                }
            } else {
                const str = `funcIndex(${v.cfg.funcIndex}),value(${v.getFunc(char)}),cfg:${JSON.stringify(v.cfg)}`;
                strArr.push(str);
            }
            console.log(`toStrings:${k}`);
        }
        return strArr;
    }
    AvatarApi.toStrings = toStrings;
    async function changeAsset(char, funcIndex, value, areaIndex) {
        const funcObj = AvatarApi.funcMap.get(funcIndex);
        const serializationVale = isNaN(areaIndex) ? serialization(funcObj.cfg.valueType, value) : `${areaIndex}|${serialization(funcObj.cfg.valueType, value)}`;
        let tempData = getAllData(char);
        for (let i = 0; i < tempData.apiValue.length; i += 2) {
            if (tempData.apiValue[i] == funcIndex) {
                tempData.apiValue[i + 1];
                tempData.apiValue[i + 1] = serializationVale;
                break;
            }
        }
        await setDescriptionByApiData2(char, tempData);
    }
    AvatarApi.changeAsset = changeAsset;
    function equality(char, apiData, eqSlot = false) {
        let funcIndex;
        let areaIndex;
        let valueData;
        let eq = true;
        if (apiData.version == 1) {
            for (let i = 0; i < apiData.apiValue.length; i += 2) {
                funcIndex = apiData.apiValue[i];
                if (funcIndex == 182 || funcIndex == 183) continue;
                areaIndex = undefined;
                AvatarApi.funcMap.get(funcIndex);
                valueData = apiData.apiValue[i + 1];
                try {
                    if (typeof valueData === `string` && valueData.includes(`|`)) {
                        const str = valueData.split("|");
                        const value = str[1];
                        areaIndex = Number(str[0]);
                        eq = eqSerializationValue(char, funcIndex, value, areaIndex);
                    } else {
                        eq = eqSerializationValue(char, funcIndex, valueData);
                    }
                    if (!eq) {
                        break;
                    }
                } catch (error) {
                    console.error(`AvatarApi.equality,funcIndex(${funcIndex}),areaIndex(${areaIndex}),valueData(${valueData}),eq(${eq}),error:${error}`);
                    return false;
                }
            }
            if (eq && eqSlot) {
                eq = equalitySloth(char, apiData.slotData);
            }
            if (eq && eqSlot) {
                eq = equalityDynamicDecor(char, apiData.dynDecor);
            }
            return eq;
        }
    }
    AvatarApi.equality = equality;
    const slotSplit = "$";
    function getSlotDataArr(char) {
        let slot = char.description.advance.slotAndDecoration.slot;
        let dataStrArr = [];
        for (let i = 0; i < slot.length; i++) {
            for (let j = 0; j < slot[i].decoration.length; j++) {
                const decoration = slot[i].decoration[j];
                if (decoration.attachmentAssetId && decoration.attachmentGameObject && decoration.attachmentOffset) {
                    let transform = new Transform;
                    transform.position = new Vector(Number(decoration.attachmentOffset.position.x.toFixed(3)), Number(decoration.attachmentOffset.position.y.toFixed(3)), Number(decoration.attachmentOffset.position.z.toFixed(3)));
                    transform.rotation = new Rotation(Number(decoration.attachmentOffset.rotation.x.toFixed(3)), Number(decoration.attachmentOffset.rotation.y.toFixed(3)), Number(decoration.attachmentOffset.rotation.z.toFixed(3)));
                    transform.scale = new Vector(Number(decoration.attachmentOffset.scale.x.toFixed(3)), Number(decoration.attachmentOffset.scale.y.toFixed(3)), Number(decoration.attachmentOffset.scale.z.toFixed(3)));
                    const str = `${i}${slotSplit}${decoration.attachmentAssetId}${slotSplit}${transform.toString()}`;
                    dataStrArr.push(str);
                }
            }
        }
        return dataStrArr.length > 0 ? dataStrArr : undefined;
    }
    AvatarApi.getSlotDataArr = getSlotDataArr;
    function getDynamicDecor(char) {
        let dataStr = [];
        const dynamicAttachments = char.description.advance.dynamicAttachments;
        if (!dynamicAttachments || dynamicAttachments.length == 0) return dataStr;
        for (let i = 0; i < dynamicAttachments.length; i++) {
            const d = dynamicAttachments[i].style;
            dataStr.push(d);
        }
        return dataStr;
    }
    AvatarApi.getDynamicDecor = getDynamicDecor;
    function getSlotDataArr2(char) {
        let slot = char.description.advance.slotAndDecoration.slot;
        let dataStrArr = [];
        for (let i = 0; i < slot.length; i++) {
            for (let j = 0; j < slot[i].decoration.length; j++) {
                const decoration = slot[i].decoration[j];
                if (decoration.attachmentAssetId && decoration.attachmentGameObject && decoration.attachmentOffset) {
                    dataStrArr.push({
                        assetId: decoration.attachmentAssetId,
                        slot: i,
                        offset: decoration.attachmentOffset,
                        obj: decoration.attachmentGameObject
                    });
                }
            }
        }
        return dataStrArr;
    }
    AvatarApi.getSlotDataArr2 = getSlotDataArr2;
    async function setDynamicDecor(char, strArr) {
        if (strArr?.length > 0) {
            for (let i = 0; i < strArr.length; i++) {
                await AvatarDecora.setDynamicDecor(char, i, strArr[i]);
            }
        }
    }
    AvatarApi.setDynamicDecor = setDynamicDecor;
    async function setSlotData(char, strArr) {
        if (strArr?.length > 0) {
            for (let i = 0; i < strArr.length; i++) {
                const [slotIndexStr, assetId, transform] = strArr[i].split(slotSplit);
                const slotIndex = Number(slotIndexStr);
                if (slotIndex >= 0 && slotIndex < char.description.advance.slotAndDecoration.slot.length) {
                    await AvatarDecora.setDecora2(char, slotIndex, assetId, Transform.fromString(transform));
                }
            }
        }
        await char.asyncReady();
    }
    AvatarApi.setSlotData = setSlotData;
    function equalitySloth(char, strArr) {
        const curSlotData = getSlotDataArr(char);
        if (curSlotData && strArr) {
            if (curSlotData.length == strArr.length) {
                for (let i = 0; i < curSlotData.length; i++) {
                    const [slotIndexStr1, assetId1, transform1] = curSlotData[i].split(slotSplit);
                    const [slotIndexStr2, assetId2, transform2] = strArr[i].split(slotSplit);
                    if (slotIndexStr1 != slotIndexStr2) return false;
                    if (assetId1 != assetId2) return false;
                    if (transform1.toString() != transform2.toString()) return false;
                }
                console.log(`equalitySloth1`);
                return true;
            }
            console.log(`equalitySloth2`);
            return false;
        }
        console.log(`equalitySloth3,${curSlotData},${strArr}`);
        return !(curSlotData || strArr);
    }
    AvatarApi.equalitySloth = equalitySloth;
    function equalityDynamicDecor(char, strArr) {
        const curSlotData = getDynamicDecor(char);
        if (curSlotData && strArr) {
            for (let i = 0; i < curSlotData.length; i++) {
                if (curSlotData[i] != strArr[i]) return false;
            }
        }
        return true;
    }
    AvatarApi.equalityDynamicDecor = equalityDynamicDecor;
    function getValueByFuncIndex(apiData, targetFuncIndex) {
        for (let i = 0; i < apiData.apiValue.length; i += 2) {
            const funcIndex = apiData.apiValue[i];
            if (targetFuncIndex == funcIndex) {
                const funcObj = AvatarApi.funcMap.get(funcIndex);
                return deserialize(funcObj.cfg.valueType, apiData.apiValue[i + 1]);
            }
        }
    }
    AvatarApi.getValueByFuncIndex = getValueByFuncIndex;
    function setValueByFuncIndex(apiData, targetFuncIndex, value) {
        for (let i = 0; i < apiData.apiValue.length; i += 2) {
            const funcIndex = apiData.apiValue[i];
            if (targetFuncIndex == funcIndex) {
                const funcObj = AvatarApi.funcMap.get(funcIndex);
                apiData.apiValue[i + 1] = serialization(funcObj.cfg.valueType, value);
                break;
            }
        }
        return apiData;
    }
    AvatarApi.setValueByFuncIndex = setValueByFuncIndex;
    function getAssets(char) {
        let assetMap = new Map;
        for (const [funcIndex, v] of AvatarApi.funcMap) {
            if (v.cfg.valueType == ValueType.String) {
                if (areaCountMap.has(funcIndex)) {
                    for (let areaIndex = 0; areaIndex <= areaCountMap.get(funcIndex)(char); areaIndex++) {
                        const serializationValue = getSerializationValueByFuncIndex(char, funcIndex, areaIndex);
                        if (serializationValue != null) {
                            assetMap.set(serializationValue, true);
                        }
                    }
                } else {
                    const serializationValue = getSerializationValueByFuncIndex(char, funcIndex);
                    if (serializationValue != null) {
                        assetMap.set(serializationValue, true);
                    }
                }
            }
        }
        getSlotDataArr2(char).forEach((e => {
            assetMap.set(e.assetId, true);
        }));
        let assets = "";
        let a = [ ...assetMap.keys() ];
        const lastIndex = a.length - 1;
        a.forEach(((guid, index) => {
            assets += index != lastIndex ? `${guid},` : `${guid}`;
        }));
        return assets;
    }
    AvatarApi.getAssets = getAssets;
    function getAssetsByDescriptionApiData(apiData) {
        let assetMap = new Map;
        for (let i = 0; i < apiData.apiValue.length; i += 2) {
            const funcIndex = apiData.apiValue[i];
            const funcObj = AvatarApi.funcMap.get(funcIndex);
            let value;
            if (funcObj.cfg.valueType == ValueType.String) {
                if (funcObj.hasArea) {
                    const strValue = apiData.apiValue[i + 1];
                    const strArr = strValue.split("|");
                    parseInt(strArr[0]);
                    value = deserialize(funcObj.cfg.valueType, strArr[1]);
                    assetMap.set(value, true);
                } else {
                    value = deserialize(funcObj.cfg.valueType, apiData.apiValue[i + 1]);
                    assetMap.set(value, true);
                }
            }
        }
        return [ ...assetMap.keys() ];
    }
    AvatarApi.getAssetsByDescriptionApiData = getAssetsByDescriptionApiData;
    function setValueByFuncIndex2(char, funcIndex, areaIndex, value) {
        try {
            const funcObj = AvatarApi.funcMap.get(funcIndex);
            return funcObj.setFunc(char, value, areaIndex);
        } catch (error) {}
    }
    AvatarApi.setValueByFuncIndex2 = setValueByFuncIndex2;
})(AvatarApi || (AvatarApi = {}));

var StyleType;

(function(StyleType) {
    StyleType[StyleType["Quadratic"] = 1] = "Quadratic";
    StyleType[StyleType["LowPoly"] = 2] = "LowPoly";
    StyleType[StyleType["Realistic"] = 3] = "Realistic";
    StyleType[StyleType["Cartoony"] = 4] = "Cartoony";
})(StyleType || (StyleType = {}));

function getStyle(somatotype) {
    if (somatotype === mw.SomatotypeV2.LowpolyAdultFemale || somatotype === mw.SomatotypeV2.LowpolyAdultMale) return StyleType.LowPoly;
    if (somatotype === mw.SomatotypeV2.AnimeFemale || somatotype === mw.SomatotypeV2.AnimeMale) return StyleType.Quadratic;
    if (somatotype === mw.SomatotypeV2.RealisticAdultMale || somatotype === mw.SomatotypeV2.RealisticAdultFemale) return StyleType.Realistic;
    if (somatotype === mw.SomatotypeV2.CartoonyMale || somatotype === mw.SomatotypeV2.CartoonyFemale) return StyleType.Cartoony;
}

var foreign137 = Object.freeze({
    __proto__: null,
    get AvatarApi() {
        return AvatarApi;
    },
    get StyleType() {
        return StyleType;
    },
    getStyle: getStyle
});

let LoadingPanel_Generate = class LoadingPanel_Generate extends UIScript {
    get mMainCanvas() {
        if (!this.mMainCanvas_Internal && this.uiWidgetBase) {
            this.mMainCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mMainCanvas");
        }
        return this.mMainCanvas_Internal;
    }
    get mLoadingImage() {
        if (!this.mLoadingImage_Internal && this.uiWidgetBase) {
            this.mLoadingImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mMainCanvas/mLoadingImage");
        }
        return this.mLoadingImage_Internal;
    }
    get mLoadingTextblock() {
        if (!this.mLoadingTextblock_Internal && this.uiWidgetBase) {
            this.mLoadingTextblock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/MainCanvas/mMainCanvas/mLoadingTextblock");
        }
        return this.mLoadingTextblock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.mLoadingTextblock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

LoadingPanel_Generate = __decorate([ UIBind("UI/tools/LoadingPanel.ui") ], LoadingPanel_Generate);

var LoadingPanel_Generate$1 = LoadingPanel_Generate;

var foreign192 = Object.freeze({
    __proto__: null,
    default: LoadingPanel_Generate$1
});

class LoadingPanel extends LoadingPanel_Generate$1 {
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerTop;
    }
    onUpdate(dt) {
        this.mLoadingImage.renderTransformAngle = this.mLoadingImage.renderTransformAngle + 180 * dt;
        if (this.mLoadingImage.renderTransformAngle > 180) this.mLoadingImage.renderTransformAngle = -180 + this.mLoadingImage.renderTransformAngle - 180;
    }
    setLock(isLock) {
        if (isLock) {
            this.canUpdate = true;
            this.rootCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        } else {
            this.canUpdate = false;
            this.rootCanvas.visibility = mw.SlateVisibility.Collapsed;
        }
    }
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
}

var foreign144 = Object.freeze({
    __proto__: null,
    default: LoadingPanel
});

class ExecutorBase {
    execute() {}
}

class Executor extends ExecutorBase {
    execute() {
        this.func(this.arg);
    }
}

class AsyncExecutor extends ExecutorBase {
    constructor() {
        super(...arguments);
        this.lockInput = true;
    }
    async execute() {
        await this.asyncFunc(this.arg);
    }
}

class ExecutorManager {
    constructor() {
        this.executorList = new Array;
        this.running = false;
        this.index = 0;
        this.doneCb = new Action;
    }
    static get instance() {
        if (ExecutorManager._instance == undefined) ExecutorManager._instance = new ExecutorManager;
        return ExecutorManager._instance;
    }
    pushExecutor(func, arg = undefined, record = false, resetFunc = undefined) {
        let executor = new Executor;
        executor.func = func;
        executor.arg = arg;
        executor.record = record;
        executor.resetFunc = resetFunc;
        this.push(executor);
    }
    pushAsyncExecutor(asyncFunc, arg = undefined, isAwait = true, record = false, resetFunc = undefined, lockInput = true) {
        let asyncExecutor = new AsyncExecutor;
        asyncExecutor.asyncFunc = asyncFunc;
        asyncExecutor.arg = arg;
        asyncExecutor.isAwait = isAwait;
        asyncExecutor.record = record;
        asyncExecutor.lockInput = lockInput;
        asyncExecutor.resetFunc = resetFunc;
        this.push(asyncExecutor);
    }
    push(executor) {
        this.executorList.push(executor);
        this.run();
    }
    async run() {
        if (this.running) return;
        this.running = true;
        let executor = this.executorList[this.index];
        UIService.getUI(LoadingPanel).show();
        while (executor) {
            try {
                if (executor instanceof Executor) {
                    executor.execute();
                } else {
                    let asyncExecutor = executor;
                    UIService.getUI(LoadingPanel).setLock(asyncExecutor.lockInput);
                    if (asyncExecutor.isAwait) {
                        await this.runExecute(asyncExecutor.execute.bind(asyncExecutor));
                    } else {
                        asyncExecutor.execute();
                    }
                }
            } catch (error) {
                console.error(`命令执行异常:${error}`);
            }
            this.index++;
            executor = this.executorList[this.index];
        }
        UIService.getUI(LoadingPanel).hide();
        this.running = false;
        this.doneCb.call();
    }
    runExecute(exeFunc) {
        return new Promise((async resolve => {
            let timeOut = setTimeout((() => {
                console.error(`命令执行10秒超时`);
                return resolve();
            }), 10 * 1e3);
            await exeFunc();
            clearTimeout(timeOut);
            return resolve();
        }));
    }
    awaitDone() {
        return new Promise((resolve => {
            if (!this.running) return resolve();
            const doneFunc = () => {
                this.doneCb.remove(doneFunc, this);
                return resolve();
            };
            this.doneCb.add(doneFunc, this);
        }));
    }
}

ExecutorManager._instance = undefined;

var foreign146 = Object.freeze({
    __proto__: null,
    default: ExecutorManager
});

class CharacterModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.characterDataMap = {};
    }
    onStart() {}
    onEnterScene(sceneType) {
        this.initCharacterData();
    }
    getCharacterDataKey() {
        let retKey = null;
        if (!this.characterDataMap || MapEx.count(this.characterDataMap) == 0) return retKey;
        let characterDataStr = JSON.stringify(AvatarApi.getAllData(this.localPlayer.character));
        MapEx.forEach(this.characterDataMap, ((key, element) => {
            if (characterDataStr == element) {
                retKey = key;
            }
        }));
        return retKey;
    }
    get getCharacterData() {
        return this.characterDataMap;
    }
    get getCharacterDataIndex() {
        for (let i = 1; i <= GlobalData.savaMaxCount; ++i) {
            if (!MapEx.has(this.characterDataMap, i)) return i;
        }
    }
    async useCharacterData(key, setCharacterDataSucceed) {
        if (key == `0`) {
            let nextKey = `1`;
            if (this.characterDataMap && MapEx.count(this.characterDataMap) > 0) {
                let currentCharacterDataSize = Number(MapEx.count(this.characterDataMap));
                if (currentCharacterDataSize >= GlobalData.savaMaxCount) {
                    Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_MaxSaveCount.Value, GlobalData.savaMaxCount));
                    return;
                }
                nextKey = this.getCharacterDataIndex.toString();
            }
            await this.localPlayer.character.asyncReady();
            let characterDataStr = JSON.stringify(AvatarApi.getAllData(this.localPlayer.character));
            await this.setCharacterData(nextKey, characterDataStr);
            Notice.showDownNotice(GameConfig.Language.Text_SaveSuccefully.Value);
            if (setCharacterDataSucceed) setCharacterDataSucceed(true);
        } else {
            if (!this.characterDataMap || MapEx.count(this.characterDataMap) == 0) return;
            if (!MapEx.has(this.characterDataMap, key)) return;
            let characterData = MapEx.get(this.characterDataMap, key);
            let descriptionApiData = JSON.parse(characterData);
            this.localPlayer.character.detachAllFromSlot({
                isDestroy: true
            });
            await this.localPlayer.character.asyncReady();
            let isSuccess = await AvatarApi.setDescriptionByApiData2(this.localPlayer.character, descriptionApiData);
            await this.localPlayer.character.asyncReady();
            if (isSuccess) {
                if (setCharacterDataSucceed) setCharacterDataSucceed(false);
            }
        }
    }
    async deleteCharacterData(key, delCharacterDataSucceed) {
        if (key == `0`) return;
        await this.delCharacterData(key);
        Notice.showDownNotice(GameConfig.Language.Text_DeleteSucceed.Value);
        if (delCharacterDataSucceed) delCharacterDataSucceed();
    }
    get getCharacterDataKeys() {
        let keys = [];
        if (!this.characterDataMap || MapEx.count(this.characterDataMap) == 0) return keys;
        MapEx.forEach(this.characterDataMap, ((key, element) => {
            keys.push(key);
        }));
        return keys;
    }
    getCharacterDataUpAssetIdByKey(key) {
        if (!this.characterDataMap || MapEx.count(this.characterDataMap) == 0) return null;
        if (!MapEx.has(this.characterDataMap, key)) return null;
        let characterData = MapEx.get(this.characterDataMap, key);
        let descriptionApiData = JSON.parse(characterData);
        let indexOf = descriptionApiData.apiValue.indexOf(86);
        if (indexOf != -1) {
            return descriptionApiData.apiValue[indexOf + 1];
        }
        return null;
    }
    initCharacterData() {
        this.characterDataMap = this.data.characterDataMap;
    }
    async setCharacterData(key, value) {
        MapEx.set(this.characterDataMap, key, value);
        await this.server.net_setCharacterData(key, value);
    }
    async delCharacterData(key) {
        if (MapEx.has(this.characterDataMap, key)) {
            MapEx.del(this.characterDataMap, key);
            await this.server.net_delCharacterData(key);
        }
    }
    clearCharacterData() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            this.characterDataMap = {};
            await this.server.net_clearCharacterData();
        }));
    }
}

var foreign85 = Object.freeze({
    __proto__: null,
    CharacterModuleC: CharacterModuleC
});

class CharacterModuleS extends ModuleS {
    onStart() {}
    net_setCharacterData(key, value) {
        return this.currentData.setCharacterData(key, value);
    }
    net_delCharacterData(key) {
        return this.currentData.delCharacterData(key);
    }
    net_clearCharacterData() {
        return this.currentData.clearCharacterData();
    }
}

var foreign86 = Object.freeze({
    __proto__: null,
    CharacterModuleS: CharacterModuleS
});

class Utils {
    static setImageByAssetIconData(image, icon) {
        if (this.assetIconDataMap.has(icon)) {
            image.setImageByAssetIconData(this.assetIconDataMap.get(icon));
        } else {
            mw.assetIDChangeIconUrlRequest([ icon ]).then((() => {
                try {
                    let assetIconData = mw.getAssetIconDataByAssetID(icon);
                    image.setImageByAssetIconData(assetIconData);
                    this.assetIconDataMap.set(icon, assetIconData);
                } catch (error) {}
            }));
        }
    }
    static async asyncDownloadAsset(InAssetId) {
        if (!mw.AssetUtil.assetLoaded(InAssetId)) {
            await mw.AssetUtil.asyncDownloadAsset(InAssetId);
        }
    }
    static async asyncDownloadAssets(InAssetIds) {
        for (let i = 0; i < InAssetIds.length; ++i) {
            if (mw.AssetUtil.assetLoaded(InAssetIds[i])) continue;
            await mw.AssetUtil.asyncDownloadAsset(InAssetIds[i]);
        }
    }
    static setWidgetVisibility(ui, visibility) {
        if (ui.visibility != visibility) ui.visibility = visibility;
    }
    static randomInt(min, max) {
        if (min > max) {
            let temp = min;
            min = max;
            max = temp;
        }
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
    static getDay() {
        let day = "";
        day += (new Date).getFullYear();
        day += (new Date).getMonth() + 1;
        day += (new Date).getDate();
        return day;
    }
    static resetPlayerPos() {
        Player.localPlayer.character.worldTransform.position = this.birthPos;
    }
    static async applySharedId(character, sharedId) {
        return new Promise((async resolve => {
            mw.AccountService.applySharedId(character, sharedId, (async success => {
                console.error(`success:${success}`);
                if (success) character.syncDescription();
                await character.asyncReady();
                return resolve(success);
            }));
        }));
    }
    static async createSharedId(character) {
        return new Promise((async resolve => {
            mw.AccountService.createSharedId(character, (dataString => {
                console.error(`dataString:${dataString}`);
                return resolve(dataString);
            }));
        }));
    }
    static startGuide(targetLoc, onComplete = null) {
        if (!mw.SystemUtil.isClient()) return;
        if (!targetLoc) return;
        if (this.targetGuideEffectId) {
            EffectService.stop(this.targetGuideEffectId);
            this.targetGuideEffectId = null;
        }
        this.targetGuideEffectId = EffectService.playAtPosition(this.targetEffectGuid, targetLoc, {
            loopCount: 0
        });
        if (this.guideIntervalId) {
            TimeUtil.clearInterval(this.guideIntervalId);
            this.guideIntervalId = null;
        }
        this.guideIntervalId = TimeUtil.setInterval((() => {
            let character = Player.localPlayer?.character;
            if (!character) return;
            let playerLoc = character?.worldTransform?.position;
            if (!playerLoc) return;
            if (Math.abs(playerLoc.x - this.prePlayerLoc.x) < .1 && Math.abs(playerLoc.y - this.prePlayerLoc.y) < .1 && Math.abs(playerLoc.z - this.prePlayerLoc.z) < .1) return;
            this.prePlayerLoc = playerLoc;
            let distance = mw.Vector.distance(playerLoc, targetLoc);
            if (distance <= 200) {
                TimeUtil.clearInterval(this.guideIntervalId);
                this.guideIntervalId = null;
                if (this.targetGuideEffectId) {
                    EffectService.stop(this.targetGuideEffectId);
                    this.targetGuideEffectId = null;
                }
                if (this.guideEffectIds.length != 0) {
                    this.guideEffectIds.forEach((effectId => {
                        EffectService.stop(effectId);
                    }));
                    this.guideEffectIds.length = 0;
                }
                Notice.showDownNotice(GameConfig.Language.Text_GuideTips.Value);
                if (onComplete) onComplete();
                return;
            }
            let pointNum = Math.floor(distance / 100);
            let locs = this.getCurvePointsInNum([ playerLoc, targetLoc ], pointNum);
            if (pointNum > 35) {
                pointNum = 35;
            }
            if (this.guideEffectIds.length == 0) {
                for (let i = 1; i < pointNum; ++i) {
                    let effectId = EffectService.playAtPosition(this.guideEffectGuid, locs[i], {
                        loopCount: 0
                    });
                    this.guideEffectIds.push(effectId);
                }
            } else {
                if (this.guideEffectIds.length == pointNum) {
                    for (let i = 1; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i - 1]).then((effect => {
                            effect.worldTransform.position = new mw.Vector(locs[i].x, locs[i].y, locs[i].z - 85);
                        }));
                    }
                    EffectService.stop(this.guideEffectIds[pointNum - 1]);
                    this.guideEffectIds.length = pointNum - 1;
                } else if (this.guideEffectIds.length < pointNum) {
                    for (let i = 0; i < this.guideEffectIds.length; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect => {
                            effect.worldTransform.position = new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85);
                        }));
                    }
                    for (let i = this.guideEffectIds.length; i < pointNum - 1; ++i) {
                        let effectId = EffectService.playAtPosition(this.guideEffectGuid, locs[i + 1], {
                            loopCount: 0
                        });
                        this.guideEffectIds.push(effectId);
                    }
                } else if (this.guideEffectIds.length > pointNum) {
                    for (let i = 0; i < pointNum; ++i) {
                        EffectService.getEffectById(this.guideEffectIds[i]).then((effect => {
                            if (!locs[i + 1]) return;
                            effect.worldTransform.position = new mw.Vector(locs[i + 1].x, locs[i + 1].y, locs[i + 1].z - 85);
                        }));
                    }
                    for (let i = pointNum; i < this.guideEffectIds.length; ++i) {
                        EffectService.stop(this.guideEffectIds[i]);
                    }
                    this.guideEffectIds.length = pointNum;
                }
            }
        }), .1);
    }
    static getCurvePointsInNum(points, num) {
        let result = new Array;
        for (let i = 0; i < num; i++) {
            let t = i / (num - 1);
            let point = this.getKeyPoint(points, t);
            result.push(point);
        }
        return result;
    }
    static getKeyPoint(points, t) {
        if (points.length > 1) {
            let dirs = new Array;
            for (let i = 0; i < points.length - 1; ++i) {
                dirs.push(new mw.Vector(points[i + 1].x - points[i].x, points[i + 1].y - points[i].y, points[i + 1].z - points[i].z));
            }
            let points2 = new Array;
            for (let j = 0; j < dirs.length; j++) {
                points2.push(new mw.Vector(points[j].x + dirs[j].x * t, points[j].y + dirs[j].y * t, points[j].z + dirs[j].z * t));
            }
            return this.getKeyPoint(points2, t);
        } else {
            return new mw.Vector(points[0].x, points[0].y, points[0].z);
        }
    }
    static async getCustomdata(key) {
        return (await DataStorage.asyncGetData(key)).data;
    }
    static async setCustomData(saveKey, dataInfo) {
        let code = null;
        code = await DataStorage.asyncSetData(saveKey, dataInfo);
        return code == mw.DataStorageResultCode.Success;
    }
    static copyArray(array) {
        let newArray = [];
        for (let i = 0; i < array.length; ++i) {
            newArray.push(array[i]);
        }
        return newArray;
    }
    static colorHexToLinearColorToString(inColorHex) {
        if (this.inColorHexStrMap.has(inColorHex)) return this.inColorHexStrMap.get(inColorHex);
        let inColorHexLinearColor = mw.LinearColor.colorHexToLinearColor(inColorHex);
        this.inColorHexStrMap.set(inColorHex, inColorHexLinearColor);
        return inColorHexLinearColor;
    }
    static isEqulaLinearColor(linearColor1, linearColor2) {
        if (linearColor1.r.toFixed(5) != linearColor2.r.toFixed(5)) return false;
        if (linearColor1.g.toFixed(5) != linearColor2.g.toFixed(5)) return false;
        if (linearColor1.b.toFixed(5) != linearColor2.b.toFixed(5)) return false;
        if (linearColor1.a.toFixed(5) != linearColor2.a.toFixed(5)) return false;
        return true;
    }
    static stringArrayToTransform(strArray) {
        let transform = new mw.Transform;
        if (!strArray || strArray.length != 9) return transform;
        transform.position = new mw.Vector(Number(strArray[0]), Number(strArray[1]), Number(strArray[2]));
        transform.rotation = new mw.Rotation(Number(strArray[3]), Number(strArray[4]), Number(strArray[5]));
        transform.scale = new mw.Vector(Number(strArray[6]), Number(strArray[7]), Number(strArray[8]));
        return transform;
    }
    static accountServiceDownloadData(character) {
        return new Promise((async resolve => {
            mw.AccountService.downloadData(character, (async success => resolve(success)));
        }));
    }
    static isSameRoomDataTryOn(roomDatas) {
        let tryOnCount = 0;
        if (!roomDatas || roomDatas.length == 0) tryOnCount = 0;
        roomDatas.forEach((value => {
            tryOnCount += value.tryOn;
        }));
        if (this.tryOnCount != tryOnCount) {
            this.tryOnCount = tryOnCount;
            return false;
        }
        return true;
    }
}

Utils.assetIconDataMap = new Map;

Utils.buffMap = new Map;

Utils.birthPos = new mw.Vector(0, 0, 1e3);

Utils.targetGuideEffectId = null;

Utils.guideIntervalId = null;

Utils.guideEffectIds = [];

Utils.prePlayerLoc = mw.Vector.zero;

Utils.guideEffectGuid = `146775`;

Utils.targetEffectGuid = `142962`;

Utils.inColorHexStrMap = new Map;

Utils.tryOnCount = -1;

function cubicBezier(p1x, p1y, p2x, p2y) {
    const ZERO_LIMIT = 1e-6;
    const ax = 3 * p1x - 3 * p2x + 1;
    const bx = 3 * p2x - 6 * p1x;
    const cx = 3 * p1x;
    const ay = 3 * p1y - 3 * p2y + 1;
    const by = 3 * p2y - 6 * p1y;
    const cy = 3 * p1y;
    function sampleCurveDerivativeX(t) {
        return (3 * ax * t + 2 * bx) * t + cx;
    }
    function sampleCurveX(t) {
        return ((ax * t + bx) * t + cx) * t;
    }
    function sampleCurveY(t) {
        return ((ay * t + by) * t + cy) * t;
    }
    function solveCurveX(x) {
        let t2 = x;
        let derivative;
        let x2;
        for (let i = 0; i < 8; i++) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            derivative = sampleCurveDerivativeX(t2);
            if (Math.abs(derivative) < ZERO_LIMIT) {
                break;
            }
            t2 -= x2 / derivative;
        }
        let t1 = 1;
        let t0 = 0;
        t2 = x;
        while (t1 > t0) {
            x2 = sampleCurveX(t2) - x;
            if (Math.abs(x2) < ZERO_LIMIT) {
                return t2;
            }
            if (x2 > 0) {
                t1 = t2;
            } else {
                t0 = t2;
            }
            t2 = (t1 + t0) / 2;
        }
        return t2;
    }
    function solve(x) {
        return sampleCurveY(solveCurveX(x));
    }
    return solve;
}

var foreign145 = Object.freeze({
    __proto__: null,
    cubicBezier: cubicBezier,
    default: Utils
});

let BubbleItem_Generate = class BubbleItem_Generate extends UIScript {
    get mDialogBg1() {
        if (!this.mDialogBg1_Internal && this.uiWidgetBase) {
            this.mDialogBg1_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mDialogBg1");
        }
        return this.mDialogBg1_Internal;
    }
    get mDialogBg2() {
        if (!this.mDialogBg2_Internal && this.uiWidgetBase) {
            this.mDialogBg2_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mDialogBg2");
        }
        return this.mDialogBg2_Internal;
    }
    get mDialogTextBlock() {
        if (!this.mDialogTextBlock_Internal && this.uiWidgetBase) {
            this.mDialogTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mDialogTextBlock");
        }
        return this.mDialogTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.mDialogTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

BubbleItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/BubbleItem.ui") ], BubbleItem_Generate);

var BubbleItem_Generate$1 = BubbleItem_Generate;

var foreign156 = Object.freeze({
    __proto__: null,
    default: BubbleItem_Generate$1
});

let HUDItem_Generate = class HUDItem_Generate extends UIScript {
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectImage");
        }
        return this.mSelectImage_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.initLanguage(this.mClickButton);
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.initLanguage(this.mCloseButton);
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

HUDItem_Generate = __decorate([ UIBind("UI/module/HUDModule/HUDItem.ui") ], HUDItem_Generate);

var HUDItem_Generate$1 = HUDItem_Generate;

var foreign164 = Object.freeze({
    __proto__: null,
    default: HUDItem_Generate$1
});

let HUDPanel_Generate = class HUDPanel_Generate extends UIScript {
    get mVirtualJoystickPanel() {
        if (!this.mVirtualJoystickPanel_Internal && this.uiWidgetBase) {
            this.mVirtualJoystickPanel_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mVirtualJoystickPanel");
        }
        return this.mVirtualJoystickPanel_Internal;
    }
    get mOpenSetImage() {
        if (!this.mOpenSetImage_Internal && this.uiWidgetBase) {
            this.mOpenSetImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSetImage");
        }
        return this.mOpenSetImage_Internal;
    }
    get mOpenSetButton() {
        if (!this.mOpenSetButton_Internal && this.uiWidgetBase) {
            this.mOpenSetButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSetImage/mOpenSetButton");
        }
        return this.mOpenSetButton_Internal;
    }
    get mOpenSetTextBlock() {
        if (!this.mOpenSetTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenSetTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSetImage/mOpenSetTextBlock");
        }
        return this.mOpenSetTextBlock_Internal;
    }
    get mOpenMusicImage() {
        if (!this.mOpenMusicImage_Internal && this.uiWidgetBase) {
            this.mOpenMusicImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMusicImage");
        }
        return this.mOpenMusicImage_Internal;
    }
    get mOpenMusicButton() {
        if (!this.mOpenMusicButton_Internal && this.uiWidgetBase) {
            this.mOpenMusicButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMusicImage/mOpenMusicButton");
        }
        return this.mOpenMusicButton_Internal;
    }
    get mOpenMusicTextBlock() {
        if (!this.mOpenMusicTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenMusicTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMusicImage/mOpenMusicTextBlock");
        }
        return this.mOpenMusicTextBlock_Internal;
    }
    get mOpenRankImage() {
        if (!this.mOpenRankImage_Internal && this.uiWidgetBase) {
            this.mOpenRankImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenRankImage");
        }
        return this.mOpenRankImage_Internal;
    }
    get mOpenRankButton() {
        if (!this.mOpenRankButton_Internal && this.uiWidgetBase) {
            this.mOpenRankButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenRankImage/mOpenRankButton");
        }
        return this.mOpenRankButton_Internal;
    }
    get mOpenRankTextBlock() {
        if (!this.mOpenRankTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenRankImage/mOpenRankTextBlock");
        }
        return this.mOpenRankTextBlock_Internal;
    }
    get mOpenClothImage() {
        if (!this.mOpenClothImage_Internal && this.uiWidgetBase) {
            this.mOpenClothImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenClothImage");
        }
        return this.mOpenClothImage_Internal;
    }
    get mOpenClothButton() {
        if (!this.mOpenClothButton_Internal && this.uiWidgetBase) {
            this.mOpenClothButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenClothImage/mOpenClothButton");
        }
        return this.mOpenClothButton_Internal;
    }
    get mOpenClothTextBlock() {
        if (!this.mOpenClothTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenClothTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenClothImage/mOpenClothTextBlock");
        }
        return this.mOpenClothTextBlock_Internal;
    }
    get mFreeTextBlock() {
        if (!this.mFreeTextBlock_Internal && this.uiWidgetBase) {
            this.mFreeTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenClothImage/mFreeTextBlock");
        }
        return this.mFreeTextBlock_Internal;
    }
    get mOpenMallImage() {
        if (!this.mOpenMallImage_Internal && this.uiWidgetBase) {
            this.mOpenMallImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMallImage");
        }
        return this.mOpenMallImage_Internal;
    }
    get mOpenMallButton() {
        if (!this.mOpenMallButton_Internal && this.uiWidgetBase) {
            this.mOpenMallButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMallImage/mOpenMallButton");
        }
        return this.mOpenMallButton_Internal;
    }
    get mOpenMallTextBlock() {
        if (!this.mOpenMallTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenMallTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenMallImage/mOpenMallTextBlock");
        }
        return this.mOpenMallTextBlock_Internal;
    }
    get mOpenShareImage() {
        if (!this.mOpenShareImage_Internal && this.uiWidgetBase) {
            this.mOpenShareImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenShareImage");
        }
        return this.mOpenShareImage_Internal;
    }
    get mOpenShareButton() {
        if (!this.mOpenShareButton_Internal && this.uiWidgetBase) {
            this.mOpenShareButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenShareImage/mOpenShareButton");
        }
        return this.mOpenShareButton_Internal;
    }
    get mOpenShareTextBlock() {
        if (!this.mOpenShareTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenShareTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenShareImage/mOpenShareTextBlock");
        }
        return this.mOpenShareTextBlock_Internal;
    }
    get mOpenSignInImage() {
        if (!this.mOpenSignInImage_Internal && this.uiWidgetBase) {
            this.mOpenSignInImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSignInImage");
        }
        return this.mOpenSignInImage_Internal;
    }
    get mOpenSignInButton() {
        if (!this.mOpenSignInButton_Internal && this.uiWidgetBase) {
            this.mOpenSignInButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSignInImage/mOpenSignInButton");
        }
        return this.mOpenSignInButton_Internal;
    }
    get mOpenSignInTextBlock() {
        if (!this.mOpenSignInTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenSignInTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenSignInImage/mOpenSignInTextBlock");
        }
        return this.mOpenSignInTextBlock_Internal;
    }
    get mOpenPhotoImage() {
        if (!this.mOpenPhotoImage_Internal && this.uiWidgetBase) {
            this.mOpenPhotoImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenPhotoImage");
        }
        return this.mOpenPhotoImage_Internal;
    }
    get mOpenPhotoButton() {
        if (!this.mOpenPhotoButton_Internal && this.uiWidgetBase) {
            this.mOpenPhotoButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenPhotoImage/mOpenPhotoButton");
        }
        return this.mOpenPhotoButton_Internal;
    }
    get mOpenPhotoTextBlock() {
        if (!this.mOpenPhotoTextBlock_Internal && this.uiWidgetBase) {
            this.mOpenPhotoTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/UpperRightCanvas/mOpenPhotoImage/mOpenPhotoTextBlock");
        }
        return this.mOpenPhotoTextBlock_Internal;
    }
    get mJumpBgImage() {
        if (!this.mJumpBgImage_Internal && this.uiWidgetBase) {
            this.mJumpBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mJumpBgImage");
        }
        return this.mJumpBgImage_Internal;
    }
    get mJumpButton() {
        if (!this.mJumpButton_Internal && this.uiWidgetBase) {
            this.mJumpButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mJumpBgImage/mJumpButton");
        }
        return this.mJumpButton_Internal;
    }
    get mCrouchBgImage() {
        if (!this.mCrouchBgImage_Internal && this.uiWidgetBase) {
            this.mCrouchBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mCrouchBgImage");
        }
        return this.mCrouchBgImage_Internal;
    }
    get mCrouchButton() {
        if (!this.mCrouchButton_Internal && this.uiWidgetBase) {
            this.mCrouchButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mCrouchBgImage/mCrouchButton");
        }
        return this.mCrouchButton_Internal;
    }
    get mBagBgImage() {
        if (!this.mBagBgImage_Internal && this.uiWidgetBase) {
            this.mBagBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mBagBgImage");
        }
        return this.mBagBgImage_Internal;
    }
    get mBagButton() {
        if (!this.mBagButton_Internal && this.uiWidgetBase) {
            this.mBagButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mBagBgImage/mBagButton");
        }
        return this.mBagButton_Internal;
    }
    get mExitBgImage() {
        if (!this.mExitBgImage_Internal && this.uiWidgetBase) {
            this.mExitBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mExitBgImage");
        }
        return this.mExitBgImage_Internal;
    }
    get mExitButton() {
        if (!this.mExitButton_Internal && this.uiWidgetBase) {
            this.mExitButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mExitBgImage/mExitButton");
        }
        return this.mExitButton_Internal;
    }
    get mActionBgImage() {
        if (!this.mActionBgImage_Internal && this.uiWidgetBase) {
            this.mActionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mActionBgImage");
        }
        return this.mActionBgImage_Internal;
    }
    get mActionButton() {
        if (!this.mActionButton_Internal && this.uiWidgetBase) {
            this.mActionButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/LowRightCanvas/mActionBgImage/mActionButton");
        }
        return this.mActionButton_Internal;
    }
    get mGoodsCanvas() {
        if (!this.mGoodsCanvas_Internal && this.uiWidgetBase) {
            this.mGoodsCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas");
        }
        return this.mGoodsCanvas_Internal;
    }
    get mGoodsContentCanvas() {
        if (!this.mGoodsContentCanvas_Internal && this.uiWidgetBase) {
            this.mGoodsContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas/mGoodsContentCanvas");
        }
        return this.mGoodsContentCanvas_Internal;
    }
    get mGoodsListCanvas() {
        if (!this.mGoodsListCanvas_Internal && this.uiWidgetBase) {
            this.mGoodsListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas/mGoodsContentCanvas/mGoodsListCanvas");
        }
        return this.mGoodsListCanvas_Internal;
    }
    get mDeleteAllGoodsButton() {
        if (!this.mDeleteAllGoodsButton_Internal && this.uiWidgetBase) {
            this.mDeleteAllGoodsButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas/mGoodsContentCanvas/mDeleteAllGoodsButton");
        }
        return this.mDeleteAllGoodsButton_Internal;
    }
    get mDeleteAllGoodsImage() {
        if (!this.mDeleteAllGoodsImage_Internal && this.uiWidgetBase) {
            this.mDeleteAllGoodsImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas/mGoodsContentCanvas/mDeleteAllGoodsButton/mDeleteAllGoodsImage");
        }
        return this.mDeleteAllGoodsImage_Internal;
    }
    get mShowHideGoodsButton() {
        if (!this.mShowHideGoodsButton_Internal && this.uiWidgetBase) {
            this.mShowHideGoodsButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mGoodsCanvas/mShowHideGoodsButton");
        }
        return this.mShowHideGoodsButton_Internal;
    }
    get mMusicCanvas() {
        if (!this.mMusicCanvas_Internal && this.uiWidgetBase) {
            this.mMusicCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas");
        }
        return this.mMusicCanvas_Internal;
    }
    get mCloseMusicBtn() {
        if (!this.mCloseMusicBtn_Internal && this.uiWidgetBase) {
            this.mCloseMusicBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas/mCloseMusicBtn");
        }
        return this.mCloseMusicBtn_Internal;
    }
    get mMusicText() {
        if (!this.mMusicText_Internal && this.uiWidgetBase) {
            this.mMusicText_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas/Canvas/mMusicText");
        }
        return this.mMusicText_Internal;
    }
    get mLeftMusicBtn() {
        if (!this.mLeftMusicBtn_Internal && this.uiWidgetBase) {
            this.mLeftMusicBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas/Canvas/mLeftMusicBtn");
        }
        return this.mLeftMusicBtn_Internal;
    }
    get mOnOffMusicBtn() {
        if (!this.mOnOffMusicBtn_Internal && this.uiWidgetBase) {
            this.mOnOffMusicBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas/Canvas/mOnOffMusicBtn");
        }
        return this.mOnOffMusicBtn_Internal;
    }
    get mRightMusicBtn() {
        if (!this.mRightMusicBtn_Internal && this.uiWidgetBase) {
            this.mRightMusicBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMusicCanvas/Canvas/mRightMusicBtn");
        }
        return this.mRightMusicBtn_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mOpenSetButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenSetButton");
        }));
        this.initLanguage(this.mOpenSetButton);
        this.mOpenSetButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenMusicButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenMusicButton");
        }));
        this.initLanguage(this.mOpenMusicButton);
        this.mOpenMusicButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenRankButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenRankButton");
        }));
        this.initLanguage(this.mOpenRankButton);
        this.mOpenRankButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenClothButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenClothButton");
        }));
        this.initLanguage(this.mOpenClothButton);
        this.mOpenClothButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenMallButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenMallButton");
        }));
        this.initLanguage(this.mOpenMallButton);
        this.mOpenMallButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenShareButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenShareButton");
        }));
        this.initLanguage(this.mOpenShareButton);
        this.mOpenShareButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenSignInButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenSignInButton");
        }));
        this.initLanguage(this.mOpenSignInButton);
        this.mOpenSignInButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenPhotoButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenPhotoButton");
        }));
        this.initLanguage(this.mOpenPhotoButton);
        this.mOpenPhotoButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mDeleteAllGoodsButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mDeleteAllGoodsButton");
        }));
        this.initLanguage(this.mDeleteAllGoodsButton);
        this.mDeleteAllGoodsButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mJumpButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mJumpButton");
        }));
        this.mJumpButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCrouchButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCrouchButton");
        }));
        this.mCrouchButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mBagButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mBagButton");
        }));
        this.mBagButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mExitButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mExitButton");
        }));
        this.mExitButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mActionButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mActionButton");
        }));
        this.mActionButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mShowHideGoodsButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mShowHideGoodsButton");
        }));
        this.mShowHideGoodsButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseMusicBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseMusicBtn");
        }));
        this.mCloseMusicBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mLeftMusicBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mLeftMusicBtn");
        }));
        this.mLeftMusicBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOnOffMusicBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOnOffMusicBtn");
        }));
        this.mOnOffMusicBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mRightMusicBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mRightMusicBtn");
        }));
        this.mRightMusicBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mOpenSetTextBlock);
        this.initLanguage(this.mOpenMusicTextBlock);
        this.initLanguage(this.mOpenRankTextBlock);
        this.initLanguage(this.mOpenClothTextBlock);
        this.initLanguage(this.mFreeTextBlock);
        this.initLanguage(this.mOpenMallTextBlock);
        this.initLanguage(this.mOpenShareTextBlock);
        this.initLanguage(this.mOpenSignInTextBlock);
        this.initLanguage(this.mOpenPhotoTextBlock);
        this.initLanguage(this.mMusicText);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

HUDPanel_Generate = __decorate([ UIBind("UI/module/HUDModule/HUDPanel.ui") ], HUDPanel_Generate);

var HUDPanel_Generate$1 = HUDPanel_Generate;

var foreign165 = Object.freeze({
    __proto__: null,
    default: HUDPanel_Generate$1
});

let SavePanel_Generate = class SavePanel_Generate extends UIScript {
    get mSaveButton() {
        if (!this.mSaveButton_Internal && this.uiWidgetBase) {
            this.mSaveButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSaveButton");
        }
        return this.mSaveButton_Internal;
    }
    get mSaveTipsTextBlock() {
        if (!this.mSaveTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mSaveTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSaveButton/mSaveTipsTextBlock");
        }
        return this.mSaveTipsTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSaveButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveButton");
        }));
        this.mSaveButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mSaveTipsTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SavePanel_Generate = __decorate([ UIBind("UI/module/ShareModule/SavePanel.ui") ], SavePanel_Generate);

var SavePanel_Generate$1 = SavePanel_Generate;

var foreign186 = Object.freeze({
    __proto__: null,
    default: SavePanel_Generate$1
});

let SharePanel_Generate = class SharePanel_Generate extends UIScript {
    get mMainImage() {
        if (!this.mMainImage_Internal && this.uiWidgetBase) {
            this.mMainImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage");
        }
        return this.mMainImage_Internal;
    }
    get mMyselfTipsTextBlock() {
        if (!this.mMyselfTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mMyselfTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mMyselfTipsTextBlock");
        }
        return this.mMyselfTipsTextBlock_Internal;
    }
    get mMyselfTextBlock() {
        if (!this.mMyselfTextBlock_Internal && this.uiWidgetBase) {
            this.mMyselfTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mMyselfTextBlock");
        }
        return this.mMyselfTextBlock_Internal;
    }
    get mCopyButton() {
        if (!this.mCopyButton_Internal && this.uiWidgetBase) {
            this.mCopyButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mMyselfTextBlock/mCopyButton");
        }
        return this.mCopyButton_Internal;
    }
    get mOtherTipsTextBlock() {
        if (!this.mOtherTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mOtherTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mOtherTipsTextBlock");
        }
        return this.mOtherTipsTextBlock_Internal;
    }
    get mInputBgImage() {
        if (!this.mInputBgImage_Internal && this.uiWidgetBase) {
            this.mInputBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mInputBgImage");
        }
        return this.mInputBgImage_Internal;
    }
    get mInputBox() {
        if (!this.mInputBox_Internal && this.uiWidgetBase) {
            this.mInputBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mInputBgImage/mInputBox");
        }
        return this.mInputBox_Internal;
    }
    get mCancelButton() {
        if (!this.mCancelButton_Internal && this.uiWidgetBase) {
            this.mCancelButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mCancelButton");
        }
        return this.mCancelButton_Internal;
    }
    get mCancelTextBlock() {
        if (!this.mCancelTextBlock_Internal && this.uiWidgetBase) {
            this.mCancelTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mCancelButton/mCancelTextBlock");
        }
        return this.mCancelTextBlock_Internal;
    }
    get mUseButton() {
        if (!this.mUseButton_Internal && this.uiWidgetBase) {
            this.mUseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mUseButton");
        }
        return this.mUseButton_Internal;
    }
    get mUseTextBlock() {
        if (!this.mUseTextBlock_Internal && this.uiWidgetBase) {
            this.mUseTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mUseButton/mUseTextBlock");
        }
        return this.mUseTextBlock_Internal;
    }
    get mAdsButton() {
        if (!this.mAdsButton_Internal && this.uiWidgetBase) {
            this.mAdsButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mAdsButton");
        }
        return this.mAdsButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mCopyButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCopyButton");
        }));
        this.mCopyButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCancelButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCancelButton");
        }));
        this.mCancelButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mUseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mUseButton");
        }));
        this.mUseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mMyselfTipsTextBlock);
        this.initLanguage(this.mMyselfTextBlock);
        this.initLanguage(this.mOtherTipsTextBlock);
        this.initLanguage(this.mCancelTextBlock);
        this.initLanguage(this.mUseTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SharePanel_Generate = __decorate([ UIBind("UI/module/ShareModule/SharePanel.ui") ], SharePanel_Generate);

var SharePanel_Generate$1 = SharePanel_Generate;

var foreign187 = Object.freeze({
    __proto__: null,
    default: SharePanel_Generate$1
});

let AdPanel_Generate = class AdPanel_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas");
        }
        return this.mCanvas_Internal;
    }
    get mTitleTxt() {
        if (!this.mTitleTxt_Internal && this.uiWidgetBase) {
            this.mTitleTxt_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mTitleTxt");
        }
        return this.mTitleTxt_Internal;
    }
    get mContentTxt() {
        if (!this.mContentTxt_Internal && this.uiWidgetBase) {
            this.mContentTxt_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mContentTxt");
        }
        return this.mContentTxt_Internal;
    }
    get mNoBtn() {
        if (!this.mNoBtn_Internal && this.uiWidgetBase) {
            this.mNoBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mNoBtn");
        }
        return this.mNoBtn_Internal;
    }
    get mYesBtn() {
        if (!this.mYesBtn_Internal && this.uiWidgetBase) {
            this.mYesBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mYesBtn");
        }
        return this.mYesBtn_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mNoBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mNoBtn");
        }));
        this.initLanguage(this.mNoBtn);
        this.mNoBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTitleTxt);
        this.initLanguage(this.mContentTxt);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

AdPanel_Generate = __decorate([ UIBind("UI/module/AdModule/AdPanel.ui") ], AdPanel_Generate);

var AdPanel_Generate$1 = AdPanel_Generate;

var foreign150 = Object.freeze({
    __proto__: null,
    default: AdPanel_Generate$1
});

let TipsPanel_Generate = class TipsPanel_Generate extends UIScript {
    get mCanvas() {
        if (!this.mCanvas_Internal && this.uiWidgetBase) {
            this.mCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas");
        }
        return this.mCanvas_Internal;
    }
    get mTitleTxt() {
        if (!this.mTitleTxt_Internal && this.uiWidgetBase) {
            this.mTitleTxt_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mTitleTxt");
        }
        return this.mTitleTxt_Internal;
    }
    get mContentTxt() {
        if (!this.mContentTxt_Internal && this.uiWidgetBase) {
            this.mContentTxt_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mContentTxt");
        }
        return this.mContentTxt_Internal;
    }
    get mNoBtn() {
        if (!this.mNoBtn_Internal && this.uiWidgetBase) {
            this.mNoBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mNoBtn");
        }
        return this.mNoBtn_Internal;
    }
    get mYesBtn() {
        if (!this.mYesBtn_Internal && this.uiWidgetBase) {
            this.mYesBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCanvas/Canvas_1/mYesBtn");
        }
        return this.mYesBtn_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mNoBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mNoBtn");
        }));
        this.initLanguage(this.mNoBtn);
        this.mNoBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mYesBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mYesBtn");
        }));
        this.initLanguage(this.mYesBtn);
        this.mYesBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTitleTxt);
        this.initLanguage(this.mContentTxt);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

TipsPanel_Generate = __decorate([ UIBind("UI/module/AdModule/TipsPanel.ui") ], TipsPanel_Generate);

var TipsPanel_Generate$1 = TipsPanel_Generate;

var foreign151 = Object.freeze({
    __proto__: null,
    default: TipsPanel_Generate$1
});

class AdPanel extends AdPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.callback = null;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerDialog;
        this.bindButtons();
    }
    bindButtons() {
        this.mYesBtn.onClose.add(this.onClickYesButton.bind(this));
        this.mNoBtn.onClicked.add(this.onClickNoButton.bind(this));
    }
    onClickYesButton(isSuccess) {
        if (!isSuccess) {
            Notice.showDownNotice(GameConfig.Language.Text_Fail.Value);
            return;
        }
        this.hide();
        if (this.callback) this.callback();
    }
    onClickNoButton() {
        this.hide();
    }
    showRewardAd(callback, contentText, noText, yesText, openType = 0) {
        this.callback = callback;
        this.mContentTxt.text = contentText;
        this.mNoBtn.text = noText;
        this.mYesBtn.text = yesText;
        setTimeout((() => {
            if (openType == 1) {
                this.mCanvas.position = new mw.Vector2(this.rootCanvas.size.x / 2 - this.mCanvas.size.x, this.rootCanvas.size.y / 2 - this.mCanvas.size.y / 2);
            } else {
                this.mCanvas.position = new mw.Vector2(this.rootCanvas.size.x / 2 - this.mCanvas.size.x / 2, this.rootCanvas.size.y / 2 - this.mCanvas.size.y / 2);
            }
        }), 1);
        this.show();
    }
}

class TipsPanel extends TipsPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.callback = null;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerDialog;
        this.bindButtons();
    }
    bindButtons() {
        this.mYesBtn.onClicked.add(this.onClickYesButton.bind(this));
        this.mNoBtn.onClicked.add(this.onClickNoButton.bind(this));
    }
    onClickYesButton() {
        if (this.callback) this.callback();
        this.hide();
    }
    onClickNoButton() {
        this.hide();
    }
    showTips(callback, titleText, contentText, noText, yesText) {
        this.callback = callback;
        this.mTitleTxt.text = titleText;
        this.mContentTxt.text = contentText;
        this.mNoBtn.text = noText;
        this.mYesBtn.text = yesText;
        this.show();
    }
}

var foreign83 = Object.freeze({
    __proto__: null,
    TipsPanel: TipsPanel,
    default: AdPanel
});

class HUDItem extends HUDItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.hudModuleC = null;
        this.bagId = 0;
        this.isUse = false;
    }
    get getHUDPanel() {
        if (!this.hudPanel) {
            this.hudPanel = UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.useState(false);
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addClickButton() {
        let nextBagId = GameConfig.ActionProp.getElement(this.bagId).NextId;
        if (!nextBagId || nextBagId <= 0) return;
        this.getHUDModuleC.clickGoodItemAction.call(this.bagId);
    }
    addCloseButton() {
        this.getHUDModuleC.clickCloseGoodItemAction.call(this.bagId);
    }
    setDatas(bagId) {
        this.bagId = bagId;
        let actionPropElement = GameConfig.ActionProp.getElement(this.bagId);
        if (actionPropElement.Tab == 2 || actionPropElement.Tab == 6) {
            if (!actionPropElement.AssetId || actionPropElement.AssetId == "") {
                actionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId);
                this.useState(false);
            } else {
                this.useState(true);
            }
        } else {
            if (!actionPropElement.AssetId || actionPropElement.AssetId == "") {
                actionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId);
                this.useState(true);
            } else {
                this.useState(false);
            }
        }
        if (actionPropElement.VehiclesIcon) {
            this.mIconImage.imageGuid = actionPropElement.VehiclesIcon;
        } else if (actionPropElement.Icon) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.Icon);
        } else if (actionPropElement.AssetId) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.AssetId);
        } else if (bagId == actionPropElement.NextId) {
            let nextActionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId - 1);
            if (nextActionPropElement.VehiclesIcon) {
                this.mIconImage.imageGuid = nextActionPropElement.VehiclesIcon;
            } else if (nextActionPropElement.Icon) {
                Utils.setImageByAssetIconData(this.mIconImage, nextActionPropElement.Icon);
            } else if (nextActionPropElement.AssetId) {
                Utils.setImageByAssetIconData(this.mIconImage, nextActionPropElement.AssetId);
            }
        }
    }
    useState(isUse) {
        this.isUse = isUse;
        Utils.setWidgetVisibility(this.mSelectImage, this.isUse ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
}

class HUDPanel extends HUDPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.isOpenBGM = true;
        this.hudItems = [];
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.controllerExitUIVisible(false);
        this.controllerBagUIVisible(false);
        this.controllerActionUIVisible(false);
        this.constollerGoodsCanvasVisible(false);
        Utils.setWidgetVisibility(this.mMusicCanvas, mw.SlateVisibility.Collapsed);
        this.mOpenSignInTextBlock.text = GameConfig.Language.Text_HUDPanelTips1.Value;
        this.mOpenShareTextBlock.text = GameConfig.Language.Text_HUDPanelTips2.Value;
        this.mOpenMallTextBlock.text = GameConfig.Language.Text_HUDPanelTips5.Value;
        this.mOpenClothTextBlock.text = GameConfig.Language.Text_HUDPanelTips6.Value;
        this.mOpenRankTextBlock.text = GameConfig.Language.Text_HUDPanelTips3.Value;
        this.mOpenMusicTextBlock.text = GameConfig.Language.Text_HUDPanelTips7.Value;
        this.mOpenSetTextBlock.text = GameConfig.Language.Text_HUDPanelTips4.Value;
        this.mFreeTextBlock.text = StringUtil.format(GameConfig.Language.Text_FreeChangeOfClothes2.Value, GlobalData.freeTime);
        Utils.setWidgetVisibility(this.mFreeTextBlock, mw.SlateVisibility.Collapsed);
        if (GlobalData.languageId == 0) {
            Utils.setWidgetVisibility(this.mOpenClothImage, mw.SlateVisibility.Collapsed);
        }
        this.initShakeMallTween();
        this.initShakeShareTween();
        this.initShakeSignInTween();
    }
    updateFreeTime() {
        console.error(`wfz - freeTime:${GlobalData.freeTime}`);
        if (GlobalData.freeTime <= 0 || GlobalData.freeTime >= 999) {
            Utils.setWidgetVisibility(this.mFreeTextBlock, mw.SlateVisibility.Collapsed);
        } else {
            Utils.setWidgetVisibility(this.mFreeTextBlock, mw.SlateVisibility.SelfHitTestInvisible);
            this.mFreeTextBlock.text = StringUtil.format(GameConfig.Language.Text_FreeChangeOfClothes2.Value, GlobalData.freeTime);
        }
    }
    bindButton() {
        this.mJumpButton.onClicked.add(this.addJumpButton.bind(this));
        this.mCrouchButton.onClicked.add(this.addCrouchButton.bind(this));
        this.mExitButton.onClicked.add(this.addFlyButton.bind(this));
        this.mActionButton.onClicked.add(this.addActionButton.bind(this));
        this.mBagButton.onClicked.add(this.addBagButton.bind(this));
        this.mShowHideGoodsButton.onClicked.add(this.showHideGoodsButton.bind(this));
        this.mDeleteAllGoodsButton.onClicked.add(this.addDeleteAllGoods.bind(this));
        this.mOpenSetButton.onClicked.add(this.addSetButton.bind(this));
        this.mOpenClothButton.onClicked.add(this.addClothButton.bind(this));
        this.mOpenRankButton.onClicked.add(this.addOpenRankButton.bind(this));
        this.mOpenShareButton.onClicked.add(this.addOpenShareButton.bind(this));
        this.mOpenSignInButton.onClicked.add(this.addOpenSignInButton.bind(this));
        this.mOpenMusicButton.onClicked.add(this.addOpenMusicButton.bind(this));
        this.mOnOffMusicBtn.onClicked.add(this.addOnOffMusicButton.bind(this));
        this.mLeftMusicBtn.onClicked.add(this.addPreMusicButton.bind(this));
        this.mRightMusicBtn.onClicked.add(this.addNextMusicButton.bind(this));
        this.mCloseMusicBtn.onClicked.add(this.addCloseMusicButton.bind(this));
        this.mOpenMallButton.onClicked.add(this.addOpenMallButton.bind(this));
        this.mOpenPhotoButton.onClicked.add(this.addOpenPhotoButton.bind(this));
    }
    addJumpButton() {
        this.getHUDModuleC.onJumpAction.call();
    }
    addCrouchButton() {
        this.getHUDModuleC.onCrouchAction.call();
    }
    addFlyButton() {
        this.getHUDModuleC.onExitAction.call();
    }
    addActionButton() {
        this.getHUDModuleC.onActionButton.call();
    }
    addBagButton() {
        this.getHUDModuleC.onBagButton.call();
    }
    addOpenRankButton() {
        this.getHUDModuleC.onOpenRankAction.call();
    }
    addOpenShareButton() {
        this.getHUDModuleC.onOpenShareAction.call(1);
    }
    addOpenSignInButton() {
        this.getHUDModuleC.onOpenSignInAction.call();
    }
    addOpenMusicButton() {
        Utils.setWidgetVisibility(this.mMusicCanvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    addOnOffMusicButton() {
        this.isOpenBGM = !this.isOpenBGM;
        this.getHUDModuleC.onOnOffMusicAction.call(this.isOpenBGM);
        let offOnIcon = this.isOpenBGM ? GlobalData.onMusicIconGuid : GlobalData.offMusicIconGuid;
        this.mOnOffMusicBtn.normalImageGuid = offOnIcon;
        this.mOnOffMusicBtn.pressedImageGuid = offOnIcon;
        this.mOnOffMusicBtn.disableImageGuid = offOnIcon;
    }
    addNextMusicButton() {
        this.getHUDModuleC.onSwitchBgmAction.call(1);
    }
    addPreMusicButton() {
        this.getHUDModuleC.onSwitchBgmAction.call(-1);
    }
    addCloseMusicButton() {
        Utils.setWidgetVisibility(this.mMusicCanvas, mw.SlateVisibility.Collapsed);
    }
    addOpenMallButton() {
        this.getHUDModuleC.onOpenMallAction.call();
    }
    addOpenPhotoButton() {
        this.getHUDModuleC.onOpenPhotoAction.call();
    }
    showHideGoodsButton() {
        this.constollerGoodsContentCanvasVisible(!this.mGoodsContentCanvas.visible, false);
    }
    addDeleteAllGoods() {
        this.constollerGoodsContentCanvasVisible(false, true);
        this.getHUDModuleC.deleteAllGoodsAction.call();
    }
    addSetButton() {
        this.getHUDModuleC.onOpenSetAction.call();
    }
    addClothButton() {
        this.getHUDModuleC.onOpenClothAction.call();
    }
    controllerBagUIVisible(isVisible) {
        Utils.setWidgetVisibility(this.mBagBgImage, isVisible ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    controllerActionUIVisible(isVisible) {
        Utils.setWidgetVisibility(this.mActionBgImage, isVisible ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    controllerExitUIVisible(isVisible) {
        Utils.setWidgetVisibility(this.mExitBgImage, isVisible ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    updateBagIcon(bagId) {
        if (bagId == 0) {
            this.controllerBagUIVisible(false);
        } else {
            this.controllerBagUIVisible(true);
            let bagIcon = GameConfig.ActionProp.getElement(bagId).ButtonIconId;
            this.mBagButton.normalImageGuid = bagIcon;
            this.mBagButton.pressedImageGuid = bagIcon;
            this.mBagButton.disableImageGuid = bagIcon;
        }
    }
    constollerGoodsCanvasVisible(isVisible) {
        Utils.setWidgetVisibility(this.mGoodsCanvas, isVisible ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    constollerGoodsContentCanvasVisible(isVisible, isParent) {
        if (isParent) this.constollerGoodsCanvasVisible(isVisible);
        Utils.setWidgetVisibility(this.mGoodsContentCanvas, isVisible ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    updateGoodsListCanvas(bagIds) {
        if (this.hudItems.length > bagIds.length) {
            for (let i = 0; i < bagIds.length; ++i) {
                this.hudItems[i].setDatas(bagIds[i]);
                Utils.setWidgetVisibility(this.hudItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = bagIds.length; i < this.hudItems.length; ++i) {
                Utils.setWidgetVisibility(this.hudItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        } else {
            for (let i = 0; i < this.hudItems.length; ++i) {
                this.hudItems[i].setDatas(bagIds[i]);
                Utils.setWidgetVisibility(this.hudItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.hudItems.length; i < bagIds.length; ++i) {
                let hudItem = UIService.create(HUDItem);
                this.mGoodsListCanvas.addChild(hudItem.uiObject);
                hudItem.setDatas(bagIds[i]);
                this.hudItems.push(hudItem);
            }
        }
        this.constollerGoodsContentCanvasVisible(bagIds.length > 0, true);
    }
    onShow(...params) {
        this.mVirtualJoystickPanel.resetJoyStick();
    }
    onHide() {
        this.mVirtualJoystickPanel.resetJoyStick();
    }
    initShakeMallTween() {
        let rightBigToLeftSmall = this.getShakeScaleTween(this.mOpenMallButton, .5, 20, -20, 1.5, .9);
        let leftSamllToRightBig = this.getShakeScaleTween(this.mOpenMallButton, .5, -20, 20, .9, 1.5);
        rightBigToLeftSmall.start().onComplete((() => {
            TimeUtil.delaySecond(.1).then((() => {
                leftSamllToRightBig.start().onComplete((() => {
                    TimeUtil.delaySecond(.1).then((() => {
                        rightBigToLeftSmall.start();
                    }));
                }));
            }));
        }));
    }
    initShakeShareTween() {
        let rightBigToLeftSmall = this.getScaleTween(this.mOpenShareButton, .3, .8, .8, 1.2, 1.2);
        let leftSamllToRightBig = this.getScaleTween(this.mOpenShareButton, .3, 1.2, 1.2, .8, .8);
        rightBigToLeftSmall.start().onComplete((() => {
            TimeUtil.delaySecond(.1).then((() => {
                leftSamllToRightBig.start().onComplete((() => {
                    TimeUtil.delaySecond(.1).then((() => {
                        rightBigToLeftSmall.start();
                    }));
                }));
            }));
        }));
    }
    initShakeSignInTween() {
        let rightBigToLeftSmall = this.getShakeTween(this.mOpenSignInButton, 2, 0, 360);
        let leftSamllToRightBig = this.getShakeTween(this.mOpenSignInButton, 2, 360, 0);
        rightBigToLeftSmall.start().onComplete((() => {
            TimeUtil.delaySecond(.1).then((() => {
                leftSamllToRightBig.start().onComplete((() => {
                    TimeUtil.delaySecond(.1).then((() => {
                        rightBigToLeftSmall.start();
                    }));
                }));
            }));
        }));
    }
    getShakeTween(widget, angleTime, startAngle, endAngle) {
        return new Tween({
            angle: startAngle
        }).to({
            angle: endAngle
        }, angleTime * 1e3).onUpdate((v => {
            widget.renderTransformAngle = v.angle;
        })).easing(cubicBezier(.22, .9, .28, .92));
    }
    getScaleTween(widget, scaleTime, startScaleX, startScaleY, endScaleX, endScaleY) {
        return new Tween({
            scaleX: startScaleX,
            scaleY: startScaleY
        }).to({
            scaleX: endScaleX,
            scaleY: endScaleY
        }, scaleTime * 1e3).onUpdate((v => {
            widget.renderScale = new mw.Vector2(v.scaleX, v.scaleY);
        })).easing(cubicBezier(.22, .9, .28, .92));
    }
    getShakeScaleTween(widget, shakeScaleTime, startAngle, endAngle, startScale, endScale) {
        return new Tween({
            angle: startAngle,
            scale: startScale
        }).to({
            angle: endAngle,
            scale: endScale
        }, shakeScaleTime * 1e3).onUpdate((v => {
            widget.renderTransformAngle = v.angle;
            widget.renderScale = new mw.Vector2(v.scale, v.scale);
        })).easing(cubicBezier(.22, .9, .28, .92));
    }
    getRenderOpacityTween(widget, time, startOpacity, endOpacity) {
        return new Tween({
            opacity: startOpacity
        }).to({
            opacity: endOpacity
        }, time * 1e3).onUpdate((v => {
            widget.renderOpacity = v.opacity;
        })).easing(cubicBezier(.22, .9, .28, .92));
    }
    getPosTween(widget, posTime, startPosX, startPosY, endPosX, endPosY) {
        return new Tween({
            posX: startPosX,
            posY: startPosY
        }).to({
            posX: endPosX,
            posY: endPosY
        }, posTime * 1e3).onUpdate((v => {
            widget.position = new mw.Vector2(v.posX, v.posY);
        })).easing(cubicBezier(.22, .9, .28, .92));
    }
}

class HUDModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudPanel = null;
        this.danMuModuleC = null;
        this.savePanel = null;
        this.adPanel = null;
        this.onJumpAction = new Action;
        this.onCrouchAction = new Action;
        this.onExitAction = new Action;
        this.onActionButton = new Action;
        this.onBagButton = new Action;
        this.clickGoodItemAction = new Action1;
        this.clickCloseGoodItemAction = new Action1;
        this.deleteAllGoodsAction = new Action;
        this.onOpenSetAction = new Action;
        this.onOpenClothAction = new Action;
        this.onOpenRankAction = new Action;
        this.onOpenShareAction = new Action1;
        this.onUseShareAction = new Action2;
        this.onOpenSignInAction = new Action;
        this.onFreeTryOnAction = new Action;
        this.onOnOffMusicAction = new Action1;
        this.onSwitchBgmAction = new Action1;
        this.onOpenMallAction = new Action;
        this.onOpenPhotoAction = new Action;
        this.freeNpc = null;
        this.currentBgmIndex = 1;
        this.bgmMusics = [];
        this.changeDescription = null;
        this.resetDecriptionTimeoutId = null;
        this.isOpenAvatar = false;
        this.uiClickSoundId = null;
    }
    get getHUDPanel() {
        if (!this.hudPanel) {
            this.hudPanel = UIService.getUI(HUDPanel);
        }
        return this.hudPanel;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    get getSavePanel() {
        if (!this.savePanel) {
            this.savePanel = UIService.getUI(SavePanel);
        }
        return this.savePanel;
    }
    get getAdPanel() {
        if (!this.adPanel) {
            this.adPanel = UIService.getUI(AdPanel);
        }
        return this.adPanel;
    }
    onStart() {
        this.initUI();
        this.bindAction();
    }
    onEnterScene(sceneType) {
        this.getHUDPanel.show();
        this.playBGMusic(0);
        this.registerGlobalClickSound();
        AvatarEditorService.setAvatarEditorButtonVisible(true);
        this.initFreeNpc();
    }
    net_syncFreeTime(freeTime) {
        if (!isNaN(freeTime) && freeTime > 0) GlobalData.freeTime = freeTime;
        if (mw.UIService.getUI(HUDPanel, false)?.visible) {
            this.getHUDPanel.updateFreeTime();
        } else {
            TimeUtil.delaySecond(10).then((() => {
                this.getHUDPanel.updateFreeTime();
            }));
        }
    }
    async initFreeNpc() {}
    initUI() {}
    bindAction() {
        this.onJumpAction.add(this.onJumpActionHandler.bind(this));
        this.onCrouchAction.add(this.onCrouchActionHandler.bind(this));
        this.onActionButton.add(this.onActionButtonHandler.bind(this));
        this.onBagButton.add(this.onBagButtonHandler.bind(this));
        this.onOpenSetAction.add(this.onOpenSetActionHandler.bind(this));
        this.onOpenClothAction.add(this.onOpenClothActionHandler.bind(this));
        this.onOpenShareAction.add(this.onOpenShareActionHandler.bind(this));
        this.onUseShareAction.add(this.onUseShareActionHandler.bind(this));
        this.onFreeTryOnAction.add(this.addFreeTryOnAction.bind(this));
        mw.AvatarEditorService.avatarServiceDelegate.add(this.addAvatarServiceDelegate.bind(this));
        Event.addLocalListener(EventType.OnOffMainUI, this.addOnOffMainUI.bind(this));
        this.onOnOffMusicAction.add(this.addOnOffMusicAction.bind(this));
        this.onSwitchBgmAction.add(this.playBGMusic.bind(this));
        this.onOpenPhotoAction.add(this.addOpenPhotoAction.bind(this));
    }
    addOpenPhotoAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await PhotoStudioService.asyncOpenPhotoStudioModule();
        }));
    }
    addOnOffMusicAction(isOpenBGM) {
        isOpenBGM ? this.playBGMusic(0) : SoundService.stopBGM();
    }
    playBGMusic(bgmIndex) {
        if (!this.bgmMusics || this.bgmMusics?.length == 0) this.bgmMusics = GameConfig.Music.getAllElement();
        this.currentBgmIndex = this.currentBgmIndex + bgmIndex;
        if (this.currentBgmIndex > this.bgmMusics.length) {
            this.currentBgmIndex = 1;
        } else if (this.currentBgmIndex < 1) {
            this.currentBgmIndex = this.bgmMusics.length;
        }
        let bgmId = this.bgmMusics[this.currentBgmIndex - 1].Guid;
        SoundService.playBGM(bgmId);
        this.getHUDPanel.mMusicText.text = this.bgmMusics[this.currentBgmIndex - 1].Annotation;
    }
    onJumpActionHandler() {
        if (this.localPlayer.character.getCurrentState() != mw.CharacterStateType.Jumping) {
            this.localPlayer.character.changeState(mw.CharacterStateType.Jumping);
        }
    }
    onCrouchActionHandler() {
        if (this.localPlayer.character.getCurrentState() == mw.CharacterStateType.Running) {
            this.localPlayer.character.changeState(mw.CharacterStateType.Crouching);
        } else if (this.localPlayer.character.getCurrentState() == mw.CharacterStateType.Crouching) {
            this.localPlayer.character.changeState(mw.CharacterStateType.Running);
        }
    }
    onActionButtonHandler() {
        this.getDanMuModuleC.onStopActionButton.call();
    }
    onBagButtonHandler() {
        this.getDanMuModuleC.onNextBagAction.call();
    }
    onOpenSetActionHandler() {}
    onOpenClothActionHandler() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await AvatarEditorService.asyncOpenAvatarEditorModule();
        }));
    }
    onOpenShareActionHandler(openType) {
        return;
    }
    onUseShareActionHandler(shareId, openType) {
        if (openType == 1) {
            this.useShareId(shareId);
        } else if (openType == 2) {
            AvatarEditorService.asyncCloseAvatarEditorModule().then((() => {
                ExecutorManager.instance.pushAsyncExecutor((async () => {
                    await TimeUtil.delaySecond(5);
                    await this.useDescription();
                }));
            }));
        }
    }
    addDescriptionChange() {
        this.localPlayer.character.asyncReady().then((() => {
            console.error(`变化`);
            this.changeDescription = this.localPlayer.character.getDescription();
            if (this.isOpenAvatar) {
                if (!UIService.getUI(SavePanel, false)?.visible) this.getSavePanel.show();
            }
        }));
    }
    useShareId(shareId) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let isSuccess = await Utils.applySharedId(this.localPlayer.character, shareId);
            if (isSuccess) {
                Notice.showDownNotice(GameConfig.Language.Text_TryItOnSuccessfully.Value);
            } else {
                Notice.showDownNotice(GameConfig.Language.Text_InvalidID.Value);
            }
        }));
    }
    addFreeTryOnAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.initFreeNpc();
            Notice.showDownNotice(GameConfig.Language.Text_FreeChangeOfClothes1.Value);
            this.freeNpc.setDescription(this.localPlayer.character.getDescription());
            await this.freeNpc.asyncReady();
            await TimeUtil.delaySecond(1);
            await AvatarEditorService.asyncCloseAvatarEditorModule();
            TimeUtil.delaySecond(2).then((() => {
                Notice.showDownNotice(GameConfig.Language.Text_FreeChangeOfClothes1.Value);
                TimeUtil.delaySecond(2).then((() => {
                    Notice.showDownNotice(GameConfig.Language.Text_FreeChangeOfClothes1.Value);
                }));
            }));
            Notice.showDownNotice(GameConfig.Language.Text_FreeChangeOfClothes1.Value);
            await TimeUtil.delaySecond(5);
            await this.useDescription();
        }));
    }
    async useDescription() {
        await this.localPlayer.character.asyncReady();
        this.localPlayer.character.setDescription(this.freeNpc.getDescription());
        await this.localPlayer.character.asyncReady();
        this.localPlayer.character.syncDescription();
        Notice.showDownNotice(GameConfig.Language.Text_TryItOnSuccessfully.Value);
        this.resetDecription();
    }
    resetDecription() {
        this.clearResetDecriptionTimeoutId();
        this.resetDecriptionTimeoutId = setTimeout((() => {
            AccountService.downloadData(this.localPlayer.character, (success => {
                if (!success) return;
                Notice.showDownNotice(GameConfig.Language.Text_FreeChangeOfClothes3.Value);
            }));
        }), GlobalData.freeTime * 60 * 1e3);
    }
    clearResetDecriptionTimeoutId() {
        if (this.resetDecriptionTimeoutId) {
            clearTimeout(this.resetDecriptionTimeoutId);
            this.resetDecriptionTimeoutId = null;
        }
    }
    addAvatarServiceDelegate(eventName, ...params) {
        console.error(`eventName: ${eventName}`);
        switch (eventName) {
          case "AE_OnQuit":
            Event.dispatchToLocal(EventType.OnOffMainUI, true);
            if (UIService.getUI(SavePanel, false)?.visible) this.getSavePanel.hide();
            this.isOpenAvatar = false;
            break;

          case "AE_OnOpen":
            Event.dispatchToLocal(EventType.OnOffMainUI, false);
            this.isOpenAvatar = true;
            break;
        }
    }
    addOnOffMainUI(isShow) {
        console.error(`isShow: ${isShow}`);
        isShow ? this.getHUDPanel.show() : this.getHUDPanel.hide();
    }
    controllerBagUIVisible(isVisible) {
        this.getHUDPanel.controllerBagUIVisible(isVisible);
    }
    controllerActionUIVisible(isVisible) {
        this.getHUDPanel.controllerActionUIVisible(isVisible);
    }
    controllerExitUIVisible(isVisible) {
        this.getHUDPanel.controllerExitUIVisible(isVisible);
    }
    updateBagIcon(bagId) {
        this.getHUDPanel.updateBagIcon(bagId);
    }
    updateGoodsListCanvas(bagIds) {
        this.getHUDPanel.updateGoodsListCanvas(bagIds);
    }
    action(bagId) {
        this.getDanMuModuleC.onClickBagItemAction.call(bagId);
    }
    registerGlobalClickSound() {
        Event.addLocalListener("PlayButtonClick", (v => {
            if (this.uiClickSoundId) {
                SoundService.stopSound(this.uiClickSoundId);
                this.uiClickSoundId = null;
            }
            this.uiClickSoundId = SoundService.playSound(`12723`);
        }));
    }
}

class HUDModuleS extends ModuleS {
    onStart() {}
    onPlayerEnterGame(player) {}
    initFreeTime(player) {
        Utils.getCustomdata(`FreeTime`).then((freeTime => {
            this.getClient(player).net_syncFreeTime(freeTime);
        }));
    }
}

class SharePanel extends SharePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.openType = 1;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mMyselfTipsTextBlock.text = GameConfig.Language.Text_MyCharacterId.Value;
        this.mOtherTipsTextBlock.text = GameConfig.Language.Text_TryOnYourFriendAvatarForFree.Value;
        this.mInputBox.text = "";
        this.mInputBox.hintString = GameConfig.Language.Text_PleaseEnter.Value;
        this.mCancelTextBlock.text = GameConfig.Language.Text_Cancel.Value;
        this.mUseTextBlock.text = GameConfig.Language.Text_FreeTryOn.Value;
        this.mAdsButton.text = GameConfig.Language.Text_FreeTryOn.Value;
        Utils.setWidgetVisibility(this.mAdsButton, mw.SlateVisibility.Collapsed);
    }
    bindButton() {
        this.mCopyButton.onClicked.add(this.addCopyButton.bind(this));
        this.mCancelButton.onClicked.add(this.addCancelButton.bind(this));
        this.mUseButton.onClicked.add(this.addUseButton.bind(this));
    }
    addCopyButton() {
        let copyText = this.mMyselfTextBlock.text;
        if (!copyText || copyText == "" || copyText.length == 0) return;
        StringUtil.clipboardCopy(copyText);
        Notice.showDownNotice(GameConfig.Language.Text_CopySuccessfully.Value);
    }
    addCancelButton() {
        this.hide();
    }
    addUseButton() {
        if (this.openType == 1) {
            let shareId = this.mInputBox.text;
            if (!shareId || shareId == "" || shareId.length == 0) return;
            this.getHUDModuleC.onUseShareAction.call(shareId, this.openType);
        } else if (this.openType == 2) {
            this.getHUDModuleC.onUseShareAction.call(null, this.openType);
        }
        this.hide();
    }
    showPanel(shareId, openType) {
        this.openType = openType;
        this.mMyselfTextBlock.text = shareId;
        if (openType == 1) {
            Utils.setWidgetVisibility(this.mInputBgImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mOtherTipsTextBlock.text = GameConfig.Language.Text_TryOnYourFriendAvatarForFree.Value;
            setTimeout((() => {
                this.mMainImage.position = new mw.Vector2(this.rootCanvas.size.x / 2 - this.mMainImage.size.x / 2, this.rootCanvas.size.y / 2 - this.mMainImage.size.y / 2);
            }), 1);
        } else if (openType == 2) {
            Utils.setWidgetVisibility(this.mInputBgImage, mw.SlateVisibility.Collapsed);
            this.mOtherTipsTextBlock.text = GameConfig.Language.Text_CopyTheCharacterIDShareFriendsTryOn.Value;
            setTimeout((() => {
                this.mMainImage.position = new mw.Vector2(this.rootCanvas.size.x / 2 - this.mMainImage.size.x, this.rootCanvas.size.y / 2 - this.mMainImage.size.y / 2);
            }), 1);
        }
    }
    onShow(...params) {
        this.mMyselfTextBlock.text = GameConfig.Language.Text_Loading.Value;
        this.mInputBox.text = ``;
    }
}

class SavePanel extends SavePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mSaveTipsTextBlock.text = GameConfig.Language.Text_SaveImagesForFree.Value;
    }
    bindButton() {
        this.mSaveButton.onClicked.add(this.addSaveButton.bind(this));
    }
    addSaveButton() {
        this.getHUDModuleC.onFreeTryOnAction.call();
    }
}

var foreign102 = Object.freeze({
    __proto__: null,
    HUDItem: HUDItem,
    HUDModuleC: HUDModuleC,
    HUDModuleS: HUDModuleS,
    HUDPanel: HUDPanel,
    SavePanel: SavePanel,
    SharePanel: SharePanel
});

class Bubble {
    constructor(_object, _uiPool, _text, _onMeasureCallback) {
        this.offsetZ = 0;
        this._halfWidth = 0;
        this._height = 0;
        this._currentHeight = 0;
        this.tempSize = Vector2.zero;
        this._object = _object;
        this._uiPool = _uiPool;
        this._text = _text;
        this._onMeasureCallback = _onMeasureCallback;
        this._ui = _uiPool.spawn();
        this.tempSize.x = 1920;
        this.tempSize.y = 0;
        this._ui.mDialogTextBlock.size = this.tempSize;
        this._ui.mDialogTextBlock.text = _text;
        this._ui.show();
        this._fsm = new BubbleFsm(this);
    }
    get object() {
        return this._object;
    }
    onUpdate(dt) {
        return this._fsm.update(dt);
    }
    jump(_scale) {
        this._currentHeight = _scale * this._height;
        this._onMeasureCallback(this._object);
    }
    scale(_scale) {
        this.tempSize.x = Math.min(1, _scale * 3);
        this.tempSize.y = _scale;
        this._ui.rootCanvas.renderScale = this.tempSize;
    }
    offset(offset) {
        this.offsetZ = offset;
    }
    get height() {
        return this._currentHeight;
    }
    measure() {
        const size = this._ui.mDialogTextBlock.size;
        this.tempSize.x = size.x;
        this.tempSize.x = size.x + 20;
        this.tempSize.y = size.y + 20;
        this._halfWidth = this.tempSize.x / 2;
        this._height = this.tempSize.y + 12;
        this._ui.rootCanvas.size = this.tempSize;
        this._ui.mDialogTextBlock.size = this.tempSize;
        this.tempSize.x += 4;
        this.tempSize.y += 4;
        this._ui.mDialogTextBlock.size = this.tempSize;
        this._ui.mDialogTextBlock.text = "";
    }
    get isSizeValidate() {
        const size = this._ui.mDialogTextBlock.size;
        return size.y > 0;
    }
    showText() {
        this._ui.mDialogTextBlock.text = this._text;
    }
    destory() {
        this._ui.rootCanvas.visibility = mw.SlateVisibility.Collapsed;
        this._uiPool.despawn(this._ui);
    }
    updatePosition() {
        const loc = this._object.worldTransform.position;
        loc.z += 80;
        this.tempSize = mw.InputUtil.projectWorldPositionToWidgetPosition(loc, false).screenPosition;
        this.tempSize.y -= this.offsetZ;
        this.tempSize.x -= this._halfWidth;
        this._ui.rootCanvas.position = this.tempSize;
    }
}

class BubbleFsm {
    constructor(bubble) {
        this.bubble = bubble;
        this._stateList = [];
        this._stateList.push(this._currentState = new StateMeasure(this));
        this._stateList.push(new StateExpand(this));
        this._stateList.push(new StateView(this));
        this._stateList.push(new StateJump(this));
        this._currentState.onEnter();
    }
    finish() {
        this._isFinish = true;
    }
    update(dt) {
        this._currentState.update(dt);
        this._doChangeState();
        return this._isFinish;
    }
    _doChangeState() {
        if (this._nextState) {
            this._currentState.onExit();
            this._currentState = this._nextState;
            this._currentState.onEnter();
            this._nextState = null;
        }
    }
    switchState(stateClass) {
        if (this._currentState.constructor.name != stateClass.name) {
            this._nextState = this._stateList.find((i => i.constructor.name == stateClass.name));
        }
    }
}

class StateView {
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {}
    onEnter() {
        this._timer = 4;
        this.fsm.bubble.showText();
    }
    update(dt) {
        this._timer -= dt;
        if (this._timer <= 0) {
            this.fsm.finish();
        }
        this.fsm.bubble.updatePosition();
    }
}

class StateExpand {
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {}
    onEnter() {
        this._timer = 0;
    }
    update(dt) {
        this._timer += dt * 5;
        if (this._timer >= 1) {
            this._timer = 1;
            this.fsm.switchState(StateView);
        }
        this.fsm.bubble.scale(this._timer);
        this.fsm.bubble.updatePosition();
    }
}

class StateJump {
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {}
    onEnter() {
        this._timer = 0;
    }
    update(dt) {
        this._timer += dt * 5;
        if (this._timer >= 1) {
            this._timer = 1;
            this.fsm.switchState(StateExpand);
        }
        this.fsm.bubble.jump(this._timer);
    }
}

class StateMeasure {
    constructor(fsm) {
        this.fsm = fsm;
    }
    onExit() {}
    onEnter() {
        this._timer = .2;
        this.fsm.bubble.scale(0);
    }
    update(dt) {
        this._timer -= dt;
        if (this._timer <= 0) {
            if (this.fsm.bubble.isSizeValidate) {
                this.fsm.bubble.measure();
                this.fsm.switchState(StateJump);
            } else {
                this._timer = .2;
            }
        }
    }
}

var foreign87 = Object.freeze({
    __proto__: null,
    Bubble: Bubble
});

class DanMuItem {}

class ChatData {}

class ActionData {}

var foreign89 = Object.freeze({
    __proto__: null,
    ActionData: ActionData,
    ChatData: ChatData,
    DanMuItem: DanMuItem
});

let ChatPanel_Generate = class ChatPanel_Generate extends UIScript {
    get mOpenChatCanvas() {
        if (!this.mOpenChatCanvas_Internal && this.uiWidgetBase) {
            this.mOpenChatCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenChatCanvas");
        }
        return this.mOpenChatCanvas_Internal;
    }
    get mOpenChatBgImage() {
        if (!this.mOpenChatBgImage_Internal && this.uiWidgetBase) {
            this.mOpenChatBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenChatCanvas/mOpenChatBgImage");
        }
        return this.mOpenChatBgImage_Internal;
    }
    get mOpenChatButton() {
        if (!this.mOpenChatButton_Internal && this.uiWidgetBase) {
            this.mOpenChatButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenChatCanvas/mOpenChatButton");
        }
        return this.mOpenChatButton_Internal;
    }
    get mOpenExpressionCanvas() {
        if (!this.mOpenExpressionCanvas_Internal && this.uiWidgetBase) {
            this.mOpenExpressionCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenExpressionCanvas");
        }
        return this.mOpenExpressionCanvas_Internal;
    }
    get mOpenExpressionBgImage() {
        if (!this.mOpenExpressionBgImage_Internal && this.uiWidgetBase) {
            this.mOpenExpressionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenExpressionCanvas/mOpenExpressionBgImage");
        }
        return this.mOpenExpressionBgImage_Internal;
    }
    get mOpenExpressionButton() {
        if (!this.mOpenExpressionButton_Internal && this.uiWidgetBase) {
            this.mOpenExpressionButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenExpressionCanvas/mOpenExpressionButton");
        }
        return this.mOpenExpressionButton_Internal;
    }
    get mOpenBagCanvas() {
        if (!this.mOpenBagCanvas_Internal && this.uiWidgetBase) {
            this.mOpenBagCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenBagCanvas");
        }
        return this.mOpenBagCanvas_Internal;
    }
    get mOpenBagBgImage() {
        if (!this.mOpenBagBgImage_Internal && this.uiWidgetBase) {
            this.mOpenBagBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenBagCanvas/mOpenBagBgImage");
        }
        return this.mOpenBagBgImage_Internal;
    }
    get mOpenBagButton() {
        if (!this.mOpenBagButton_Internal && this.uiWidgetBase) {
            this.mOpenBagButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenBagCanvas/mOpenBagButton");
        }
        return this.mOpenBagButton_Internal;
    }
    get mUnloadButton() {
        if (!this.mUnloadButton_Internal && this.uiWidgetBase) {
            this.mUnloadButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenBagCanvas/mUnloadButton");
        }
        return this.mUnloadButton_Internal;
    }
    get mOpenActionCanvas() {
        if (!this.mOpenActionCanvas_Internal && this.uiWidgetBase) {
            this.mOpenActionCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenActionCanvas");
        }
        return this.mOpenActionCanvas_Internal;
    }
    get mOpenActionBgImage() {
        if (!this.mOpenActionBgImage_Internal && this.uiWidgetBase) {
            this.mOpenActionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenActionCanvas/mOpenActionBgImage");
        }
        return this.mOpenActionBgImage_Internal;
    }
    get mOpenActionButton() {
        if (!this.mOpenActionButton_Internal && this.uiWidgetBase) {
            this.mOpenActionButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenActionCanvas/mOpenActionButton");
        }
        return this.mOpenActionButton_Internal;
    }
    get mChatList1Canvas() {
        if (!this.mChatList1Canvas_Internal && this.uiWidgetBase) {
            this.mChatList1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList1Canvas");
        }
        return this.mChatList1Canvas_Internal;
    }
    get mChatListBg1Image() {
        if (!this.mChatListBg1Image_Internal && this.uiWidgetBase) {
            this.mChatListBg1Image_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList1Canvas/ChatList1Canvas/mChatListBg1Image");
        }
        return this.mChatListBg1Image_Internal;
    }
    get mChatList1ScrollBox() {
        if (!this.mChatList1ScrollBox_Internal && this.uiWidgetBase) {
            this.mChatList1ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList1Canvas/ChatList1Canvas/mChatList1ScrollBox");
        }
        return this.mChatList1ScrollBox_Internal;
    }
    get mChatList1ContentCanvas() {
        if (!this.mChatList1ContentCanvas_Internal && this.uiWidgetBase) {
            this.mChatList1ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList1Canvas/ChatList1Canvas/mChatList1ScrollBox/mChatList1ContentCanvas");
        }
        return this.mChatList1ContentCanvas_Internal;
    }
    get mCloseChatList1Button() {
        if (!this.mCloseChatList1Button_Internal && this.uiWidgetBase) {
            this.mCloseChatList1Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList1Canvas/ChatList1Canvas/mCloseChatList1Button");
        }
        return this.mCloseChatList1Button_Internal;
    }
    get mChatList2Canvas() {
        if (!this.mChatList2Canvas_Internal && this.uiWidgetBase) {
            this.mChatList2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList2Canvas");
        }
        return this.mChatList2Canvas_Internal;
    }
    get mChatListBg2Image() {
        if (!this.mChatListBg2Image_Internal && this.uiWidgetBase) {
            this.mChatListBg2Image_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList2Canvas/ChatList2Canvas/mChatListBg2Image");
        }
        return this.mChatListBg2Image_Internal;
    }
    get mChatList2ScrollBox() {
        if (!this.mChatList2ScrollBox_Internal && this.uiWidgetBase) {
            this.mChatList2ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList2Canvas/ChatList2Canvas/mChatList2ScrollBox");
        }
        return this.mChatList2ScrollBox_Internal;
    }
    get mChatList2ContentCanvas() {
        if (!this.mChatList2ContentCanvas_Internal && this.uiWidgetBase) {
            this.mChatList2ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList2Canvas/ChatList2Canvas/mChatList2ScrollBox/mChatList2ContentCanvas");
        }
        return this.mChatList2ContentCanvas_Internal;
    }
    get mCloseChatList2Button() {
        if (!this.mCloseChatList2Button_Internal && this.uiWidgetBase) {
            this.mCloseChatList2Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mChatList2Canvas/ChatList2Canvas/mCloseChatList2Button");
        }
        return this.mCloseChatList2Button_Internal;
    }
    get mExpressionListCanvas() {
        if (!this.mExpressionListCanvas_Internal && this.uiWidgetBase) {
            this.mExpressionListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mExpressionListCanvas");
        }
        return this.mExpressionListCanvas_Internal;
    }
    get mExpressionBgImage() {
        if (!this.mExpressionBgImage_Internal && this.uiWidgetBase) {
            this.mExpressionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mExpressionListCanvas/ExpressionListCanvas/mExpressionBgImage");
        }
        return this.mExpressionBgImage_Internal;
    }
    get mExpressionScrollBox() {
        if (!this.mExpressionScrollBox_Internal && this.uiWidgetBase) {
            this.mExpressionScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mExpressionListCanvas/ExpressionListCanvas/mExpressionScrollBox");
        }
        return this.mExpressionScrollBox_Internal;
    }
    get mExpressionListContentCanvas() {
        if (!this.mExpressionListContentCanvas_Internal && this.uiWidgetBase) {
            this.mExpressionListContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mExpressionListCanvas/ExpressionListCanvas/mExpressionScrollBox/mExpressionListContentCanvas");
        }
        return this.mExpressionListContentCanvas_Internal;
    }
    get mCloseExpressionListButton() {
        if (!this.mCloseExpressionListButton_Internal && this.uiWidgetBase) {
            this.mCloseExpressionListButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mExpressionListCanvas/ExpressionListCanvas/mCloseExpressionListButton");
        }
        return this.mCloseExpressionListButton_Internal;
    }
    get mActionListCanvas() {
        if (!this.mActionListCanvas_Internal && this.uiWidgetBase) {
            this.mActionListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas");
        }
        return this.mActionListCanvas_Internal;
    }
    get mActionBgImage() {
        if (!this.mActionBgImage_Internal && this.uiWidgetBase) {
            this.mActionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas/ActionListCanvas/mActionBgImage");
        }
        return this.mActionBgImage_Internal;
    }
    get mActionTabListCanvas() {
        if (!this.mActionTabListCanvas_Internal && this.uiWidgetBase) {
            this.mActionTabListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas/ActionListCanvas/mActionTabListCanvas");
        }
        return this.mActionTabListCanvas_Internal;
    }
    get mActionScrollBox() {
        if (!this.mActionScrollBox_Internal && this.uiWidgetBase) {
            this.mActionScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas/ActionListCanvas/mActionScrollBox");
        }
        return this.mActionScrollBox_Internal;
    }
    get mActionListContentCanvas() {
        if (!this.mActionListContentCanvas_Internal && this.uiWidgetBase) {
            this.mActionListContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas/ActionListCanvas/mActionScrollBox/mActionListContentCanvas");
        }
        return this.mActionListContentCanvas_Internal;
    }
    get mCloseActionListButton() {
        if (!this.mCloseActionListButton_Internal && this.uiWidgetBase) {
            this.mCloseActionListButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mActionListCanvas/ActionListCanvas/mCloseActionListButton");
        }
        return this.mCloseActionListButton_Internal;
    }
    get mBagCanvas() {
        if (!this.mBagCanvas_Internal && this.uiWidgetBase) {
            this.mBagCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas");
        }
        return this.mBagCanvas_Internal;
    }
    get mCloseBagButton() {
        if (!this.mCloseBagButton_Internal && this.uiWidgetBase) {
            this.mCloseBagButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas/mCloseBagButton");
        }
        return this.mCloseBagButton_Internal;
    }
    get mBagTabCanvas() {
        if (!this.mBagTabCanvas_Internal && this.uiWidgetBase) {
            this.mBagTabCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas/mBagTabCanvas");
        }
        return this.mBagTabCanvas_Internal;
    }
    get mBagScrollBox() {
        if (!this.mBagScrollBox_Internal && this.uiWidgetBase) {
            this.mBagScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas/mBagScrollBox");
        }
        return this.mBagScrollBox_Internal;
    }
    get mBagContentCanvas() {
        if (!this.mBagContentCanvas_Internal && this.uiWidgetBase) {
            this.mBagContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas/mBagScrollBox/mBagContentCanvas");
        }
        return this.mBagContentCanvas_Internal;
    }
    get mBackBagButton() {
        if (!this.mBackBagButton_Internal && this.uiWidgetBase) {
            this.mBackBagButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBagCanvas/mBackBagButton");
        }
        return this.mBackBagButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mOpenChatButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenChatButton");
        }));
        this.initLanguage(this.mOpenChatButton);
        this.mOpenChatButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenExpressionButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenExpressionButton");
        }));
        this.initLanguage(this.mOpenExpressionButton);
        this.mOpenExpressionButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenBagButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenBagButton");
        }));
        this.initLanguage(this.mOpenBagButton);
        this.mOpenBagButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mOpenActionButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenActionButton");
        }));
        this.initLanguage(this.mOpenActionButton);
        this.mOpenActionButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseBagButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseBagButton");
        }));
        this.initLanguage(this.mCloseBagButton);
        this.mCloseBagButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mBackBagButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mBackBagButton");
        }));
        this.initLanguage(this.mBackBagButton);
        this.mBackBagButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mUnloadButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mUnloadButton");
        }));
        this.mUnloadButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseChatList1Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseChatList1Button");
        }));
        this.mCloseChatList1Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseChatList2Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseChatList2Button");
        }));
        this.mCloseChatList2Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseExpressionListButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseExpressionListButton");
        }));
        this.mCloseExpressionListButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseActionListButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseActionListButton");
        }));
        this.mCloseActionListButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ChatPanel_Generate = __decorate([ UIBind("UI/module/DanMuModule/ChatPanel.ui") ], ChatPanel_Generate);

var ChatPanel_Generate$1 = ChatPanel_Generate;

var foreign159 = Object.freeze({
    __proto__: null,
    default: ChatPanel_Generate$1
});

let GuidePanel_Generate = class GuidePanel_Generate extends UIScript {
    get mMainBgImage_0() {
        if (!this.mMainBgImage_0_Internal && this.uiWidgetBase) {
            this.mMainBgImage_0_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0");
        }
        return this.mMainBgImage_0_Internal;
    }
    get mItemCanvas() {
        if (!this.mItemCanvas_Internal && this.uiWidgetBase) {
            this.mItemCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mItemCanvas");
        }
        return this.mItemCanvas_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mItemCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mTitleImage_0() {
        if (!this.mTitleImage_0_Internal && this.uiWidgetBase) {
            this.mTitleImage_0_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mTitleImage_0");
        }
        return this.mTitleImage_0_Internal;
    }
    get mTitleImage_1() {
        if (!this.mTitleImage_1_Internal && this.uiWidgetBase) {
            this.mTitleImage_1_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mTitleImage_1");
        }
        return this.mTitleImage_1_Internal;
    }
    get mClickNextStepButton() {
        if (!this.mClickNextStepButton_Internal && this.uiWidgetBase) {
            this.mClickNextStepButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mClickNextStepButton");
        }
        return this.mClickNextStepButton_Internal;
    }
    get mClickNextStepTextBlock() {
        if (!this.mClickNextStepTextBlock_Internal && this.uiWidgetBase) {
            this.mClickNextStepTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_0/mClickNextStepButton/mClickNextStepTextBlock");
        }
        return this.mClickNextStepTextBlock_Internal;
    }
    get mMainBgImage_1() {
        if (!this.mMainBgImage_1_Internal && this.uiWidgetBase) {
            this.mMainBgImage_1_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1");
        }
        return this.mMainBgImage_1_Internal;
    }
    get mTitleImage_2() {
        if (!this.mTitleImage_2_Internal && this.uiWidgetBase) {
            this.mTitleImage_2_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1/mTitleImage_2");
        }
        return this.mTitleImage_2_Internal;
    }
    get mTitleImage_3() {
        if (!this.mTitleImage_3_Internal && this.uiWidgetBase) {
            this.mTitleImage_3_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1/mTitleImage_3");
        }
        return this.mTitleImage_3_Internal;
    }
    get mContentTextBlock() {
        if (!this.mContentTextBlock_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1/mContentTextBlock");
        }
        return this.mContentTextBlock_Internal;
    }
    get mClickStartButton() {
        if (!this.mClickStartButton_Internal && this.uiWidgetBase) {
            this.mClickStartButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1/mClickStartButton");
        }
        return this.mClickStartButton_Internal;
    }
    get mClickStartTextBlock() {
        if (!this.mClickStartTextBlock_Internal && this.uiWidgetBase) {
            this.mClickStartTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainBgImage_1/mClickStartButton/mClickStartTextBlock");
        }
        return this.mClickStartTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickNextStepButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickNextStepButton");
        }));
        this.mClickNextStepButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mClickStartButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickStartButton");
        }));
        this.mClickStartButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mClickNextStepTextBlock);
        this.initLanguage(this.mContentTextBlock);
        this.initLanguage(this.mClickStartTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

GuidePanel_Generate = __decorate([ UIBind("UI/module/InteractionModule/GuidePanel.ui") ], GuidePanel_Generate);

var GuidePanel_Generate$1 = GuidePanel_Generate;

var foreign166 = Object.freeze({
    __proto__: null,
    default: GuidePanel_Generate$1
});

let OnClickPanel_Generate = class OnClickPanel_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mClickBtn() {
        if (!this.mClickBtn_Internal && this.uiWidgetBase) {
            this.mClickBtn_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickBtn");
        }
        return this.mClickBtn_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickBtn.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickBtn");
        }));
        this.mClickBtn.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

OnClickPanel_Generate = __decorate([ UIBind("UI/module/InteractionModule/OnClickPanel.ui") ], OnClickPanel_Generate);

var OnClickPanel_Generate$1 = OnClickPanel_Generate;

var foreign167 = Object.freeze({
    __proto__: null,
    default: OnClickPanel_Generate$1
});

class RoomData {
    constructor(userId, name, killCount, time, tryOn) {
        this.userId = "";
        this.playerName = "";
        this.score = 0;
        this.time = 0;
        this.tryOn = 0;
        this.userId = userId;
        this.playerName = name;
        this.score = killCount;
        this.time = time;
        this.tryOn = tryOn;
    }
    setData(userId, name, killCount, time, tryOn) {
        this.userId = userId;
        this.playerName = name;
        this.score = killCount;
        this.time = time;
        this.tryOn = tryOn;
    }
}

class WorldData {
    constructor(userId, name, time) {
        this.userId = "";
        this.playerName = "";
        this.time = 0;
        this.userId = userId;
        this.playerName = name;
        this.time = time;
    }
    setData(userId, name, time) {
        this.userId = userId;
        this.playerName = name;
        this.time = time;
    }
}

class RankData extends Subdata {
    constructor() {
        super(...arguments);
        this.time = 0;
    }
    setTime(addTime) {
        this.time += addTime;
        this.save(false);
    }
    get getTime() {
        return this.time;
    }
}

__decorate([ Decorator.persistence() ], RankData.prototype, "time", void 0);

var foreign123 = Object.freeze({
    __proto__: null,
    RankData: RankData,
    RoomData: RoomData,
    WorldData: WorldData
});

class RankModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.worldDatas = [];
        this.isInitWorldDatas = false;
        this.time = 60;
        this.timer = 0;
        this.syncPlayerMap = new Map;
        this.roomDataMap = new Map;
        this.roomUserIds = [];
        this.roomNames = [];
        this.roomScores = [];
        this.roomTimes = [];
        this.roomTryOn = [];
        this.worldUserIds = [];
        this.worldNames = [];
        this.worldTimes = [];
        this.redFirstModel = null;
        this.blueFirstModel = null;
    }
    onStart() {
        this.initData();
    }
    async initData() {
        this.worldDatas = await Utils.getCustomdata("WorldData");
        this.isInitWorldDatas = true;
    }
    onUpdate(dt) {
        this.timer += dt;
        if (this.timer >= this.time) {
            this.timer = 0;
            this.refreshTime();
        }
    }
    onPlayerLeft(player) {
        let userId = player.userId;
        if (this.roomDataMap.has(userId)) this.roomDataMap.delete(userId);
        if (this.syncPlayerMap.has(player)) this.syncPlayerMap.delete(player);
        this.synchrodata_Room();
    }
    net_updateSyncPlayer(isSync) {
        let player = this.currentPlayer;
        if (!this.syncPlayerMap.has(player)) return;
        this.syncPlayerMap.set(player, isSync);
        if (isSync) this.synchrodata_aRoomWorld(player);
    }
    net_onEnterScene(playerName, score, time, tryOn) {
        let player = this.currentPlayer;
        this.syncPlayerMap.set(player, false);
        player.character.displayName = playerName;
        this.onEnterScene(player.userId, playerName, score, time, tryOn);
    }
    onEnterScene(userId, playerName, score, time, tryOn) {
        let roomData = new RoomData(userId, playerName, score, time, tryOn);
        this.roomDataMap.set(userId, roomData);
        let worldData = new WorldData(userId, playerName, time);
        try {
            this.isRefreshWorldData([ worldData ]);
        } catch (error) {}
        this.synchrodata_onEnterScene(userId);
    }
    net_refreshScore(score) {
        this.refreshScore(this.currentPlayer.userId, score);
    }
    refreshScore(userId, score) {
        if (!this.roomDataMap.has(userId)) return;
        let roomData = this.roomDataMap.get(userId);
        roomData.score = score;
        this.synchrodata_Room();
    }
    async refreshTime() {
        if (!this.syncPlayerMap || this.syncPlayerMap?.size == 0) return;
        let tmpWorldDatas = [];
        this.syncPlayerMap?.forEach(((value, key) => {
            DataCenterS.getData(key, RankData)?.setTime(1);
            let userId = key.userId;
            if (!this.roomDataMap.has(userId)) return;
            let roomData = this.roomDataMap.get(userId);
            roomData.time += 1;
            let worldData = new WorldData(userId, roomData.playerName, roomData.time);
            tmpWorldDatas.push(worldData);
        }));
        try {
            this.worldDatas = await Utils.getCustomdata("WorldData");
            this.isRefreshWorldData(tmpWorldDatas);
        } catch (error) {}
        this.synchrodata_World();
    }
    net_refreshTryOn(tryOn) {
        this.refreshTryOn(this.currentPlayer.userId, tryOn);
    }
    refreshTryOn(userId, tryOn) {
        if (!this.roomDataMap.has(userId)) return;
        let roomData = this.roomDataMap.get(userId);
        roomData.tryOn = tryOn;
        this.synchrodata_Room_TryOn();
    }
    isRefreshWorldData(tmpWorldDatas) {
        if (!this.isInitWorldDatas) return false;
        if (!tmpWorldDatas || tmpWorldDatas?.length == 0) return false;
        if (!this.worldDatas || this.worldDatas?.length == 0) this.worldDatas = [];
        let isNeedSave = false;
        for (let k = 0; k < tmpWorldDatas.length; ++k) {
            let isPush = false;
            let ishasDelete = false;
            let ishasData = false;
            let worldData = tmpWorldDatas[k];
            if (this.worldDatas.length < GlobalData.worldCount) {
                if (this.worldDatas.length == 0) {
                    this.worldDatas.push(worldData);
                    isPush = true;
                    isNeedSave = true;
                } else {
                    for (let i = 0; i < this.worldDatas.length; ++i) {
                        if (this.worldDatas[i].userId != worldData.userId) continue;
                        if (worldData.time > this.worldDatas[i].time) {
                            this.worldDatas.splice(i, 1);
                            break;
                        } else {
                            ishasData = true;
                            break;
                        }
                    }
                    if (ishasData) continue;
                    for (let i = 0; i < this.worldDatas.length; i++) {
                        if (worldData.time > this.worldDatas[i].time) {
                            this.worldDatas.splice(i, 0, worldData);
                            isPush = true;
                            isNeedSave = true;
                            break;
                        }
                    }
                    if (!isPush) {
                        this.worldDatas.push(worldData);
                        isPush = true;
                        isNeedSave = true;
                    }
                }
            } else {
                for (let i = 0; i < this.worldDatas.length; ++i) {
                    if (this.worldDatas[i].userId != worldData.userId) continue;
                    if (worldData.time > this.worldDatas[i].time) {
                        this.worldDatas.splice(i, 1);
                        ishasDelete = true;
                        break;
                    } else {
                        ishasData = true;
                        break;
                    }
                }
                if (ishasData) continue;
                for (let i = 0; i < this.worldDatas.length; i++) {
                    if (worldData.time > this.worldDatas[i].time) {
                        this.worldDatas.splice(i, 0, worldData);
                        if (!ishasDelete) {
                            this.worldDatas.pop();
                        }
                        isPush = true;
                        isNeedSave = true;
                        break;
                    }
                }
            }
        }
        if (isNeedSave) {
            Utils.setCustomData("WorldData", this.worldDatas);
        }
        return isNeedSave;
    }
    updateRoomData() {
        if (!this.roomDataMap || this.roomDataMap?.size == 0) return;
        this.roomUserIds.length = 0;
        this.roomNames.length = 0;
        this.roomScores.length = 0;
        this.roomTimes.length = 0;
        this.roomTryOn.length = 0;
        this.roomDataMap?.forEach(((value, key) => {
            this.roomUserIds.push(value.userId);
            this.roomNames.push(value.playerName);
            this.roomScores.push(value.score);
            this.roomTimes.push(value.time);
            this.roomTryOn.push(value.tryOn);
        }));
    }
    updateWorldData() {
        if (!this.worldDatas || this.worldDatas?.length == 0) return;
        this.worldUserIds.length = 0;
        this.worldNames.length = 0;
        this.worldTimes.length = 0;
        for (let i = 0; i < this.worldDatas.length; i++) {
            this.worldUserIds.push(this.worldDatas[i].userId);
            this.worldNames.push(this.worldDatas[i].playerName);
            this.worldTimes.push(this.worldDatas[i].time);
        }
    }
    synchrodata_onEnterScene(sendUserId) {
        this.updateRoomData();
        this.updateWorldData();
        this.syncPlayerMap.forEach(((value, key) => {
            if (sendUserId == key.userId) {
                this.getClient(key).net_syncRoomWorldRankData(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn, this.worldUserIds, this.worldNames, this.worldTimes);
            } else {
                this.getClient(key).net_syncRoomRankData(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn);
            }
        }));
    }
    synchrodata_Room() {
        this.updateRoomData();
        this.syncPlayerMap.forEach(((value, key) => {
            this.getClient(key).net_syncRoomRankData(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn);
        }));
    }
    synchrodata_Room_TryOn() {
        this.updateRoomData();
        this.syncPlayerMap.forEach(((value, key) => {
            this.getClient(key).net_syncRoomRankData_TryOn(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn);
        }));
    }
    synchrodata_World() {
        this.updateWorldData();
        this.syncPlayerMap.forEach(((value, key) => {
            this.getClient(key).net_syncWorldRankData(this.worldUserIds, this.worldNames, this.worldTimes);
        }));
    }
    synchrodata_RoomWorld() {
        this.updateRoomData();
        this.updateWorldData();
        this.syncPlayerMap.forEach(((value, key) => {
            this.getClient(key).net_syncRoomWorldRankData(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn, this.worldUserIds, this.worldNames, this.worldTimes);
        }));
    }
    synchrodata_aRoomWorld(player) {
        this.getClient(player).net_syncRoomWorldRankData(this.roomUserIds, this.roomNames, this.roomScores, this.roomTimes, this.roomTryOn, this.worldUserIds, this.worldNames, this.worldTimes);
    }
    getNamesByUserId(userId1, userId2) {
        if (this.roomDataMap.has(userId1) && this.roomDataMap.has(userId2)) {
            return [ this.roomDataMap.get(userId1).playerName, this.roomDataMap.get(userId2).playerName ];
        }
        return null;
    }
    getNameByUserId(userId) {
        if (this.roomDataMap.has(userId)) {
            return this.roomDataMap.get(userId).playerName;
        }
        return null;
    }
    net_setFirstModel(isRed) {
        let character = this.currentPlayer.character;
        this.setFirstModel(character, isRed);
    }
    async setFirstModel(character, isRed) {
        if (isRed) {
            if (!this.redFirstModel) this.redFirstModel = await GameObjPool.asyncSpawn("C825D655443D938EB73591BEEB5CCC81", mwext.GameObjPoolSourceType.Prefab);
            character.attachToSlot(this.redFirstModel, mw.HumanoidSlotType.BackOrnamental);
            this.redFirstModel.localTransform.position = new mw.Vector(15, 0, 0);
            this.redFirstModel.localTransform.rotation = new mw.Rotation(0, 0, -90);
        } else {
            if (!this.blueFirstModel) this.blueFirstModel = await GameObjPool.asyncSpawn("0B59ECA6477D8CA6237016BF613FB019", mwext.GameObjPoolSourceType.Prefab);
            character.attachToSlot(this.blueFirstModel, mw.HumanoidSlotType.BackOrnamental);
            this.blueFirstModel.localTransform.position = new mw.Vector(15, 0, 0);
            this.blueFirstModel.localTransform.rotation = new mw.Rotation(0, 0, -90);
        }
    }
}

__decorate([ Decorator.noReply() ], RankModuleS.prototype, "net_updateSyncPlayer", null);

__decorate([ Decorator.noReply() ], RankModuleS.prototype, "net_onEnterScene", null);

__decorate([ Decorator.noReply() ], RankModuleS.prototype, "net_setFirstModel", null);

var foreign125 = Object.freeze({
    __proto__: null,
    default: RankModuleS
});

class GuidePanel extends GuidePanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.clickNextStepCallBack = null;
        this.clickStartCallBack = null;
    }
    onStart() {
        this.initUI();
        this.binButtons();
    }
    initUI() {
        if (GlobalData.languageId == 0) {
            Utils.setWidgetVisibility(this.mTitleImage_0, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mTitleImage_1, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mTitleImage_2, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mTitleImage_3, mw.SlateVisibility.Collapsed);
        } else {
            Utils.setWidgetVisibility(this.mTitleImage_0, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mTitleImage_1, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mTitleImage_2, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mTitleImage_3, mw.SlateVisibility.SelfHitTestInvisible);
        }
    }
    binButtons() {
        this.mClickNextStepButton.onClicked.add(this.onClickNextStepButton.bind(this));
        this.mClickStartButton.onClicked.add(this.onClickStartButton.bind(this));
    }
    onClickNextStepButton() {
        if (this.clickNextStepCallBack) this.clickNextStepCallBack();
        this.hide();
    }
    onClickStartButton() {
        if (this.clickStartCallBack) this.clickStartCallBack();
        this.hide();
    }
    showStepTips(bagId, clickCallBack, clickTextBlock) {
        if (GameConfig.ActionProp.getElement(bagId).NextId == bagId) bagId -= 1;
        let actionPropElement = GameConfig.ActionProp.getElement(bagId);
        if (!actionPropElement.AssetId) {
            bagId = actionPropElement.NextId;
        }
        this.setIcon(bagId);
        this.clickNextStepCallBack = clickCallBack;
        this.mClickNextStepTextBlock.text = clickTextBlock;
        Utils.setWidgetVisibility(this.mMainBgImage_0, mw.SlateVisibility.SelfHitTestInvisible);
        Utils.setWidgetVisibility(this.mMainBgImage_1, mw.SlateVisibility.Collapsed);
        this.show();
    }
    setIcon(bagId) {
        let actionPropElement = GameConfig.ActionProp.getElement(bagId);
        if (actionPropElement.Tab == 2 || actionPropElement.Tab == 6) {
            if (!actionPropElement.AssetId || actionPropElement.AssetId == "") {
                actionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId);
            }
        } else {
            if (!actionPropElement.AssetId || actionPropElement.AssetId == "") {
                actionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId);
            }
        }
        if (actionPropElement.VehiclesIcon) {
            this.mIconImage.imageGuid = actionPropElement.VehiclesIcon;
        } else if (actionPropElement.Icon) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.Icon);
        } else if (actionPropElement.AssetId) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.AssetId);
        } else if (bagId == actionPropElement.NextId) {
            let nextActionPropElement = GameConfig.ActionProp.getElement(actionPropElement.NextId - 1);
            if (nextActionPropElement.VehiclesIcon) {
                this.mIconImage.imageGuid = nextActionPropElement.VehiclesIcon;
            } else if (nextActionPropElement.Icon) {
                Utils.setImageByAssetIconData(this.mIconImage, nextActionPropElement.Icon);
            } else if (nextActionPropElement.AssetId) {
                Utils.setImageByAssetIconData(this.mIconImage, nextActionPropElement.AssetId);
            }
        }
    }
    showStartTips(clickStartCallBack, clickStartTextBlock, contentTextBlock) {
        this.clickStartCallBack = clickStartCallBack;
        this.mClickStartTextBlock.text = clickStartTextBlock;
        this.mContentTextBlock.text = contentTextBlock;
        Utils.setWidgetVisibility(this.mMainBgImage_1, mw.SlateVisibility.SelfHitTestInvisible);
        Utils.setWidgetVisibility(this.mMainBgImage_0, mw.SlateVisibility.Collapsed);
        this.show();
    }
}

class OnClickPanel extends OnClickPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.interactionModuleC = null;
        this.id = -1;
        this.offset = new mw.Vector(0, 0, 0);
        this.obj = null;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getInteractionModuleC() {
        if (this.interactionModuleC == null) {
            this.interactionModuleC = ModuleService.getModule(InteractionModuleC);
        }
        return this.interactionModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerMiddle;
        this.initUI();
        this.bindButtons();
        this.registerActions();
    }
    initUI() {}
    bindButtons() {
        this.mClickBtn.onClicked.add(this.onClickButtons.bind(this));
    }
    registerActions() {
        this.getHUDModuleC.onExitAction.add(this.onExitHandler.bind(this));
    }
    onExitHandler() {}
    onClickButtons() {
        if (!this.id) return;
        console.warn("OnClickPanel-this.id = " + this.id);
        this.canUpdate = false;
        this.hide();
        if (this.id <= 0) return;
        this.getInteractionModuleC.interact(true, this.id);
    }
    showBtn(id, obj) {
        this.id = id;
        this.canUpdate = true;
        this.obj = obj;
        let pos = InputUtil.projectWorldPositionToWidgetPosition(this.obj.worldTransform.position.add(this.offset), false).screenPosition;
        this.rootCanvas.position = pos.subtract(this.rootCanvas.size.multiply(.5));
        this.rootCanvas.visibility = mw.SlateVisibility.SelfHitTestInvisible;
        this.show();
    }
    hideBtn() {
        this.canUpdate = false;
        this.hide();
    }
    onShow(...params) {
        console.error("[OnClickPanel-onShow]");
    }
    onUpdate(dt) {
        if (!this.obj) return;
        let pos = mw.InputUtil.projectWorldPositionToWidgetPosition(this.obj.worldTransform.position.add(this.offset), false).screenPosition;
        this.rootCanvas.position = pos.subtract(this.rootCanvas.size.multiply(.5));
    }
}

class InteractionModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.onClickPanel = null;
        this.hudModuleC = null;
        this.adPanel = null;
        this.tipsPanel = null;
        this.onClickBagItemAction = new Action1;
        this.currentDescription = null;
        this.triggerLocMap = new Map;
        this.bagIds = [];
        this.guidePanel = null;
        this.guideStep = 0;
        this.guideBagIds = [ 60004, 20002, 10106, 30002 ];
    }
    get getOnClickPanel() {
        if (this.onClickPanel == null) {
            this.onClickPanel = mw.UIService.getUI(OnClickPanel);
        }
        return this.onClickPanel;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getAdPanel() {
        if (this.adPanel == null) {
            this.adPanel = mw.UIService.getUI(AdPanel);
        }
        return this.adPanel;
    }
    get getTipsPanel() {
        if (this.tipsPanel == null) {
            this.tipsPanel = mw.UIService.getUI(TipsPanel);
        }
        return this.tipsPanel;
    }
    onStart() {
        this.bindEvent();
    }
    onEnterScene(sceneType) {
        this.initBagIds();
        this.initGuide();
        this.findTriggers();
    }
    bindEvent() {
        this.onClickBagItemAction.add(this.addClickBagItemAction.bind(this));
    }
    findTriggers() {
        GameConfig.Interact.getAllElement().forEach((async value => {
            let triggerGuid = value.TriggerGuid;
            if (triggerGuid && triggerGuid.length > 0) {
                let trigger = await GameObject.asyncFindGameObjectById(triggerGuid);
                await trigger.asyncReady();
                trigger.onEnter.add((char => {
                    this.onEnterTrigger(char, value.ID, trigger);
                }));
                trigger.onLeave.add((char => {
                    this.onLeaveTrigger(char);
                }));
                let bagId = value.BagId;
                this.triggerLocMap.set(bagId, trigger.worldTransform.position);
                if (value.ModelGuid_C && value.ModelGuid_C.length > 0) {
                    GameObject.asyncSpawn(value.ModelGuid_C).then((model => {
                        model.worldTransform.position = trigger.worldTransform.position;
                    }));
                }
            }
            let npcId = value.NpcId;
            if (npcId && npcId.length > 0) {
                let npc = await GameObject.asyncFindGameObjectById(npcId);
                await npc.asyncReady();
                npc.complexMovementEnabled = false;
                npc.collisionWithOtherCharacterEnabled = false;
                let shareId = value.ShareId;
                if (shareId > 0) {
                    let shareIdStr = GameConfig.ShareId.getElement(shareId).ShareId;
                    if (shareIdStr && shareIdStr.length > 0) {
                        Utils.applySharedId(npc, shareIdStr);
                    }
                } else {
                    this.currentDescription = this.localPlayer.character.getDescription();
                    npc.setDescription(this.currentDescription);
                }
                let npcAnimationId = value.NpcAnimationId;
                if (npcAnimationId && npcAnimationId.length > 0) {
                    await Utils.asyncDownloadAsset(npcAnimationId);
                    npc.loadSubStance(npcAnimationId).play();
                    setTimeout((() => {
                        npc.localTransform.position = new mw.Vector(0, 0, npc.localTransform.position.z);
                    }), 1e3);
                }
            }
            console.error(this.triggerLocMap.size);
        }));
    }
    onEnterTrigger(char, id, go) {
        if (char != Player.localPlayer.character) return;
        this.getOnClickPanel.showBtn(id, go);
    }
    onLeaveTrigger(char) {
        if (char != Player.localPlayer.character) return;
        this.getOnClickPanel.hideBtn();
    }
    interact(isInteract, id) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let interact = GameConfig.Interact.getElement(id);
            let bagId = interact.BagId;
            if (bagId && bagId > 0) {
                let modelGuid = interact.ModelGuid;
                if (modelGuid && modelGuid.length > 0) {
                    this.server.net_playInteract(bagId, modelGuid).then((interactCode => {
                        if (interactCode == 0) {
                            Notice.showDownNotice(GameConfig.Language.Text_ThisItemIsInUse.Value);
                        }
                    }));
                }
                if (GameConfig.ActionProp.getElement(bagId).NextId == bagId) bagId -= 1;
                this.getHUDModuleC.action(bagId);
                let actionPropElement = GameConfig.ActionProp.getElement(bagId);
                if (!actionPropElement.AssetId) {
                    bagId = actionPropElement.NextId;
                }
                this.setBagId(bagId);
            }
            let npcId = interact.NpcId;
            if (npcId && npcId.length > 0) {
                let shareId = interact.ShareId;
                if (shareId > 0) {
                    let shareIdStr = GameConfig.ShareId.getElement(shareId).ShareId;
                    if (shareIdStr && shareIdStr.length > 0) {
                        await Utils.applySharedId(this.localPlayer.character, shareIdStr);
                    }
                } else {
                    this.localPlayer.character.setDescription(this.currentDescription);
                    await this.localPlayer.character.asyncReady();
                    this.localPlayer.character.syncDescription();
                }
            }
        }));
    }
    addClickBagItemAction(bagId) {
        if (this.bagIds.includes(bagId)) return;
        let nextId = GameConfig.ActionProp.getElement(bagId).NextId;
        if (nextId && nextId > 0) bagId = nextId;
        if (GlobalData.isOpenIAA) {
            this.getAdPanel.showRewardAd((() => {
                if (this.triggerLocMap.has(bagId)) {
                    let targetLoc = this.triggerLocMap.get(bagId);
                    Utils.startGuide(targetLoc, (() => {}));
                }
            }), GameConfig.Language.Text_ADGetTips.Value, GameConfig.Language.Text_Dont.Value, GameConfig.Language.Text_Free.Value);
        } else {
            this.getTipsPanel.showTips((() => {
                if (this.triggerLocMap.has(bagId)) {
                    let targetLoc = this.triggerLocMap.get(bagId);
                    Utils.startGuide(targetLoc, (() => {}));
                }
            }), GameConfig.Language.Text_BootPrompt.Value, GameConfig.Language.Text_FreeGuideYouGet.Value, GameConfig.Language.Text_Dont.Value, GameConfig.Language.Text_Free.Value);
        }
    }
    initBagIds() {
        this.bagIds = this.data.bagIds;
    }
    setBagId(bagId) {
        if (this.bagIds.includes(bagId)) return;
        Notice.showDownNotice(GameConfig.Language.Text_ObtainedTips.Value);
        this.bagIds.push(bagId);
        this.server.net_setBagId(bagId);
    }
    get getBagIds() {
        return this.bagIds;
    }
    get getGuidePanel() {
        if (this.guidePanel == null) {
            this.guidePanel = mw.UIService.getUI(GuidePanel);
        }
        return this.guidePanel;
    }
    initGuide() {
        this.guideStep = this.data.guideStep;
        this.startGuide();
    }
    setGuideStep(addStep) {
        this.guideStep += addStep;
        this.server.net_setGuideStep(addStep);
    }
    startGuide() {
        if (!this.guideBagIds || this.guideBagIds.length == 0) return;
        if (this.guideStep >= this.guideBagIds.length - 1) {
            this.localPlayer.character.asyncReady().then((() => {
                TimeUtil.delaySecond(1).then((() => {
                    this.getHUDModuleC.onOpenMallAction.call();
                }));
            }));
            return;
        }
        this.getGuidePanel.showStartTips((() => {
            this.getHUDModuleC.onOpenMallAction.call();
            let bagId = this.guideBagIds[0];
            console.error(`bagId1:${bagId}`);
            if (!this.triggerLocMap.has(bagId)) {
                console.error(`bagId2:${bagId}`);
                return;
            }
            let targetLoc = this.triggerLocMap.get(bagId);
            console.error(`targetLoc:${targetLoc}`);
            Utils.startGuide(targetLoc, (() => {
                this.setGuideStep(1);
                this.getGuidePanel.showStepTips(bagId, (() => {
                    this.interact(true, GameConfig.Interact.findElement(`BagId`, bagId).ID);
                    if (this.guideStep >= this.guideBagIds.length) return;
                    bagId = this.guideBagIds[1];
                    if (!this.triggerLocMap.has(bagId)) return;
                    targetLoc = this.triggerLocMap.get(bagId);
                    Utils.startGuide(targetLoc, (() => {
                        this.setGuideStep(1);
                        this.getGuidePanel.showStepTips(bagId, (() => {
                            this.interact(true, GameConfig.Interact.findElement(`BagId`, bagId).ID);
                            if (this.guideStep >= this.guideBagIds.length) return;
                            bagId = this.guideBagIds[2];
                            if (!this.triggerLocMap.has(bagId)) return;
                            targetLoc = this.triggerLocMap.get(bagId);
                            Utils.startGuide(targetLoc, (() => {
                                this.setGuideStep(1);
                                this.getGuidePanel.showStepTips(bagId, (() => {
                                    this.interact(true, GameConfig.Interact.findElement(`BagId`, bagId).ID);
                                    if (this.guideStep >= this.guideBagIds.length) return;
                                    bagId = this.guideBagIds[3];
                                    if (!this.triggerLocMap.has(bagId)) return;
                                    targetLoc = this.triggerLocMap.get(bagId);
                                    Utils.startGuide(targetLoc, (() => {
                                        this.setGuideStep(1);
                                        this.getGuidePanel.showStepTips(bagId, (() => {
                                            this.interact(true, GameConfig.Interact.findElement(`BagId`, bagId).ID);
                                            this.getGuidePanel.showStepTips(bagId, (() => {
                                                this.getGuidePanel.showStartTips((() => {}), GameConfig.Language.Text_Close.Value, GameConfig.Language.Text_GuideEnd.Value);
                                            }), GameConfig.Language.Text_UpNext.Value);
                                        }), GameConfig.Language.Text_UpNext.Value);
                                    }));
                                }), GameConfig.Language.Text_UpNext.Value);
                            }));
                        }), GameConfig.Language.Text_UpNext.Value);
                    }));
                }), GameConfig.Language.Text_UpNext.Value);
            }));
        }), GameConfig.Language.Text_StartGame.Value, GameConfig.Language.Text_WelcomeTo.Value);
    }
}

class InteractionModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.rankModuleS = null;
        this.modelGuidMap = new Map;
        this.usingBagIdMap = new Map;
    }
    get getRankModuleS() {
        if (this.rankModuleS == null) {
            this.rankModuleS = ModuleService.getModule(RankModuleS);
        }
        return this.rankModuleS;
    }
    onStart() {}
    onPlayerLeft(player) {}
    async net_playInteract(bagId, modelGuid) {
        let player = this.currentPlayer;
        let playerId = player.playerId;
        let usingBagIds = [];
        if (this.usingBagIdMap.has(playerId)) {
            usingBagIds = this.usingBagIdMap.get(playerId);
            if (usingBagIds.includes(bagId)) return 0;
            usingBagIds.push(bagId);
        } else {
            usingBagIds.push(bagId);
            this.usingBagIdMap.set(playerId, usingBagIds);
        }
        console.error(`usingBagIds = ${usingBagIds}`);
        let model = null;
        if (this.modelGuidMap.has(modelGuid)) {
            model = this.modelGuidMap.get(modelGuid);
        } else {
            model = await mw.GameObject.asyncFindGameObjectById(modelGuid);
            this.modelGuidMap.set(modelGuid, model);
        }
        await model.asyncReady();
        this.placingItems(player, bagId, model).then((() => {
            usingBagIds.splice(usingBagIds.indexOf(bagId), 1);
            console.error(`usingBagIds = ${usingBagIds}`);
        }));
        return 1;
    }
    async placingItems(player, bagId, itemMode) {
        if (!player) return;
        let actionPropElement = GameConfig.ActionProp.getElement(bagId);
        let animationId = actionPropElement.AnimationId;
        if (animationId && animationId.length > 0) {
            await Utils.asyncDownloadAsset(animationId);
            let animation = player.character.loadAnimation(animationId);
            if (actionPropElement.AnimationSlot) animation.slot = actionPropElement.AnimationSlot;
            let parameter = actionPropElement.AnimationParameter;
            if (parameter && parameter.length > 0) {
                animation.speed = parameter[0];
                animation.loop = parameter[1];
            }
            animation.play();
        }
        let playAnimationTime = 1;
        if (actionPropElement.AnimationParameter && actionPropElement.AnimationParameter.length > 0) {
            playAnimationTime = actionPropElement.AnimationParameter[0];
        }
        await TimeUtil.delaySecond(playAnimationTime);
        let delayModeEffectId = null;
        let delayModeEffectAssetId = actionPropElement.DelayModeEffectId;
        if (delayModeEffectAssetId && delayModeEffectAssetId.length > 0) {
            await Utils.asyncDownloadAsset(delayModeEffectAssetId);
            let delayModeEffectOffsetParameter = actionPropElement.DelayModeEffectOffsetParameter;
            delayModeEffectId = EffectService.playOnGameObject(delayModeEffectAssetId, itemMode, {
                loopCount: 0,
                position: new mw.Vector(delayModeEffectOffsetParameter[0], delayModeEffectOffsetParameter[1], delayModeEffectOffsetParameter[2]),
                rotation: new mw.Rotation(delayModeEffectOffsetParameter[3], delayModeEffectOffsetParameter[4], delayModeEffectOffsetParameter[5]),
                scale: new mw.Vector(delayModeEffectOffsetParameter[6], delayModeEffectOffsetParameter[7], delayModeEffectOffsetParameter[8])
            });
        }
        let delayParameter = actionPropElement.DelayParameter;
        let delayTime = delayParameter[0];
        let delayCount = delayParameter[1];
        let delayInterval = delayParameter[2];
        await TimeUtil.delaySecond(delayTime - playAnimationTime);
        for (let i = 0; i < delayCount; ++i) {
            await new Promise((resolve => {
                setTimeout((async () => {
                    let DelayEffectAssetId = actionPropElement.DelayEffectId;
                    if (DelayEffectAssetId && DelayEffectAssetId.length > 0) {
                        await Utils.asyncDownloadAsset(DelayEffectAssetId);
                        let delayEffectOffsetParameter = actionPropElement.DelayEffectOffsetParameter;
                        EffectService.playAtPosition(DelayEffectAssetId, itemMode.worldTransform.position, {
                            loopCount: 1,
                            rotation: itemMode.worldTransform.rotation,
                            scale: new mw.Vector(delayEffectOffsetParameter[6], delayEffectOffsetParameter[7], delayEffectOffsetParameter[8])
                        });
                        let delayModeSoundId = actionPropElement.DelayModeSoundId;
                        if (delayModeSoundId && delayModeSoundId.length > 0) {
                            await Utils.asyncDownloadAsset(delayModeSoundId);
                            let delayModeSoundParameter = actionPropElement.DelayModeSoundParameter;
                            SoundService.play3DSound(delayModeSoundId, itemMode.worldTransform.position, 1, delayModeSoundParameter[0], {
                                radius: delayModeSoundParameter[1],
                                falloffDistance: delayModeSoundParameter[1] * 1.2
                            });
                        }
                    }
                    return resolve();
                }), delayInterval * 1e3);
            }));
        }
        if (actionPropElement.ID != 30004) await TimeUtil.delaySecond(delayInterval);
        if (delayModeEffectId) EffectService.stop(delayModeEffectId);
    }
    net_setBagId(bagId) {
        this.currentData.setBagId(bagId);
        let score = this.currentData.bagIds.length;
        this.getRankModuleS.refreshScore(this.currentPlayer.userId, score);
    }
    net_setGuideStep(addStep) {
        this.currentData.setGuideStep(addStep);
    }
}

__decorate([ Decorator.noReply() ], InteractionModuleS.prototype, "net_setBagId", null);

__decorate([ Decorator.noReply() ], InteractionModuleS.prototype, "net_setGuideStep", null);

class PlayerInteractor {
    constructor() {
        this.isCanSit = true;
        this.interactor = null;
    }
}

var OnClickType;

(function(OnClickType) {
    OnClickType[OnClickType["Sit"] = 1] = "Sit";
    OnClickType[OnClickType["Shake"] = 2] = "Shake";
    OnClickType[OnClickType["Dance"] = 3] = "Dance";
})(OnClickType || (OnClickType = {}));

class InteractionData extends Subdata {
    constructor() {
        super(...arguments);
        this.bagIds = [];
        this.guideStep = 0;
    }
    setBagId(bagId) {
        if (this.bagIds.includes(bagId)) return;
        this.bagIds.push(bagId);
        this.save(false);
    }
    setGuideStep(addStep) {
        this.guideStep += addStep;
        this.save(false);
    }
}

__decorate([ Decorator.persistence() ], InteractionData.prototype, "bagIds", void 0);

__decorate([ Decorator.persistence() ], InteractionData.prototype, "guideStep", void 0);

var foreign103 = Object.freeze({
    __proto__: null,
    GuidePanel: GuidePanel,
    InteractionData: InteractionData,
    InteractionModuleC: InteractionModuleC,
    InteractionModuleS: InteractionModuleS,
    OnClickPanel: OnClickPanel,
    get OnClickType() {
        return OnClickType;
    },
    PlayerInteractor: PlayerInteractor
});

let ActionItem_Generate = class ActionItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get nNameTextBlock() {
        if (!this.nNameTextBlock_Internal && this.uiWidgetBase) {
            this.nNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/nNameTextBlock");
        }
        return this.nNameTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.nNameTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ActionItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/ActionItem.ui") ], ActionItem_Generate);

var ActionItem_Generate$1 = ActionItem_Generate;

var foreign152 = Object.freeze({
    __proto__: null,
    default: ActionItem_Generate$1
});

class ActionItem extends ActionItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.isCanClick = true;
        this.index = 0;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (!this.isCanClick) return;
        this.isCanClick = false;
        TimeUtil.delaySecond(1).then((() => {
            this.isCanClick = true;
        }));
        this.getDanMuModuleC.onClickActionItemAction.call(this.index);
    }
    setDatas(tabIndex, index, actionData) {
        this.index = index;
        this.mIconImage.imageGuid = tabIndex != 1 ? actionData.icon : actionData.icon.split("-")[1];
        this.nNameTextBlock.text = actionData.names[GlobalData.languageId];
    }
}

var foreign92 = Object.freeze({
    __proto__: null,
    default: ActionItem
});

let ActionTabItem_Generate = class ActionTabItem_Generate extends UIScript {
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mTabNameTextBlock() {
        if (!this.mTabNameTextBlock_Internal && this.uiWidgetBase) {
            this.mTabNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton/mTabNameTextBlock");
        }
        return this.mTabNameTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTabNameTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ActionTabItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/ActionTabItem.ui") ], ActionTabItem_Generate);

var ActionTabItem_Generate$1 = ActionTabItem_Generate;

var foreign153 = Object.freeze({
    __proto__: null,
    default: ActionTabItem_Generate$1
});

class ActionTabItem extends ActionTabItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.index = 0;
        this.isSelect = false;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mClickButton.normalImageGuid = `221282`;
        this.mClickButton.pressedImageGuid = `221283`;
        this.mClickButton.disableImageGuid = `221283`;
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
        this.getDanMuModuleC.onClickActionTabAction.add(this.addClickActionTabAction.bind(this));
    }
    addClickButton() {
        this.getDanMuModuleC.onClickActionTabAction.call(this.index);
    }
    addClickActionTabAction(index) {
        if (index == this.index) {
            this.select(true);
        } else {
            this.select(false);
        }
    }
    setDatas(index, name) {
        this.index = index;
        let nameStr = name.split(`-`);
        this.mTabNameTextBlock.text = nameStr[GlobalData.languageId];
    }
    select(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        let icon = isSelect ? `221283` : `221282`;
        this.mClickButton.normalImageGuid = icon;
    }
}

var foreign93 = Object.freeze({
    __proto__: null,
    default: ActionTabItem
});

let BagItem_Generate = class BagItem_Generate extends UIScript {
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mLockCanvas() {
        if (!this.mLockCanvas_Internal && this.uiWidgetBase) {
            this.mLockCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLockCanvas");
        }
        return this.mLockCanvas_Internal;
    }
    get mLockImage() {
        if (!this.mLockImage_Internal && this.uiWidgetBase) {
            this.mLockImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLockCanvas/mLockImage");
        }
        return this.mLockImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

BagItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/BagItem.ui") ], BagItem_Generate);

var BagItem_Generate$1 = BagItem_Generate;

var foreign154 = Object.freeze({
    __proto__: null,
    default: BagItem_Generate$1
});

class BagItem extends BagItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.interactionModuleC = null;
        this.bagId = 0;
        this.isHas = false;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    get getInteractionModuleC() {
        if (!this.interactionModuleC) {
            this.interactionModuleC = ModuleService.getModule(InteractionModuleC);
        }
        return this.interactionModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (this.isHas) {
            this.getDanMuModuleC.onClickBagItemAction.call(this.bagId);
        } else {
            this.getInteractionModuleC.onClickBagItemAction.call(this.bagId);
        }
    }
    setDatas(bagId, isHas) {
        this.bagId = bagId;
        let actionPropElement = GameConfig.ActionProp.getElement(this.bagId);
        if (actionPropElement.VehiclesIcon) {
            this.mIconImage.imageGuid = actionPropElement.VehiclesIcon;
        } else if (actionPropElement.Icon) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.Icon);
        } else if (actionPropElement.AssetId) {
            Utils.setImageByAssetIconData(this.mIconImage, actionPropElement.AssetId);
        }
        this.isHas = isHas;
        this.updateState();
    }
    updateState() {
        if (this.isHas) {
            Utils.setWidgetVisibility(this.mLockCanvas, mw.SlateVisibility.Collapsed);
        } else {
            Utils.setWidgetVisibility(this.mLockCanvas, mw.SlateVisibility.SelfHitTestInvisible);
        }
    }
}

var foreign94 = Object.freeze({
    __proto__: null,
    default: BagItem
});

let BagTabItem_Generate = class BagTabItem_Generate extends UIScript {
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mTabNameTextBlock() {
        if (!this.mTabNameTextBlock_Internal && this.uiWidgetBase) {
            this.mTabNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton/mTabNameTextBlock");
        }
        return this.mTabNameTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTabNameTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

BagTabItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/BagTabItem.ui") ], BagTabItem_Generate);

var BagTabItem_Generate$1 = BagTabItem_Generate;

var foreign155 = Object.freeze({
    __proto__: null,
    default: BagTabItem_Generate$1
});

class BagTabItem extends BagTabItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.index = 0;
        this.isSelect = false;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mClickButton.normalImageGuid = `221282`;
        this.mClickButton.pressedImageGuid = `221283`;
        this.mClickButton.disableImageGuid = `221283`;
        if (GlobalData.languageId == 0) {
            this.mTabNameTextBlock.fontSize = 15;
        }
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
        this.getDanMuModuleC.onClickBagTabAction.add(this.addClickActionTabAction.bind(this));
    }
    addClickButton() {
        this.getDanMuModuleC.onClickBagTabAction.call(this.index);
    }
    addClickActionTabAction(index) {
        if (index == this.index) {
            this.select(true);
        } else {
            this.select(false);
        }
    }
    setDatas(index, name) {
        this.index = index;
        let nameStr = name.split(`-`);
        this.mTabNameTextBlock.text = nameStr[GlobalData.languageId];
    }
    select(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        let icon = isSelect ? `221283` : `221282`;
        this.mClickButton.normalImageGuid = icon;
    }
}

var foreign95 = Object.freeze({
    __proto__: null,
    default: BagTabItem
});

let ChatItem1_Generate = class ChatItem1_Generate extends UIScript {
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.initLanguage(this.mClickButton);
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ChatItem1_Generate = __decorate([ UIBind("UI/module/DanMuModule/ChatItem1.ui") ], ChatItem1_Generate);

var ChatItem1_Generate$1 = ChatItem1_Generate;

var foreign157 = Object.freeze({
    __proto__: null,
    default: ChatItem1_Generate$1
});

class ChatItem1 extends ChatItem1_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.isCanClick = true;
        this.index = 0;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (!this.isCanClick) return;
        this.isCanClick = false;
        TimeUtil.delaySecond(1).then((() => {
            this.isCanClick = true;
        }));
        this.getDanMuModuleC.onClickChatItem1Action.call(this.index);
    }
    setData(index, text) {
        this.index = index;
        this.mClickButton.text = text;
    }
}

var foreign96 = Object.freeze({
    __proto__: null,
    default: ChatItem1
});

let ChatItem2_Generate = class ChatItem2_Generate extends UIScript {
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.initLanguage(this.mClickButton);
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ChatItem2_Generate = __decorate([ UIBind("UI/module/DanMuModule/ChatItem2.ui") ], ChatItem2_Generate);

var ChatItem2_Generate$1 = ChatItem2_Generate;

var foreign158 = Object.freeze({
    __proto__: null,
    default: ChatItem2_Generate$1
});

class ChatItem2 extends ChatItem2_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.isCanClick = true;
        this.index = 0;
        this.childIndex = 0;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (!this.isCanClick) return;
        this.isCanClick = false;
        TimeUtil.delaySecond(1).then((() => {
            this.isCanClick = true;
        }));
        this.getDanMuModuleC.onClickChatItem2Action.call(this.index, this.childIndex);
    }
    setData(index, childIndex, text) {
        this.index = index;
        this.childIndex = childIndex;
        this.mClickButton.text = text;
    }
}

var foreign97 = Object.freeze({
    __proto__: null,
    default: ChatItem2
});

let ExpressionItem_Generate = class ExpressionItem_Generate extends UIScript {
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ExpressionItem_Generate = __decorate([ UIBind("UI/module/DanMuModule/ExpressionItem.ui") ], ExpressionItem_Generate);

var ExpressionItem_Generate$1 = ExpressionItem_Generate;

var foreign161 = Object.freeze({
    __proto__: null,
    default: ExpressionItem_Generate$1
});

class ExpressionItem extends ExpressionItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.isCanClick = true;
        this.index = 0;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButton();
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        if (!this.isCanClick) return;
        this.isCanClick = false;
        TimeUtil.delaySecond(5).then((() => {
            this.isCanClick = true;
        }));
        this.getDanMuModuleC.onClickExpressionItemAction.call(this.index);
    }
    setDatas(index, assetId) {
        this.index = index;
        Utils.setImageByAssetIconData(this.mIconImage, assetId);
    }
}

var foreign100 = Object.freeze({
    __proto__: null,
    default: ExpressionItem
});

class ChatPanel extends ChatPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuModuleC = null;
        this.interactionModuleC = null;
        this.chatDatas = [];
        this.chatItems2 = [];
        this.expressionAssets = [];
        this.actionDataMap = new Map;
        this.actionItems = [];
        this.bagTabTexts = [ `Hot-热门`, `Wing-翅膀`, `Prop-道具`, `Food-食品`, `Firework-烟花`, `Vehicles-载具` ];
        this.bagTabItems = [];
        this.isInitBagUI = false;
        this.bagItems = [];
        this.bagTabIndex = 1;
    }
    get getDanMuModuleC() {
        if (!this.danMuModuleC) {
            this.danMuModuleC = ModuleService.getModule(DanMuModuleC);
        }
        return this.danMuModuleC;
    }
    get getInteractionModuleC() {
        if (!this.interactionModuleC) {
            this.interactionModuleC = ModuleService.getModule(InteractionModuleC);
        }
        return this.interactionModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    onShow(...params) {}
    onHide() {
        this.initUI();
    }
    initUI() {
        this.closeChatList1List2();
        this.closeExpressionList(false);
        this.closeActionList(false);
        this.closeBagCanvas(false);
        this.updateBagIcon(0);
    }
    bindButton() {
        this.mOpenChatButton.onClicked.add(this.addOpenChatButton.bind(this));
        this.mCloseChatList1Button.onClicked.add(this.addCloseChatList1Button.bind(this));
        this.mCloseChatList2Button.onClicked.add(this.addCloseChatList2Button.bind(this));
        this.mOpenExpressionButton.onClicked.add(this.addOpenExpressionButton.bind(this));
        this.mCloseExpressionListButton.onClicked.add(this.addCloseExpressionButton.bind(this));
        this.mOpenActionButton.onClicked.add(this.addOpenActionButton.bind(this));
        this.mCloseActionListButton.onClicked.add(this.addCloseActionListButton.bind(this));
        this.mOpenBagButton.onClicked.add(this.addOpenBagButton.bind(this));
        this.mCloseBagButton.onClicked.add(this.addCloseBagButton.bind(this));
        this.mBackBagButton.onClicked.add(this.addCloseBagButton.bind(this));
        this.mUnloadButton.onClicked.add(this.addUnloadButton.bind(this));
    }
    addOpenChatButton() {
        if (!this.mChatList1Canvas.visible) {
            this.getDanMuModuleC.onOpenChatAction.call();
        } else {
            this.closeChatList1List2();
        }
    }
    addCloseChatList1Button() {
        this.closeChatList1List2();
    }
    addCloseChatList2Button() {
        this.closeChatList2(false);
    }
    addOpenExpressionButton() {
        if (!this.mExpressionListCanvas.visible) {
            this.getDanMuModuleC.onOpenExpressionAction.call();
        } else {
            this.closeExpressionList(false);
        }
    }
    addCloseExpressionButton() {
        this.closeExpressionList(false);
    }
    addOpenActionButton() {
        if (!this.mActionListCanvas.visible) {
            this.getDanMuModuleC.onOpenActionAction.call();
        } else {
            this.closeActionList(false);
        }
    }
    addCloseActionListButton() {
        this.closeActionList(false);
    }
    addStopActionButton() {
        this.getDanMuModuleC.onStopActionButton.call();
    }
    addOpenBagButton() {
        if (!this.mBagCanvas.visible) {
            this.getDanMuModuleC.onOpenBagAction.call();
        } else {
            this.closeBagCanvas(false);
        }
    }
    addCloseBagButton() {
        this.closeBagCanvas(false);
    }
    addUnloadButton() {
        this.getDanMuModuleC.onClickUnloadBagItemAction.call();
    }
    showChatList1(chatDatas, isAlreadyInitChatDatas) {
        this.closeChatList1(true);
        this.closeExpressionList(false);
        this.closeActionList(false);
        if (isAlreadyInitChatDatas) return;
        if (!chatDatas || chatDatas.length == 0) {
            this.closeChatList1(false);
            return;
        }
        this.chatDatas = chatDatas;
        for (let i = 0; i < chatDatas.length; ++i) {
            let chatData = chatDatas[i];
            let chatItem1 = mw.UIService.create(ChatItem1);
            let text = chatData.chats[GlobalData.languageId];
            chatItem1.setData(i, text);
            this.mChatList1ContentCanvas.addChild(chatItem1.uiObject);
        }
    }
    closeChatList1List2() {
        this.closeChatList1(false);
        this.closeChatList2(false);
    }
    closeChatList1(isOpen) {
        Utils.setWidgetVisibility(this.mChatList1Canvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    closeChatList2(isOpen) {
        Utils.setWidgetVisibility(this.mChatList2Canvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    showChatList2(index, chatChilds) {
        this.closeChatList2(true);
        this.closeExpressionList(false);
        this.closeActionList(false);
        if (!chatChilds || chatChilds.length == 0) {
            this.closeChatList2(false);
            return;
        }
        if (chatChilds.length > this.chatItems2.length) {
            for (let i = 0; i < this.chatItems2.length; ++i) {
                this.chatItems2[i].setData(index, i, chatChilds[i][GlobalData.languageId]);
                this.chatItems2[i].uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            for (let i = this.chatItems2.length; i < chatChilds.length; ++i) {
                let chatItem2 = mw.UIService.create(ChatItem2);
                chatItem2.setData(index, i, chatChilds[i][GlobalData.languageId]);
                this.mChatList2ContentCanvas.addChild(chatItem2.uiObject);
                this.chatItems2.push(chatItem2);
            }
        } else {
            for (let i = 0; i < chatChilds.length; ++i) {
                this.chatItems2[i].setData(index, i, chatChilds[i][GlobalData.languageId]);
                this.chatItems2[i].uiObject.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            }
            for (let i = chatChilds.length; i < this.chatItems2.length; ++i) {
                this.chatItems2[i].uiObject.visibility = mw.SlateVisibility.Collapsed;
            }
        }
    }
    showExpressionList(expressionAssets, isAlreadyInitExpressionDatas) {
        this.closeExpressionList(true);
        this.closeChatList1List2();
        this.closeActionList(false);
        if (isAlreadyInitExpressionDatas) return;
        if (!expressionAssets || expressionAssets.length == 0) {
            this.closeExpressionList(false);
            return;
        }
        this.expressionAssets = expressionAssets;
        for (let i = 0; i < expressionAssets.length; ++i) {
            let expressionItem = mw.UIService.create(ExpressionItem);
            expressionItem.setDatas(i, expressionAssets[i]);
            this.mExpressionListContentCanvas.addChild(expressionItem.uiObject);
        }
    }
    closeExpressionList(isOpen) {
        Utils.setWidgetVisibility(this.mExpressionListCanvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    showActionList(actionDataMap, isAlreadyInitActionDatas) {
        this.closeActionList(true);
        this.closeChatList1List2();
        this.closeExpressionList(false);
        if (isAlreadyInitActionDatas) return;
        if (!actionDataMap || actionDataMap.size == 0) {
            this.closeActionList(false);
            return;
        }
        this.actionDataMap = actionDataMap;
        if (!this.actionDataMap.has(0)) {
            this.closeActionList(false);
            return;
        }
        let tabNames = this.actionDataMap.get(0)[0]?.names;
        for (let i = 0; i < tabNames.length; ++i) {
            let actionTabItem = mw.UIService.create(ActionTabItem);
            actionTabItem.setDatas(i + 1, tabNames[i]);
            this.mActionTabListCanvas.addChild(actionTabItem.uiObject);
        }
        this.getDanMuModuleC.onClickActionTabAction.call(1);
    }
    showActionItemList(tabIndex) {
        if (!this.actionDataMap.has(tabIndex)) return;
        let actionDatas = this.actionDataMap.get(tabIndex);
        if (!actionDatas || actionDatas.length == 0) return;
        if (actionDatas.length > this.actionItems.length) {
            for (let i = 0; i < this.actionItems.length; ++i) {
                this.actionItems[i].setDatas(tabIndex, i, actionDatas[i]);
                Utils.setWidgetVisibility(this.actionItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.actionItems.length; i < actionDatas.length; ++i) {
                let actionItem = mw.UIService.create(ActionItem);
                actionItem.setDatas(tabIndex, i, actionDatas[i]);
                this.mActionListContentCanvas.addChild(actionItem.uiObject);
                this.actionItems.push(actionItem);
            }
        } else {
            for (let i = 0; i < actionDatas.length; ++i) {
                this.actionItems[i].setDatas(tabIndex, i, actionDatas[i]);
                Utils.setWidgetVisibility(this.actionItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = actionDatas.length; i < this.actionItems.length; ++i) {
                Utils.setWidgetVisibility(this.actionItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    closeActionList(isOpen) {
        Utils.setWidgetVisibility(this.mActionListCanvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    updateBagIcon(bagId) {
        if (bagId == 0) {
            this.mUnloadButton.visibility = mw.SlateVisibility.Collapsed;
            this.mOpenBagButton.normalImageGuid = `153892`;
            this.mOpenBagButton.pressedImageGuid = `153892`;
            this.mOpenBagButton.disableImageGuid = `153892`;
        } else {
            this.mUnloadButton.visibility = mw.SlateVisibility.Visible;
            let bagIcon = GameConfig.ActionProp.getElement(bagId).ButtonIconId;
            this.mOpenBagButton.normalImageGuid = bagIcon;
            this.mOpenBagButton.pressedImageGuid = bagIcon;
            this.mOpenBagButton.disableImageGuid = bagIcon;
            this.closeBagCanvas(false);
        }
    }
    showBagCanvas() {
        if (!this.isInitBagUI) {
            this.isInitBagUI = true;
            for (let i = 0; i < this.bagTabTexts.length; ++i) {
                let bagTabItem = mw.UIService.create(BagTabItem);
                bagTabItem.setDatas(i + 1, this.bagTabTexts[i]);
                this.mBagTabCanvas.addChild(bagTabItem.uiObject);
                this.bagTabItems.push(bagTabItem);
            }
        }
        this.getDanMuModuleC.onClickBagTabAction.call(this.bagTabIndex);
        this.closeBagCanvas(true);
    }
    showBagItemList(index) {
        this.bagTabIndex = index;
        switch (index) {
          case 1:
            this.updatePropList(1);
            break;

          case 2:
            this.updatePropList(2);
            break;

          case 3:
            this.updatePropList(3);
            break;

          case 4:
            this.updatePropList(4);
            break;

          case 5:
            this.updatePropList(5);
            break;

          case 6:
            this.updatePropList(6);
            break;
        }
    }
    updatePropList(tabIndex) {
        let actionPropElement = GameConfig.ActionProp.getAllElement();
        actionPropElement = actionPropElement.filter((value => value.AssetId && value.AssetId != "" && value.Tab == tabIndex));
        actionPropElement.sort(((a, b) => a.Sort - b.Sort));
        let bagIds = this.getInteractionModuleC.getBagIds;
        if (actionPropElement.length > this.bagItems.length) {
            for (let i = 0; i < this.bagItems.length; ++i) {
                this.bagItems[i].setDatas(actionPropElement[i].ID, bagIds.includes(actionPropElement[i].ID));
                Utils.setWidgetVisibility(this.bagItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.bagItems.length; i < actionPropElement.length; ++i) {
                let bagItem = mw.UIService.create(BagItem);
                bagItem.setDatas(actionPropElement[i].ID, bagIds.includes(actionPropElement[i].ID));
                this.mBagContentCanvas.addChild(bagItem.uiObject);
                this.bagItems.push(bagItem);
            }
        } else {
            for (let i = 0; i < actionPropElement.length; ++i) {
                this.bagItems[i].setDatas(actionPropElement[i].ID, bagIds.includes(actionPropElement[i].ID));
                Utils.setWidgetVisibility(this.bagItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = actionPropElement.length; i < this.bagItems.length; ++i) {
                Utils.setWidgetVisibility(this.bagItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    closeBagCanvas(isOpen) {
        Utils.setWidgetVisibility(this.mBagCanvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
}

var foreign98 = Object.freeze({
    __proto__: null,
    default: ChatPanel
});

let DanMuPanel_Generate = class DanMuPanel_Generate extends UIScript {
    get mDanMuCanvas() {
        if (!this.mDanMuCanvas_Internal && this.uiWidgetBase) {
            this.mDanMuCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mDanMuCanvas");
        }
        return this.mDanMuCanvas_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {}
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

DanMuPanel_Generate = __decorate([ UIBind("UI/module/DanMuModule/DanMuPanel.ui") ], DanMuPanel_Generate);

var DanMuPanel_Generate$1 = DanMuPanel_Generate;

var foreign160 = Object.freeze({
    __proto__: null,
    default: DanMuPanel_Generate$1
});

class DanMuPanel extends DanMuPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.danMuItems = [];
        this.axisMin = 0;
        this.axisMax = 500;
        this.time = 10;
        this.lockY = -1;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = mw.UILayerDialog;
        this.initData();
    }
    initData() {
        setTimeout((() => {
            this.axisMin = 0;
            this.axisMax = this.mDanMuCanvas.size.y;
            console.error(`this.axisMax:${this.axisMax}`);
        }), 1);
    }
    createDanMuItem(msg, isActive, isSelf) {
        if (!msg || !msg["toString"]) return;
        msg = msg.toString();
        if (msg.length <= 0) return;
        let danMuItem = this.getNewBc(msg, this.lockY);
        let fontColor = "FFFFFFFF";
        let outlineColor = "000000FF";
        if (isActive) {
            outlineColor = "FF0000FF";
        } else if (isSelf) {
            outlineColor = "00FF00FF";
        }
        danMuItem.textBlock.setFontColorByHex(fontColor);
        danMuItem.textBlock.setOutlineColorByHex(outlineColor);
        let endpos = {
            x: danMuItem.size.x * -1,
            y: danMuItem.pos.y
        };
        let textBlock = danMuItem.textBlock;
        new Tween(danMuItem.pos).to(endpos, this.time * 1e3).onUpdate((v => {
            textBlock.position = v;
        })).onComplete((() => {
            danMuItem.run = false;
        })).start();
    }
    getNewBc(msg, lockY) {
        msg = msg.toString();
        let danMuItem = this.danMuItems.find((v => !v.run));
        if (!danMuItem) {
            let ui = mw.TextBlock.newObject(this.mDanMuCanvas, "msgUIObject");
            this.mDanMuCanvas.addChild(ui);
            danMuItem = new DanMuItem;
            danMuItem.textBlock = ui;
            danMuItem.run = true;
            danMuItem.pos = new mw.Vector2(this.mDanMuCanvas.size.x, 0);
            danMuItem.size = new mw.Vector2(35, 100);
            danMuItem.textBlock.outlineSize = 1;
            this.danMuItems.push(danMuItem);
        } else {
            danMuItem.run = true;
        }
        danMuItem.pos.x = this.mDanMuCanvas.size.x;
        danMuItem.pos.y = lockY < 0 ? Math.random() * (this.axisMax - this.axisMin) + this.axisMin : lockY;
        danMuItem.size.x = 40 * msg.length;
        danMuItem.textBlock.text = msg;
        danMuItem.textBlock.size = new mw.Vector2(danMuItem.size.x, danMuItem.size.y);
        return danMuItem;
    }
}

var foreign99 = Object.freeze({
    __proto__: null,
    default: DanMuPanel
});

const DanmuSyncServer = "DanmuSyncServer";

const DanmuSyncClient = "DanmuSyncClient";

const StopAction = "StopAction";

class DanMuModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.danMuPanel = null;
        this.chatPanel = null;
        this.hudModule = null;
        this.onOpenChatAction = new Action;
        this.onClickChatItem1Action = new Action1;
        this.onClickChatItem2Action = new Action2;
        this.onOpenExpressionAction = new Action;
        this.onClickExpressionItemAction = new Action1;
        this.onOpenActionAction = new Action;
        this.onClickActionTabAction = new Action1;
        this.onClickActionItemAction = new Action1;
        this.onStopActionButton = new Action;
        this.onOpenBagAction = new Action;
        this.onClickBagTabAction = new Action1;
        this.onClickBagItemAction = new Action1;
        this.onClickUnloadBagItemAction = new Action;
        this.onNextBagAction = new Action;
        this.chatDatas = [];
        this.isAlreadyInitChatDatas = false;
        this._bubbles = [];
        this.sortAllBubbles = owner => {
            const playerBubbles = this._bubbles.filter((i => i.object == owner));
            let offset = 0;
            for (let i = playerBubbles.length - 1; i >= 0; i--) {
                offset += playerBubbles[i].height;
                playerBubbles[i].offset(offset);
                offset += 5;
            }
        };
        this.expressionAssets = [];
        this.isAlreadyInitExpressionDatas = false;
        this.expressionMap = new Map;
        this.actionDatas = [];
        this.actionDataMap = new Map;
        this.isAlreadyInitActionDatas = false;
        this.actionTabIndex = 0;
        this.isPlaying = false;
        this.isCanInteract = true;
        this.actionTimeOutId = null;
        this.bagTabIndex = 0;
        this.currentBagId = 0;
        this.currentBagIds = [];
        this.isGlide = false;
        this.maxFallingSpeed = 400;
        this.gravityScale = .2;
        this.rotateRate = 90;
        this.isInitParachute = false;
    }
    get getDanMuPanel() {
        if (!this.danMuPanel) {
            this.danMuPanel = mw.UIService.getUI(DanMuPanel);
        }
        return this.danMuPanel;
    }
    get getChatPanel() {
        if (!this.chatPanel) {
            this.chatPanel = mw.UIService.getUI(ChatPanel);
        }
        return this.chatPanel;
    }
    get getHudModuleC() {
        if (!this.hudModule) {
            this.hudModule = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModule;
    }
    onStart() {
        this.bindEvent();
        InputUtil.onKeyDown(mw.Keys.P, (() => {
            Event.dispatchToLocal(DanmuSyncClient, "测试弹幕");
        }));
        InputUtil.onKeyDown(mw.Keys.O, (() => {
            Event.dispatchToLocal(DanmuSyncServer, "测试弹幕");
        }));
        InputUtil.onKeyDown(mw.Keys.SpaceBar, (() => {
            this.localPlayer.character.jump();
        }));
    }
    onEnterScene(sceneType) {
        this.showPanels();
        this.initParachute();
    }
    onUpdate(dt) {
        this.updateBubble(dt);
        this.checkParachute();
    }
    showPanels() {
        this.getDanMuPanel.show();
        this.getChatPanel.show();
        this.initBubble();
    }
    bindEvent() {
        Event.addLocalListener(DanmuSyncServer, this.sendDanMuSyncServer.bind(this));
        Event.addLocalListener(DanmuSyncClient, this.sendDanMuSyncClient.bind(this));
        RoomService.registerMGSChatMessageEvent(this.addMGSChatMessageEvent.bind(this));
        this.onOpenChatAction.add(this.addOpenChatAction.bind(this));
        this.onClickChatItem1Action.add(this.addClickChatItem1Action.bind(this));
        this.onClickChatItem2Action.add(this.addClickChatItem2Action.bind(this));
        this.onOpenExpressionAction.add(this.addOpenExpressionAction.bind(this));
        this.onClickExpressionItemAction.add(this.addClickExpressionItemAction.bind(this));
        this.onOpenActionAction.add(this.addOpenActionAction.bind(this));
        this.onClickActionTabAction.add(this.addClickActionTabAction.bind(this));
        this.onClickActionItemAction.add(this.addClickActionItemAction.bind(this));
        Event.addLocalListener(StopAction, this.addStopAction.bind(this));
        this.onStopActionButton.add(this.addStopAction.bind(this));
        this.onOpenBagAction.add(this.addOpenBagAction.bind(this));
        this.onClickBagTabAction.add(this.addClickBagTabAction.bind(this));
        this.onClickBagItemAction.add(this.addClickBagItemAction_filter.bind(this));
        this.onClickUnloadBagItemAction.add(this.addClickUnloadBagItemAction.bind(this));
        this.onNextBagAction.add(this.addNextBagAction.bind(this));
        this.getHudModuleC.clickGoodItemAction.add(this.addClickGoodItemAction.bind(this));
        this.getHudModuleC.clickCloseGoodItemAction.add(this.addClickCloseGoodItemAction.bind(this));
        this.getHudModuleC.deleteAllGoodsAction.add(this.addDeleteAllGoodsAction.bind(this));
        Event.addLocalListener(EventType.OnOffMainUI, this.addOnOffMainUI.bind(this));
    }
    addOnOffMainUI(isShow) {
        console.error(`wfz - addOnOffMainUI - isShow:${isShow}`);
        isShow ? this.getChatPanel.show() : this.getChatPanel.hide();
    }
    sendDanMuSyncServer(msg, isActive) {
        this.server.net_sendDanMu(msg, isActive);
    }
    sendDanMuSyncClient(msg, isActive) {
        this.getDanMuPanel.createDanMuItem(msg, isActive, true);
    }
    addMGSChatMessageEvent(jsonData) {
        this.getDanMuPanel.createDanMuItem(jsonData, false, false);
        this.showBubbleText(jsonData);
    }
    net_sendDanMu(userId, msg, isActive) {
        this.getDanMuPanel.createDanMuItem(msg, isActive, userId == this.localPlayer.userId);
    }
    net_initChatDatas(chatDatas) {
        this.chatDatas = chatDatas;
        console.error(JSON.stringify(chatDatas));
    }
    addOpenChatAction() {
        if (!this.isAlreadyInitChatDatas) {
            if (!this.chatDatas || this.chatDatas.length == 0) {
                this.chatDatas = [];
                GameConfig.Chat.getAllElement().forEach((value => {
                    this.chatDatas.push({
                        chats: value.Chats,
                        chatChilds: value.ChatChilds
                    });
                }));
            }
            this.getChatPanel.showChatList1(this.chatDatas, this.isAlreadyInitChatDatas);
            this.isAlreadyInitChatDatas = true;
        } else {
            this.getChatPanel.showChatList1(this.chatDatas, this.isAlreadyInitChatDatas);
        }
    }
    addClickChatItem1Action(index) {
        if (this.chatDatas.length <= index) return;
        let chatData = this.chatDatas[index];
        if (!chatData) return;
        if (chatData.chatChilds && chatData.chatChilds.length > 0) {
            this.getChatPanel.showChatList2(index, chatData.chatChilds);
        } else {
            Event.dispatchToLocal(DanmuSyncServer, chatData.chats[1]);
            this.showBubbleText(chatData.chats[1]);
        }
    }
    addClickChatItem2Action(index, childIndex) {
        if (this.chatDatas.length <= index) return;
        let chatData = this.chatDatas[index];
        if (!chatData) return;
        if (chatData.chatChilds && chatData.chatChilds.length > childIndex) {
            let text = chatData.chatChilds[childIndex][GlobalData.languageId];
            Event.dispatchToLocal(DanmuSyncServer, text);
            this.showBubbleText(text);
        }
    }
    initBubble() {
        this._uiPool = new ObjPool((() => {
            const ui = UIService.create(BubbleItem_Generate$1);
            return ui;
        }), (ui => {
            ui.rootCanvas.visibility = mw.SlateVisibility.HitTestInvisible;
            ui.rootCanvas.renderScale = Vector2.zero;
            ui.mDialogTextBlock.autoSizeEnable = true;
            ui.mDialogTextBlock.textHorizontalLayout = mw.UITextHorizontalLayout.NoClipping;
            ui.mDialogTextBlock.text = "";
            ui.mDialogTextBlock.invalidateLayoutAndVolatility();
        }), (ui => {
            ui.destroy();
        }), (() => {}), 3);
    }
    showBubbleText(text) {
        this.server.net_showBubbleText(this.localPlayer.character.gameObjectId, text);
    }
    net_showBubbleText(gameObjectId, text) {
        mw.GameObject.asyncFindGameObjectById(gameObjectId).then((value => {
            value.onDestroyDelegate.add((() => {
                this.clear(value);
            }));
            this.showDialog(value, text);
        }));
    }
    showDialog(object, text) {
        const playerBubbles = this._bubbles.filter((i => i.object == object));
        if (playerBubbles.length > 4) {
            const index = this._bubbles.findIndex((i => i.object == object));
            this._bubbles[index].destory();
            this._bubbles.splice(index, 1);
        }
        this._bubbles.push(new Bubble(object, this._uiPool, text, this.sortAllBubbles));
    }
    clear(object) {
        for (let i = 0; i < this._bubbles.length; i++) {
            if (this._bubbles[i].object == object) {
                this._bubbles[i].destory();
                this._bubbles.splice(i, 1);
                i--;
            }
        }
    }
    updateBubble(dt) {
        for (let i = 0; i < this._bubbles.length; i++) {
            if (this._bubbles[i].onUpdate(dt)) {
                this._bubbles[i].destory();
                this._bubbles.splice(i, 1);
                i--;
            }
        }
    }
    net_initExpressionDatas(expressionAssets) {
        this.expressionAssets = expressionAssets;
        console.error(JSON.stringify(expressionAssets));
    }
    addOpenExpressionAction() {
        if (!this.isAlreadyInitExpressionDatas) {
            if (!this.expressionAssets || this.expressionAssets.length == 0) {
                this.expressionAssets = [];
                GameConfig.Expression.getAllElement().forEach((value => {
                    this.expressionAssets.push(value.AssetId);
                }));
            }
            this.getChatPanel.showExpressionList(this.expressionAssets, this.isAlreadyInitExpressionDatas);
            this.isAlreadyInitExpressionDatas = true;
        } else {
            this.getChatPanel.showExpressionList(this.expressionAssets, this.isAlreadyInitExpressionDatas);
        }
    }
    addClickExpressionItemAction(index) {
        if (this.expressionAssets.length <= index) return;
        let assetId = this.expressionAssets[index];
        if (!assetId || assetId == "") return;
        this.server.net_playExpression(assetId);
    }
    net_playExpression(playerId, assetId) {
        let player = Player.getPlayer(playerId);
        if (!player) return;
        Utils.asyncDownloadAsset(assetId).then((() => {
            if (this.expressionMap.has(playerId)) {
                let expression = this.expressionMap.get(playerId);
                if (expression.playId) {
                    EffectService.stop(expression.playId);
                    expression.playId = null;
                }
                if (expression.timeoutId) {
                    clearTimeout(expression.timeoutId);
                    expression.timeoutId = null;
                }
            }
            let playId = EffectService.playOnGameObject(assetId, player.character, {
                slotType: mw.HumanoidSlotType.Root,
                loopCount: 0,
                position: new mw.Vector(0, 0, 200)
            });
            let timeoutId = setTimeout((() => {
                if (this.expressionMap.has(playerId)) {
                    let expression = this.expressionMap.get(playerId);
                    if (expression.playId) {
                        EffectService.stop(expression.playId);
                        expression.playId = null;
                    }
                    if (expression.timeoutId) {
                        clearTimeout(expression.timeoutId);
                        expression.timeoutId = null;
                    }
                }
            }), 5 * 1e3);
            this.expressionMap.set(playerId, {
                playId: playId,
                timeoutId: timeoutId
            });
        }));
    }
    net_initActionDatas(actionDatas) {
        this.actionDatas = actionDatas;
        console.error(JSON.stringify(actionDatas));
        this.actionDataMap.clear();
        actionDatas.forEach((value => {
            if (this.actionDataMap.has(value.tab)) {
                let actionDatas = this.actionDataMap.get(value.tab);
                actionDatas.push(value);
            } else {
                this.actionDataMap.set(value.tab, [ value ]);
            }
        }));
    }
    addOpenActionAction() {
        if (!this.isAlreadyInitActionDatas) {
            if (!this.actionDataMap || this.actionDataMap.size == 0) {
                this.actionDataMap = new Map;
                this.actionDataMap.clear();
                GameConfig.ActionConfig.getAllElement().forEach((value => {
                    let actionData = new ActionData;
                    actionData.tab = value.Tab;
                    actionData.icon = value.Icon;
                    actionData.assetId = value.ActionId;
                    actionData.names = value.Names;
                    actionData.loop = value.Loop;
                    actionData.pos = value.Pos;
                    actionData.rot = new mw.Rotation(value.Rot);
                    actionData.type = value.Type;
                    if (this.actionDataMap.has(actionData.tab)) {
                        let actionDatas = this.actionDataMap.get(actionData.tab);
                        actionDatas.push(actionData);
                    } else {
                        this.actionDataMap.set(actionData.tab, [ actionData ]);
                    }
                }));
            }
            this.getChatPanel.showActionList(this.actionDataMap, this.isAlreadyInitActionDatas);
            this.isAlreadyInitActionDatas = true;
        } else {
            this.getChatPanel.showActionList(this.actionDataMap, this.isAlreadyInitActionDatas);
        }
    }
    addClickActionTabAction(index) {
        if (this.actionTabIndex == index) return;
        this.actionTabIndex = index;
        this.getChatPanel.showActionItemList(this.actionTabIndex);
    }
    addClickActionItemAction(index) {
        if (!this.actionDataMap.has(this.actionTabIndex)) return;
        let actionDatas = this.actionDataMap.get(this.actionTabIndex);
        if (!actionDatas || actionDatas.length == 0 || index >= actionDatas.length) return;
        let actionData = actionDatas[index];
        if (!actionData) return;
        if (!this.isCanInteract) {
            console.error("交互还未准备完成");
            return;
        }
        this.isCanInteract = false;
        this.server.net_EnterInteract(actionData).then((async () => {
            this.isPlaying = true;
            this.isCanInteract = true;
            this.clearActionTimeOut();
            this.getHudModuleC.controllerActionUIVisible(true);
            if (actionData.loop != 0) return;
            await Utils.asyncDownloadAsset(actionData.assetId);
            let length = this.localPlayer.character.loadAnimation(actionData.assetId).length;
            this.actionTimeOutId = setTimeout((() => {
                this.getHudModuleC.controllerActionUIVisible(false);
                this.clearActionTimeOut();
            }), length * 1e3);
        }));
    }
    clearActionTimeOut() {
        if (this.actionTimeOutId) {
            clearTimeout(this.actionTimeOutId);
            this.actionTimeOutId = null;
        }
    }
    addStopAction() {
        this.getHudModuleC.controllerActionUIVisible(false);
        this.clearActionTimeOut();
        if (!this.localPlayer.character.movementEnabled) this.localPlayer.character.movementEnabled = true;
        if (!this.isPlaying) return;
        this.server.net_LeaveInteract().then((() => {
            this.isPlaying = false;
        }));
    }
    addOpenBagAction() {
        this.getChatPanel.showBagCanvas();
    }
    addClickBagTabAction(index) {
        this.bagTabIndex = index;
        this.getChatPanel.showBagItemList(this.bagTabIndex);
    }
    addClickBagItemAction_filter(bagId) {
        if (this.currentBagIds.includes(bagId)) {
            Notice.showDownNotice(GameConfig.Language.Text_ThisItemIsInUse.Value);
            return;
        }
        this.addClickBagItemAction(bagId);
    }
    addNextBagAction() {
        let nextBagId = GameConfig.ActionProp.getElement(this.currentBagId).NextId;
        if (!nextBagId || nextBagId <= 0) return;
        this.addClickBagItemAction(nextBagId);
    }
    addClickBagItemAction(bagId) {
        console.error(`wfz - ClickBagItem - bagId:${bagId}`);
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let bagIds = await this.server.net_useBag(bagId);
            this.getChatPanel.closeBagCanvas(false);
            this.currentBagIds = bagIds;
            if (this.currentBagIds.includes(bagId)) {
                this.currentBagId = bagId;
                this.getHudModuleC.updateBagIcon(bagId);
                this.getHudModuleC.updateGoodsListCanvas(this.currentBagIds);
                console.error(`wfz - ClickBagItem - this.currentBagIds:${this.currentBagIds}  this.currentBagId:${this.currentBagId}`);
            } else {
                Notice.showDownNotice(GameConfig.Language.Text_TheItemBarIsFull.Value);
            }
        }));
    }
    addClickCloseGoodItemAction(bagId) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            if (this.currentBagIds.includes(bagId)) {
                let bagIds = await this.server.net_unloadBag(bagId);
                this.currentBagIds = bagIds;
                console.error(`wfz  - CloseGoodItem - bagIds:${bagIds}`);
                this.getHudModuleC.updateGoodsListCanvas(this.currentBagIds);
                if (this.currentBagId == bagId) {
                    this.currentBagId = 0;
                    this.getHudModuleC.updateBagIcon(this.currentBagId);
                }
                console.error(`wfz  - CloseGoodItem - this.currentBagIds:${this.currentBagIds}`);
            }
        }));
    }
    addClickGoodItemAction(bagId) {
        if (this.currentBagIds.includes(bagId)) {
            let nextBagId = GameConfig.ActionProp.getElement(bagId).NextId;
            if (!nextBagId || nextBagId <= 0) return;
            this.addClickBagItemAction(nextBagId);
        }
    }
    addDeleteAllGoodsAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let bagIds = await this.server.net_unloadAllBag();
            this.currentBagIds = bagIds;
            this.currentBagId = 0;
            this.getHudModuleC.updateBagIcon(this.currentBagId);
            this.getHudModuleC.updateGoodsListCanvas(this.currentBagIds);
            console.error(`wfz - DeleteAllGoods - this.currentBagIds:${this.currentBagIds}  this.currentBagId:${this.currentBagId}`);
        }));
    }
    addClickUnloadBagItemAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            if (this.currentBagId == 0) return;
            let bagIds = await this.server.net_unloadBag(this.currentBagId);
            this.currentBagIds = bagIds;
            this.currentBagId = 0;
            this.getChatPanel.updateBagIcon(this.currentBagId);
        }));
    }
    initDance() {
        danceInteracts.forEach((async value => {
            let npcs = [];
            for (let i = 0; i < value.npcIds.length; ++i) {
                let npc = await mw.GameObject.asyncFindGameObjectById(value.npcIds[i]);
                npc.collisionWithOtherCharacterEnabled = false;
                await Utils.asyncDownloadAsset(value.danceIds[i]);
                await npc.asyncReady();
                npcs.push(npc);
            }
            for (let i = 0; i < npcs.length; ++i) {
                npcs[i].loadSubStance(value.danceIds[i]).play();
            }
        }));
    }
    initParachute() {
        this.maxFallingSpeed = this.localPlayer.character.maxFallingSpeed;
        this.gravityScale = this.localPlayer.character.gravityScale;
        this.rotateRate = this.localPlayer.character.rotateRate;
        this.isInitParachute = true;
    }
    checkParachute() {
        return;
    }
    startGlide() {
        this.isGlide = true;
        this.localPlayer.character.maxFallingSpeed = 400;
        this.localPlayer.character.gravityScale = .2;
        this.localPlayer.character.rotateRate = 90;
        this.server.net_startGlide().then((() => {
            this.localPlayer.character.addImpulse(new mw.Vector(0, 0, 1e3), true);
            let checkIsGlide = TimeUtil.setInterval((() => {
                if (!this.localPlayer.character.isJumping) {
                    this.server.net_stopGlide();
                    this.isGlide = false;
                    this.localPlayer.character.maxFallingSpeed = this.maxFallingSpeed;
                    this.localPlayer.character.gravityScale = this.gravityScale;
                    this.localPlayer.character.rotateRate = this.rotateRate;
                    TimeUtil.clearInterval(checkIsGlide);
                }
            }), 2 / 100);
        }));
    }
}

const danceInteracts = [ {
    npcIds: [ "28F96714", "15CEFD34" ],
    danceIds: [ "122807", "122806" ]
}, {
    npcIds: [ "1B359E64", "22C58295" ],
    danceIds: [ "124192", "124194" ]
}, {
    npcIds: [ "3D8A73D5", "24D81C76" ],
    danceIds: [ "122811", "122809" ]
}, {
    npcIds: [ "1C528004", "2C9FC93B" ],
    danceIds: [ "122808", "122810" ]
} ];

var foreign90 = Object.freeze({
    __proto__: null,
    DanmuSyncClient: DanmuSyncClient,
    DanmuSyncServer: DanmuSyncServer,
    StopAction: StopAction,
    default: DanMuModuleC
});

let Buff = class Buff extends Script {
    constructor() {
        super(...arguments);
        this.bagId = 0;
        this.playerId = 0;
        this.springArmLength = 350;
        this.startScale = 1;
        this.targetScale = 1;
        this.time = 0;
        this.targetPlayer = null;
        this.localPlayer = null;
    }
    onStart() {
        this.useUpdate = false;
    }
    onBagIdChange() {
        if (!this.targetPlayer || !this.localPlayer) return;
        if (this.bagId == 0) {
            this.startScale = this.targetPlayer.character.worldTransform.scale.x;
            this.targetScale = 1;
            if (this.targetPlayer.playerId == this.localPlayer.playerId) {
                Camera.currentCamera.springArm.length = this.springArmLength * this.targetScale;
            }
        } else {
            let actionPropElement = GameConfig.ActionProp.getElement(this.bagId);
            if (actionPropElement.BuffId <= 0) return;
            let buffParams = actionPropElement.BuffParams;
            this.startScale = this.targetPlayer.character.worldTransform.scale.x;
            this.targetScale = buffParams[0];
            if (this.targetPlayer.playerId == this.localPlayer.playerId) {
                Camera.currentCamera.springArm.length = this.springArmLength * this.targetScale;
            }
        }
        this.time = 0;
        this.useUpdate = true;
    }
    async onPlayerIdChange() {
        this.targetPlayer = await Player.asyncGetPlayer(this.playerId);
        this.localPlayer = await Player.asyncGetLocalPlayer();
    }
    onUpdate(dt) {
        if (this.targetPlayer == null || this.time >= 1) return;
        this.time = Math.min(this.time + dt * 5, 1);
        this.startScale = this.startScale + (this.targetScale - this.startScale) * this.time;
        try {
            this.targetPlayer.character.worldTransform.scale = mw.Vector.multiply(mw.Vector.one, this.startScale);
        } catch (error) {}
    }
    onDestroy() {}
};

__decorate([ mw.Property({
    replicated: true,
    onChanged: "onBagIdChange"
}) ], Buff.prototype, "bagId", void 0);

__decorate([ mw.Property({
    replicated: true,
    onChanged: "onPlayerIdChange"
}) ], Buff.prototype, "playerId", void 0);

Buff = __decorate([ Component ], Buff);

var Buff$1 = Buff;

var foreign88 = Object.freeze({
    __proto__: null,
    default: Buff$1
});

const WorldChatDatas = "WorldChatDatas";

const WorldExpressionDatas = "WorldExpressionDatas";

const WorldActionDatas = "WorldActionDatas";

class DanMuModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.maxShowDistance = 2e3;
        this.playerInteractMap = new Map;
        this.playerBagMap = new Map;
        this.playerGlideMap = new Map;
    }
    onStart() {}
    onPlayerEnterGame(player) {
        this.initChatDatas(player);
        this.initExpressionDatas(player);
        this.initBuff(player);
    }
    onPlayerLeft(player) {
        if (Utils.buffMap.has(player.playerId)) {
            Utils.buffMap.get(player.playerId)?.destroy();
            Utils.buffMap.delete(player.playerId);
        }
        this.unloadAllBag(player, false);
    }
    initBuff(player) {
        let buff = player.character.addComponent(Buff$1, true);
        buff.playerId = player.playerId;
        Utils.buffMap.set(player.playerId, buff);
    }
    onUpdate(dt) {
        this.playerBagMap.forEach((value => {
            value.forEach((bag => {
                if (bag.isUpdate) bag.update();
            }));
        }));
    }
    initChatDatas(player) {
        this.getCustomdata(WorldChatDatas).then((chatDatas => {
            if (!chatDatas || chatDatas.length == 0) return;
            this.getClient(player).net_initChatDatas(chatDatas);
        }));
    }
    initExpressionDatas(player) {
        this.getCustomdata(WorldExpressionDatas).then((expressionAssets => {
            if (!expressionAssets || expressionAssets.length == 0) return;
            this.getClient(player).net_initExpressionDatas(expressionAssets);
        }));
    }
    initActionDatas(player) {
        this.getCustomdata(WorldActionDatas).then((actionDatas => {
            if (!actionDatas || actionDatas.length == 0) return;
            this.getClient(player).net_initActionDatas(actionDatas);
        }));
    }
    setChat_Test() {
        let chatDatas = [];
        for (let i = 1; i <= 10; ++i) {
            let ch = GameConfig.Chat.getElement(i);
            let chats = ch.Chats;
            let chatChilds = ch.ChatChilds;
            chatDatas.push({
                chats: chats,
                chatChilds: chatChilds
            });
        }
        this.setCustomData(WorldChatDatas, chatDatas);
    }
    setExpression_Test() {
        let expressionAssets = [];
        GameConfig.Expression.getAllElement().forEach((value => {
            expressionAssets.push(value.AssetId);
        }));
        this.setCustomData(WorldExpressionDatas, expressionAssets);
    }
    setAction_Test() {
        let actionDatas = [];
        GameConfig.ActionConfig.getAllElement().forEach((value => {
            actionDatas.push({
                tab: value.Tab,
                icon: value.Icon,
                assetId: value.ActionId,
                names: value.Names,
                loop: value.Loop,
                pos: value.Pos,
                rot: new mw.Rotation(value.Rot),
                type: value.Type
            });
        }));
        this.setCustomData(WorldActionDatas, actionDatas);
    }
    net_sendDanMu(msg, isActive) {
        this.getAllClient().net_sendDanMu(this.currentPlayer.userId, msg, isActive);
    }
    async getCustomdata(key) {
        return (await DataStorage.asyncGetData(key)).data;
    }
    async setCustomData(saveKey, dataInfo) {
        let code = null;
        code = await DataStorage.asyncSetData(saveKey, dataInfo);
        return code == mw.DataStorageResultCode.Success;
    }
    net_showBubbleText(gameObjectId, text) {
        let currentPlayer = this.currentPlayer;
        if (this.maxShowDistance == -1) {
            Player.getAllPlayers().forEach((player => {
                this.getClient(player).net_showBubbleText(gameObjectId, text);
            }));
        } else {
            const players = Player.getAllPlayers();
            for (const player of players) {
                if (player === currentPlayer) {
                    this.getClient(player).net_showBubbleText(gameObjectId, text);
                } else {
                    const len = Vector.distance(player.character.worldTransform.position, currentPlayer.character.worldTransform.position);
                    if (len <= this.maxShowDistance) {
                        this.getClient(player).net_showBubbleText(gameObjectId, text);
                    }
                }
            }
        }
    }
    net_playExpression(assetId) {
        this.getAllClient().net_playExpression(this.currentPlayerId, assetId);
    }
    async net_EnterInteract(actionData) {
        let player = this.currentPlayer;
        return await this.enterInteract(player, actionData);
    }
    async enterInteract(player, actionData) {
        let playerId = player.playerId;
        if (!this.playerInteractMap.has(playerId)) {
            this.playerInteractMap.set(playerId, new PlayerInteract);
        }
        let playerInteract = this.playerInteractMap.get(playerId);
        await playerInteract.clearInteractor(player);
        if (actionData.type == 0) {
            return await playerInteract.playSingleAni(player, actionData);
        } else if (actionData.type == 1) {
            return await playerInteract.interact(player, actionData);
        } else if (actionData.type == 2) {
            return await playerInteract.playDoubleAni(player, actionData);
        }
    }
    async net_LeaveInteract() {
        let player = this.currentPlayer;
        return await this.leaveInteract(player);
    }
    async leaveInteract(player) {
        let playerId = player.playerId;
        if (!this.playerInteractMap.has(playerId)) return true;
        let playerInteract = this.playerInteractMap.get(playerId);
        return await playerInteract.clearInteractor(player);
    }
    async net_useBag(bagId) {
        let player = this.currentPlayer;
        let playerBag = null;
        let bagIds = [];
        if (!this.playerBagMap.has(player.playerId)) {
            playerBag = new PlayerBag;
            this.playerBagMap.set(player.playerId, [ playerBag ]);
        } else {
            let playerBags = this.playerBagMap.get(player.playerId);
            for (let i = 0; i < playerBags.length; ++i) {
                if (GameConfig.ActionProp.getElement(bagId).Tab == 6) {
                    if (GameConfig.ActionProp.getElement(playerBags[i].bagId).Tab == 6) {
                        playerBag = playerBags[i];
                        break;
                    }
                }
                if (playerBags[i].bagId == bagId || GameConfig.ActionProp.getElement(playerBags[i].bagId).NextId == bagId) {
                    playerBag = playerBags[i];
                    break;
                }
            }
            if (!playerBag) {
                if (playerBags.length >= GlobalData.bagCount) {
                    playerBags.forEach((value => {
                        bagIds.push(value.bagId);
                    }));
                    return bagIds;
                }
                playerBag = new PlayerBag;
                playerBags.push(playerBag);
            }
        }
        await playerBag.equip(player, bagId);
        this.playerBagMap.get(player.playerId).forEach((value => {
            bagIds.push(value.bagId);
        }));
        return bagIds;
    }
    async net_unloadBag(bagId) {
        let player = this.currentPlayer;
        let bagIds = [];
        if (!this.playerBagMap.has(player.playerId)) return bagIds;
        let playerBags = this.playerBagMap.get(player.playerId);
        let unloadIndex = -1;
        for (let i = 0; i < playerBags.length; ++i) {
            if (playerBags[i].bagId == bagId) {
                await playerBags[i].unEquip(player, bagId);
                unloadIndex = i;
                break;
            }
        }
        if (unloadIndex == -1 || !playerBags || playerBags.length == 0) return bagIds;
        if (playerBags.length == 1) {
            playerBags.length = 0;
            playerBags = [];
        } else {
            for (let i = unloadIndex + 1; i < playerBags.length; ++i) {
                playerBags[i - 1] = playerBags[i];
            }
            playerBags.length = playerBags.length - 1;
        }
        console.error(`playerBags.length:${playerBags.length}`);
        playerBags.forEach((value => {
            bagIds.push(value.bagId);
        }));
        return bagIds;
    }
    async net_unloadAllBag() {
        let player = this.currentPlayer;
        return await this.unloadAllBag(player, true);
    }
    async unloadAllBag(player, isSync) {
        if (!this.playerBagMap.has(player.playerId)) return;
        let playerBag = this.playerBagMap.get(player.playerId);
        for (let i = 0; i < playerBag.length; ++i) {
            await playerBag[i].unEquip(player, playerBag[i].bagId, isSync);
        }
        this.playerBagMap.delete(player.playerId);
        return [];
    }
    async net_startGlide() {
        let player = this.currentPlayer;
        if (!this.playerGlideMap.has(player.playerId)) {
            this.playerGlideMap.set(player.playerId, new PlayerGlide);
        }
        let playerGlide = this.playerGlideMap.get(player.playerId);
        return await playerGlide.startGlide(player);
    }
    net_stopGlide() {
        let player = this.currentPlayer;
        if (!this.playerGlideMap.has(player.playerId)) return true;
        let playerGlide = this.playerGlideMap.get(player.playerId);
        playerGlide.stopGlide();
        this.playerGlideMap.delete(player.playerId);
        return true;
    }
}

__decorate([ Decorator.noReply() ], DanMuModuleS.prototype, "net_sendDanMu", null);

__decorate([ Decorator.noReply() ], DanMuModuleS.prototype, "net_showBubbleText", null);

__decorate([ Decorator.noReply() ], DanMuModuleS.prototype, "net_playExpression", null);

class PlayerGlide {
    constructor() {
        this.animation = null;
        this.glideObj = null;
        this.effectId = null;
    }
    async startGlide(player) {
        await Utils.asyncDownloadAsset(`148890`);
        this.animation = player.character.loadAnimation(`148890`);
        this.animation.loop = 0;
        this.animation.play();
        await Utils.asyncDownloadAsset(`162566`);
        this.glideObj = await GameObjPool.asyncSpawn("162566");
        await this.glideObj.asyncReady();
        await this.glideObj.setCollision(mw.PropertyStatus.Off, true);
        await Utils.asyncDownloadAsset(`27392`);
        this.effectId = EffectService.playOnGameObject("27392", this.glideObj, {
            loopCount: 0
        });
        player.character.attachToSlot(this.glideObj, mw.HumanoidSlotType.LeftHand);
        this.glideObj.localTransform.position = new mw.Vector(0, 0, 0);
        this.glideObj.localTransform.rotation = new mw.Rotation(-90, 0, 0);
        return true;
    }
    stopGlide() {
        if (this.effectId) {
            EffectService.stop(this.effectId);
            this.effectId = null;
        }
        if (this.animation) {
            this.animation.stop();
            this.animation = null;
        }
        if (this.glideObj) {
            GameObjPool.despawn(this.glideObj);
            this.glideObj = null;
        }
    }
}

class PlayerBag {
    constructor() {
        this.player = null;
        this.bagId = null;
        this.mode = null;
        this.vehiclesMode = null;
        this.isUpdate = false;
        this.isMove = false;
        this.playerVelocity = null;
        this.actionPropElement = null;
        this.vehiclesModeAnimation = null;
        this.playerAnimation = null;
        this.playerStatce = null;
        this.originalMaterialId = null;
        this.animation = null;
        this.effectId = null;
        this.soundId = null;
    }
    async equip(player, bagId) {
        this.player = player;
        this.bagId = bagId;
        let actionPropElement = GameConfig.ActionProp.getElement(bagId);
        this.actionPropElement = actionPropElement;
        if (actionPropElement.BuffId > 0) {
            if (Utils.buffMap.has(player.playerId)) {
                Utils.buffMap.get(player.playerId).bagId = bagId;
            }
        } else {
            if (actionPropElement.NextId > 0) {
                if (GameConfig.ActionProp.getElement(actionPropElement.NextId).BuffId > 0) {
                    if (Utils.buffMap.has(player.playerId)) {
                        Utils.buffMap.get(player.playerId).bagId = 0;
                    }
                }
            }
        }
        if (actionPropElement.AssetId && actionPropElement.AssetId.length > 0) {
            this.recycleMode();
            await this.spawnMode(player, actionPropElement.AssetId, actionPropElement.SlotType, actionPropElement.ModeOffsetParameter);
        } else {
            await this.updateMode(player, actionPropElement.SlotType, actionPropElement.ModeOffsetParameter);
        }
        if (actionPropElement.VehiclesChildId && actionPropElement.VehiclesChildId.length > 0) {
            this.recycleVehiclesMode();
            await this.spawnVehiclesMode(player, actionPropElement.VehiclesChildId, actionPropElement.VehiclesChildParameter);
        } else {
            this.recycleVehiclesMode();
        }
        if (actionPropElement.MaterialId && actionPropElement.MaterialId.length > 0) {
            this.setMaterial(actionPropElement.MaterialId);
        } else {
            this.resetMaterial();
        }
        if (actionPropElement.IsFly == 1) {
            this.switchFlyState(player);
        } else if (actionPropElement.IsFly == 0) {
            if (actionPropElement.NextId > 0) {
                if (GameConfig.ActionProp.getElement(actionPropElement.NextId).IsFly == 1) {
                    this.switchRunState(player);
                }
            }
        }
        if (actionPropElement.AnimationId && actionPropElement.AnimationId.length > 0) {
            await this.playAnimation(player, actionPropElement.AnimationId, actionPropElement.AnimationSlot, actionPropElement.AnimationParameter);
        } else {
            this.stopAnimation();
        }
        if (actionPropElement.DelayAssetId && actionPropElement.DelayAssetId.length > 0) {
            this.placingItems(player, actionPropElement);
        }
        if (actionPropElement.EffectId && actionPropElement.EffectId.length > 0) {
            this.stopEffect();
            await this.playEffect(actionPropElement.EffectId, actionPropElement.EffectLoop, actionPropElement.EffectOffsetParameter);
        } else {
            this.stopEffect();
        }
        if (actionPropElement.SoundId && actionPropElement.SoundId.length > 0) {
            this.stop3DSound();
            await this.play3DSound(actionPropElement.SoundId, actionPropElement.SoundParameter);
        } else {
            this.stop3DSound();
        }
        this.isUpdate = actionPropElement.Tab == 6;
        await TimeUtil.delaySecond(.1);
        return true;
    }
    async unEquip(player, bagId, isSync = true) {
        this.isUpdate = false;
        this.stopEffect();
        this.stop3DSound();
        this.stopAnimation();
        this.stopPlayerVehiclesModeAnimation();
        this.resetMaterial();
        let actionPropElement = GameConfig.ActionProp.getElement(bagId);
        if (actionPropElement.IsFly == 1 && GameConfig.ActionProp.getElement(actionPropElement.NextId).IsFly == 0) {
            this.switchRunState(player);
        }
        if (actionPropElement.BuffId > 0) {
            if (actionPropElement.NextId > 0) {
                if (GameConfig.ActionProp.getElement(actionPropElement.NextId).BuffId <= 0) {
                    if (Utils.buffMap.has(player.playerId)) {
                        Utils.buffMap.get(player.playerId).bagId = 0;
                    }
                }
            }
        }
        this.recycleMode();
        this.recycleVehiclesMode();
        if (isSync) await TimeUtil.delaySecond(.1);
        return true;
    }
    async spawnMode(player, assetId, slotType, parameter) {
        await Utils.asyncDownloadAsset(assetId);
        this.mode = await GameObjPool.asyncSpawn(assetId);
        await this.mode.asyncReady();
        this.mode.setCollision(mw.PropertyStatus.Off, true);
        player.character.attachToSlot(this.mode, slotType);
        this.mode.localTransform.position = new Vector(parameter[0], parameter[1], parameter[2]);
        this.mode.localTransform.rotation = new Rotation(parameter[3], parameter[4], parameter[5]);
        this.mode.localTransform.scale = new Vector(parameter[6], parameter[7], parameter[8]);
    }
    recycleMode() {
        if (!this.mode) return;
        GameObjPool.despawn(this.mode);
        this.mode = null;
    }
    async updateMode(player, slotType, parameter) {
        if (!this.mode) {
            if (this.actionPropElement.AssetId && this.actionPropElement.AssetId.length > 0) ; else {
                if (this.actionPropElement.NextId > 0) {
                    if (this.actionPropElement.NextId == this.actionPropElement.ID) {
                        let actionPropElement = GameConfig.ActionProp.getElement(this.actionPropElement.NextId - 1);
                        if (actionPropElement.AssetId && actionPropElement.AssetId.length > 0) {
                            await this.spawnMode(player, actionPropElement.AssetId, actionPropElement.SlotType, actionPropElement.ModeOffsetParameter);
                        }
                    } else {
                        let actionPropElement = GameConfig.ActionProp.getElement(this.actionPropElement.NextId);
                        if (actionPropElement.AssetId && actionPropElement.AssetId.length > 0) {
                            await this.spawnMode(player, actionPropElement.AssetId, actionPropElement.SlotType, actionPropElement.ModeOffsetParameter);
                        }
                    }
                }
            }
        }
        player.character.attachToSlot(this.mode, slotType);
        this.mode.localTransform.position = new Vector(parameter[0], parameter[1], parameter[2]);
        this.mode.localTransform.rotation = new Rotation(parameter[3], parameter[4], parameter[5]);
        this.mode.localTransform.scale = new Vector(parameter[6], parameter[7], parameter[8]);
    }
    async spawnVehiclesMode(player, assetId, parameter) {
        await Utils.asyncDownloadAsset(`Character`);
        this.vehiclesMode = await GameObjPool.asyncSpawn(`Character`);
        await this.vehiclesMode.asyncReady();
        await Utils.asyncDownloadAsset(assetId);
        this.vehiclesMode.description.base.wholeBody = assetId;
        await this.vehiclesMode.asyncReady();
        this.vehiclesMode.collisionWithOtherCharacterEnabled = false;
        this.vehiclesMode.complexMovementEnabled = false;
        player.character.attachToSlot(this.vehiclesMode, mw.HumanoidSlotType.Root);
        this.vehiclesMode.localTransform.rotation = new Rotation(parameter[3], parameter[4], parameter[5]);
        this.vehiclesMode.localTransform.scale = new Vector(parameter[6], parameter[7], parameter[8]);
        this.vehiclesMode.localTransform.position = new Vector(parameter[0], parameter[1], parameter[2]);
    }
    recycleVehiclesMode() {
        if (!this.vehiclesMode) return;
        GameObjPool.despawn(this.vehiclesMode);
        this.vehiclesMode = null;
    }
    update() {
        if (!this.isUpdate) return;
        if (!this.player) return;
        if (!this.playerVelocity) this.playerVelocity = this.player.character.velocity;
        if (!this.isMove && (this.player.character.velocity.x != 0 || this.player.character.velocity.y != 0)) {
            this.isMove = true;
            this.playerMoveAction();
        } else if (this.isMove && (this.player.character.velocity.x == 0 && this.player.character.velocity.y == 0)) {
            this.isMove = false;
            this.playerIdleAction();
        }
    }
    stopPlayerVehiclesModeAnimation() {
        if (this.vehiclesModeAnimation) {
            this.vehiclesModeAnimation.stop();
            this.vehiclesModeAnimation = null;
        }
        if (this.playerAnimation) {
            this.playerAnimation.stop();
            this.playerAnimation = null;
        }
        if (this.playerStatce) {
            this.playerStatce.stop();
            this.playerStatce = null;
        }
    }
    async playerMoveAction() {
        this.stopPlayerVehiclesModeAnimation();
        if (this.vehiclesMode) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesChildMoveId);
            this.vehiclesModeAnimation = this.vehiclesMode.loadAnimation(this.actionPropElement.VehiclesChildMoveId);
            this.vehiclesModeAnimation.loop = 0;
            this.vehiclesModeAnimation.play();
        }
        if (this.actionPropElement.VehiclesWalkAnimationId && this.actionPropElement.VehiclesWalkAnimationId.length > 0) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesWalkAnimationId);
            this.playerAnimation = this.player.character.loadAnimation(this.actionPropElement.VehiclesWalkAnimationId);
            this.playerAnimation.slot = this.actionPropElement.VehiclesWalkAnimationSlot;
            this.playerAnimation.loop = 0;
            this.playerAnimation.play();
        }
        if (this.actionPropElement.VehiclesWalkStanceId && this.actionPropElement.VehiclesWalkStanceId.length > 0) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesWalkStanceId);
            this.playerStatce = this.player.character.loadSubStance(this.actionPropElement.VehiclesWalkStanceId);
            this.playerStatce.blendMode = this.actionPropElement.VehiclesWalkStanceSlot - 1;
            this.playerStatce.play();
        }
    }
    async playerIdleAction() {
        this.stopPlayerVehiclesModeAnimation();
        if (this.vehiclesMode) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesChildIdleId);
            this.vehiclesModeAnimation = this.vehiclesMode.loadAnimation(this.actionPropElement.VehiclesChildIdleId);
            this.vehiclesModeAnimation.loop = 0;
            this.vehiclesModeAnimation.play();
        }
        if (this.actionPropElement.VehiclesIdleAnimationId && this.actionPropElement.VehiclesIdleAnimationId.length > 0) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesIdleAnimationId);
            this.playerAnimation = this.player.character.loadAnimation(this.actionPropElement.VehiclesIdleAnimationId);
            this.playerAnimation.slot = this.actionPropElement.VehiclesIdleAnimationSlot;
            this.playerAnimation.loop = 0;
            this.playerAnimation.play();
        }
        if (this.actionPropElement.VehiclesIdleStanceId && this.actionPropElement.VehiclesIdleStanceId.length > 0) {
            await Utils.asyncDownloadAsset(this.actionPropElement.VehiclesIdleStanceId);
            this.playerStatce = this.player.character.loadSubStance(this.actionPropElement.VehiclesIdleStanceId);
            this.playerStatce.blendMode = this.actionPropElement.VehiclesIdleStanceSlot - 1;
            this.playerStatce.play();
        }
    }
    switchFlyState(player) {
        if (player.character.getCurrentState() != mw.CharacterStateType.Flying) {
            player.character.changeState(mw.CharacterStateType.Flying);
        }
    }
    switchRunState(player) {
        if (player.character.getCurrentState() != mw.CharacterStateType.Running) {
            player.character.changeState(mw.CharacterStateType.Running);
        }
    }
    setMaterial(materialId) {
        if (!this.mode) return;
        this.originalMaterialId = materialId;
        this.mode.setMaterial(materialId);
    }
    resetMaterial() {
        if (!this.mode) return;
        if (!this.originalMaterialId) return;
        this.mode.resetMaterial();
        this.originalMaterialId = null;
    }
    async playAnimation(player, assetId, slotType, parameter) {
        await Utils.asyncDownloadAsset(assetId);
        this.animation = player.character.loadAnimation(assetId);
        if (slotType) this.animation.slot = slotType;
        this.animation.speed = parameter[0];
        this.animation.loop = parameter[1];
        this.animation.play();
    }
    stopAnimation() {
        if (!this.animation) return;
        this.animation?.stop();
        this.animation = null;
    }
    async placingItems(player, actionPropElement) {
        if (!player || !actionPropElement) return;
        let playAnimationTime = 1;
        if (actionPropElement.AnimationParameter && actionPropElement.AnimationParameter.length > 0) {
            playAnimationTime = actionPropElement.AnimationParameter[0];
        }
        await TimeUtil.delaySecond(playAnimationTime);
        if (!player || !actionPropElement) return;
        let delayModeOffsetParameter = actionPropElement.DelayModeOffsetParameter;
        let playerPos = player.character.worldTransform.position;
        let offsetZ = player.character.collisionExtent.z / 2;
        let playerForward = player.character.worldTransform.getForwardVector();
        let itemPos = new Vector(playerPos.x + playerForward.x * 40, playerPos.y + playerForward.y * 40, playerPos.z + playerForward.z * 40 - offsetZ);
        let itemRot = new mw.Rotation(new mw.Vector(playerForward.x * delayModeOffsetParameter[4], playerForward.y * delayModeOffsetParameter[4], playerForward.z * delayModeOffsetParameter[4] - 90));
        let itemSca = new mw.Vector(delayModeOffsetParameter[6], delayModeOffsetParameter[7], delayModeOffsetParameter[8]);
        let delayAssetId = actionPropElement.DelayAssetId;
        await Utils.asyncDownloadAsset(delayAssetId);
        let itemMode = await GameObjPool.asyncSpawn(delayAssetId);
        await itemMode.asyncReady();
        itemMode.worldTransform.position = itemPos;
        itemMode.worldTransform.rotation = itemRot;
        itemMode.worldTransform.scale = itemSca;
        let delayModeEffectId = null;
        let delayModeEffectAssetId = actionPropElement.DelayModeEffectId;
        if (delayModeEffectAssetId && delayModeEffectAssetId.length > 0) {
            await Utils.asyncDownloadAsset(delayModeEffectAssetId);
            let delayModeEffectOffsetParameter = actionPropElement.DelayModeEffectOffsetParameter;
            delayModeEffectId = EffectService.playOnGameObject(delayModeEffectAssetId, itemMode, {
                loopCount: 0,
                position: new mw.Vector(delayModeEffectOffsetParameter[0], delayModeEffectOffsetParameter[1], delayModeEffectOffsetParameter[2]),
                rotation: new mw.Rotation(delayModeEffectOffsetParameter[3], delayModeEffectOffsetParameter[4], delayModeEffectOffsetParameter[5]),
                scale: new mw.Vector(delayModeEffectOffsetParameter[6], delayModeEffectOffsetParameter[7], delayModeEffectOffsetParameter[8])
            });
        }
        let delayParameter = actionPropElement.DelayParameter;
        let delayTime = delayParameter[0];
        let delayCount = delayParameter[1];
        let delayInterval = delayParameter[2];
        await TimeUtil.delaySecond(delayTime - playAnimationTime);
        for (let i = 0; i < delayCount; ++i) {
            await new Promise((resolve => {
                setTimeout((async () => {
                    let DelayEffectAssetId = actionPropElement.DelayEffectId;
                    if (DelayEffectAssetId && DelayEffectAssetId.length > 0) {
                        await Utils.asyncDownloadAsset(DelayEffectAssetId);
                        let delayEffectOffsetParameter = actionPropElement.DelayEffectOffsetParameter;
                        EffectService.playAtPosition(DelayEffectAssetId, itemMode.worldTransform.position, {
                            loopCount: 1,
                            rotation: itemMode.worldTransform.rotation,
                            scale: new mw.Vector(delayEffectOffsetParameter[6], delayEffectOffsetParameter[7], delayEffectOffsetParameter[8])
                        });
                        let delayModeSoundId = actionPropElement.DelayModeSoundId;
                        if (delayModeSoundId && delayModeSoundId.length > 0) {
                            await Utils.asyncDownloadAsset(delayModeSoundId);
                            let delayModeSoundParameter = actionPropElement.DelayModeSoundParameter;
                            SoundService.play3DSound(delayModeSoundId, itemMode.worldTransform.position, 1, delayModeSoundParameter[0], {
                                radius: delayModeSoundParameter[1],
                                falloffDistance: delayModeSoundParameter[1] * 1.2
                            });
                        }
                    }
                    return resolve();
                }), delayInterval * 1e3);
            }));
        }
        if (actionPropElement.ID != 30004) await TimeUtil.delaySecond(delayInterval);
        if (delayModeEffectId) EffectService.stop(delayModeEffectId);
        GameObjPool.despawn(itemMode);
    }
    async playEffect(assetId, loop, parameter) {
        await Utils.asyncDownloadAsset(assetId);
        this.effectId = EffectService.playOnGameObject(assetId, this.mode, {
            loopCount: loop,
            position: new mw.Vector(parameter[0], parameter[1], parameter[2]),
            rotation: new mw.Rotation(parameter[3], parameter[4], parameter[5]),
            scale: new mw.Vector(parameter[6], parameter[7], parameter[8])
        });
    }
    stopEffect() {
        if (!this.effectId) return;
        EffectService.stop(this.effectId);
        this.effectId = null;
    }
    async play3DSound(assetId, parameter) {
        await Utils.asyncDownloadAsset(assetId);
        this.soundId = SoundService.play3DSound(assetId, this.mode, parameter[2], parameter[1], {
            radius: parameter[0],
            falloffDistance: parameter[0] * 1.2
        });
    }
    stop3DSound() {
        if (!this.soundId) return;
        SoundService.stop3DSound(this.soundId);
        this.soundId = null;
    }
}

class PlayerInteract {
    constructor() {
        this.interactObj = null;
        this.npc = null;
        this.npcSubStance = null;
        this.singleAni = null;
        this.playerSubStance = null;
    }
    async initNpc() {
        if (this.npc) return;
        this.npc = await mw.GameObject.asyncSpawn("Character");
        this.npc.collisionWithOtherCharacterEnabled = false;
        await this.npc.asyncReady();
    }
    async playSingleAni(player, actionData) {
        await Utils.asyncDownloadAsset(actionData.assetId);
        this.singleAni = player.character.loadAnimation(actionData.assetId);
        this.singleAni.loop = actionData.loop == 0 ? 1 : 0;
        let isPlaySuccess = this.singleAni.play();
        console.error(`isPlaySuccess:${isPlaySuccess}`);
        return isPlaySuccess;
    }
    async playDoubleAni(player, actionData) {
        await this.initNpc();
        this.npc.setVisibility(true, true);
        player.character.collisionWithOtherCharacterEnabled = false;
        player.character.movementEnabled = false;
        this.npc.worldTransform.position = player.character.worldTransform.position.add(actionData.pos);
        let tmpRot = mw.Rotation.zero;
        mw.Rotation.add(player.character.worldTransform.rotation, actionData.rot, tmpRot);
        this.npc.worldTransform.rotation = tmpRot;
        let aniStr = actionData.assetId.split("-");
        await Utils.asyncDownloadAsset(aniStr[0]);
        await Utils.asyncDownloadAsset(aniStr[1]);
        this.playerSubStance = player.character.loadSubStance(aniStr[0]);
        this.playerSubStance.play();
        this.npcSubStance = this.npc.loadSubStance(aniStr[1]);
        this.npcSubStance.play();
        return true;
    }
    async interact(player, actionData) {
        return new Promise((async resolve => {
            await this.initNpc();
            this.npc.setVisibility(true, true);
            player.character.collisionWithOtherCharacterEnabled = false;
            this.interactObj = await mw.GameObject.asyncSpawn("Interactor");
            await this.interactObj.asyncReady();
            player.character.attachToSlot(this.interactObj, mw.HumanoidSlotType.FaceOrnamental);
            this.interactObj.onEnter.add((async () => {
                let aniStr = actionData.assetId.split("-");
                await Utils.asyncDownloadAsset(aniStr[0]);
                await Utils.asyncDownloadAsset(aniStr[1]);
                this.playerSubStance = player.character.loadSubStance(aniStr[0]);
                this.playerSubStance.play();
                this.npcSubStance = this.npc.loadSubStance(aniStr[1]);
                this.npcSubStance.play();
                this.interactObj.localTransform.position = actionData.pos;
                this.interactObj.localTransform.rotation = actionData.rot;
                return resolve(true);
            }));
            this.interactObj.enter(this.npc, mw.HumanoidSlotType.Buttocks);
        }));
    }
    async clearInteractor(player) {
        if (this.singleAni) {
            this.singleAni?.stop();
            this.singleAni = null;
        }
        if (this.playerSubStance) {
            this.playerSubStance.stop();
            this.playerSubStance = null;
        }
        if (this.npcSubStance) {
            this.npcSubStance.stop();
            this.npcSubStance = null;
            this.npc.setVisibility(false, true);
        }
        return await this.leaveInteract(player);
    }
    async leaveInteract(player) {
        return new Promise((resolve => {
            if (!this.interactObj) return resolve(true);
            this.interactObj.onLeave.add((async () => {
                this.interactObj.parent = null;
                this.interactObj.destroy();
                this.interactObj = null;
                this.npc.parent = null;
                this.npc.setVisibility(false, true);
                if (!player.character.collisionWithOtherCharacterEnabled) player.character.collisionWithOtherCharacterEnabled = true;
                await TimeUtil.delaySecond(1);
                return resolve(true);
            }));
            this.interactObj.leave();
        }));
    }
}

var foreign91 = Object.freeze({
    __proto__: null,
    PlayerBag: PlayerBag,
    PlayerGlide: PlayerGlide,
    PlayerInteract: PlayerInteract,
    default: DanMuModuleS
});

class MallData extends Subdata {}

class TabIdData {
    constructor() {
        this.tabId = 0;
        this.isOn = false;
        this.tabIdDataMap = new Map;
    }
}

class ColorPickTab2Data {
    constructor(text, color) {
        this.text = null;
        this.color = null;
        this.text = text;
        this.color = color;
    }
}

class AssetIdInfoData {
    constructor(assetId, slotType, slotIndex) {
        this.assetId = null;
        this.slotType = -1;
        this.slotIndex = -1;
        this.assetId = assetId;
        this.slotType = slotType;
        this.slotIndex = slotIndex;
    }
}

var TabType;

(function(TabType) {
    TabType[TabType["None"] = 0] = "None";
    TabType[TabType["Tab1"] = 1] = "Tab1";
    TabType[TabType["Tab2"] = 2] = "Tab2";
    TabType[TabType["Tab3"] = 3] = "Tab3";
})(TabType || (TabType = {}));

var Tab1Type;

(function(Tab1Type) {
    Tab1Type[Tab1Type["Ta1_None"] = 0] = "Ta1_None";
    Tab1Type[Tab1Type["Tab1_Appearance"] = 1] = "Tab1_Appearance";
    Tab1Type[Tab1Type["Tab1_Clothing"] = 2] = "Tab1_Clothing";
    Tab1Type[Tab1Type["Tab1_Collection"] = 3] = "Tab1_Collection";
    Tab1Type[Tab1Type["Tab1_Test"] = 4] = "Tab1_Test";
})(Tab1Type || (Tab1Type = {}));

var Tab2Type;

(function(Tab2Type) {
    Tab2Type[Tab2Type["Tab2_None"] = 0] = "Tab2_None";
    Tab2Type[Tab2Type["Tab2_BodyType"] = 101] = "Tab2_BodyType";
    Tab2Type[Tab2Type["Tab2_SkinTone"] = 102] = "Tab2_SkinTone";
    Tab2Type[Tab2Type["Tab2_Face"] = 103] = "Tab2_Face";
    Tab2Type[Tab2Type["Tab2_Eyes"] = 104] = "Tab2_Eyes";
    Tab2Type[Tab2Type["Tab2_Eyebrows"] = 105] = "Tab2_Eyebrows";
    Tab2Type[Tab2Type["Tab2_Makeup"] = 106] = "Tab2_Makeup";
    Tab2Type[Tab2Type["Tab2_Expression"] = 107] = "Tab2_Expression";
    Tab2Type[Tab2Type["Tab2_Outfit"] = 108] = "Tab2_Outfit";
    Tab2Type[Tab2Type["Tab2_Hair"] = 109] = "Tab2_Hair";
    Tab2Type[Tab2Type["Tab2_Top"] = 110] = "Tab2_Top";
    Tab2Type[Tab2Type["Tab2_Bottom"] = 111] = "Tab2_Bottom";
    Tab2Type[Tab2Type["Tab2_Shoes"] = 112] = "Tab2_Shoes";
    Tab2Type[Tab2Type["Tab2_Gloves"] = 113] = "Tab2_Gloves";
    Tab2Type[Tab2Type["Tab2_Pet"] = 114] = "Tab2_Pet";
    Tab2Type[Tab2Type["Tab2_Accessory"] = 115] = "Tab2_Accessory";
    Tab2Type[Tab2Type["Tab2_BodyType_Collection"] = 501] = "Tab2_BodyType_Collection";
    Tab2Type[Tab2Type["Tab2_SkinTone_Collection"] = 502] = "Tab2_SkinTone_Collection";
    Tab2Type[Tab2Type["Tab2_Face_Collection"] = 503] = "Tab2_Face_Collection";
    Tab2Type[Tab2Type["Tab2_Eyes_Collection"] = 504] = "Tab2_Eyes_Collection";
    Tab2Type[Tab2Type["Tab2_Eyebrows_Collection"] = 505] = "Tab2_Eyebrows_Collection";
    Tab2Type[Tab2Type["Tab2_Makeup_Collection"] = 506] = "Tab2_Makeup_Collection";
    Tab2Type[Tab2Type["Tab2_Expression_Collection"] = 507] = "Tab2_Expression_Collection";
    Tab2Type[Tab2Type["Tab2_Outfit_Collection"] = 508] = "Tab2_Outfit_Collection";
    Tab2Type[Tab2Type["Tab2_Hair_Collection"] = 509] = "Tab2_Hair_Collection";
    Tab2Type[Tab2Type["Tab2_Top_Collection"] = 510] = "Tab2_Top_Collection";
    Tab2Type[Tab2Type["Tab2_Bottom_Collection"] = 511] = "Tab2_Bottom_Collection";
    Tab2Type[Tab2Type["Tab2_Gloves_Collection"] = 512] = "Tab2_Gloves_Collection";
    Tab2Type[Tab2Type["Tab2_Shoes_Collection"] = 513] = "Tab2_Shoes_Collection";
    Tab2Type[Tab2Type["Tab2_Pet_Collection"] = 514] = "Tab2_Pet_Collection";
    Tab2Type[Tab2Type["Tab2_Accessory_Collection"] = 515] = "Tab2_Accessory_Collection";
})(Tab2Type || (Tab2Type = {}));

var Tab3Type;

(function(Tab3Type) {
    Tab3Type[Tab3Type["Tab3_None"] = 0] = "Tab3_None";
    Tab3Type[Tab3Type["Tab3_PupilStyle"] = 1001] = "Tab3_PupilStyle";
    Tab3Type[Tab3Type["Tab3_Lens"] = 1002] = "Tab3_Lens";
    Tab3Type[Tab3Type["Tab3_UpperHighlight"] = 1003] = "Tab3_UpperHighlight";
    Tab3Type[Tab3Type["Tab3_LowerHighlight"] = 1004] = "Tab3_LowerHighlight";
    Tab3Type[Tab3Type["Tab3_Eyelashes"] = 1005] = "Tab3_Eyelashes";
    Tab3Type[Tab3Type["Tab3_Eyeshadow"] = 1006] = "Tab3_Eyeshadow";
    Tab3Type[Tab3Type["Tab3_Blush"] = 1007] = "Tab3_Blush";
    Tab3Type[Tab3Type["Tab3_LipMakeup"] = 1008] = "Tab3_LipMakeup";
    Tab3Type[Tab3Type["Tab3_FaceTattoo"] = 1009] = "Tab3_FaceTattoo";
    Tab3Type[Tab3Type["Tab3_FullHair"] = 1010] = "Tab3_FullHair";
    Tab3Type[Tab3Type["Tab3_FrontHair"] = 1011] = "Tab3_FrontHair";
    Tab3Type[Tab3Type["Tab3_BackHair"] = 1012] = "Tab3_BackHair";
    Tab3Type[Tab3Type["Tab3_LeftHand"] = 1013] = "Tab3_LeftHand";
    Tab3Type[Tab3Type["Tab3_RightHand"] = 1014] = "Tab3_RightHand";
    Tab3Type[Tab3Type["Tab3_Back"] = 1015] = "Tab3_Back";
    Tab3Type[Tab3Type["Tab3_Ear"] = 1016] = "Tab3_Ear";
    Tab3Type[Tab3Type["Tab3_Face"] = 1017] = "Tab3_Face";
    Tab3Type[Tab3Type["Tab3_Hip"] = 1018] = "Tab3_Hip";
    Tab3Type[Tab3Type["Tab3_Shoulder"] = 1019] = "Tab3_Shoulder";
    Tab3Type[Tab3Type["Tab3_Effects"] = 1020] = "Tab3_Effects";
    Tab3Type[Tab3Type["Tab3_Trailing"] = 1021] = "Tab3_Trailing";
    Tab3Type[Tab3Type["Tab3_DailyStyling_Suit1"] = 1022] = "Tab3_DailyStyling_Suit1";
    Tab3Type[Tab3Type["Tab3_MuppetStyling_Suit"] = 1023] = "Tab3_MuppetStyling_Suit";
    Tab3Type[Tab3Type["Tab3_HeroStyling_Suit"] = 1024] = "Tab3_HeroStyling_Suit";
    Tab3Type[Tab3Type["Tab3_FantasyModeling_Suit"] = 1025] = "Tab3_FantasyModeling_Suit";
    Tab3Type[Tab3Type["Tab3_HolidayStyling_Suit"] = 1026] = "Tab3_HolidayStyling_Suit";
    Tab3Type[Tab3Type["Tab3_ScienceFictionStyling_Suit"] = 1027] = "Tab3_ScienceFictionStyling_Suit";
    Tab3Type[Tab3Type["Tab3_AncientMolding_Suit"] = 1028] = "Tab3_AncientMolding_Suit";
    Tab3Type[Tab3Type["Tab3_LongSinglePiece_Top"] = 1029] = "Tab3_LongSinglePiece_Top";
    Tab3Type[Tab3Type["Tab3_ShortJacket_Top"] = 1030] = "Tab3_ShortJacket_Top";
    Tab3Type[Tab3Type["Tab3_ShortSinglePiece_Top"] = 1031] = "Tab3_ShortSinglePiece_Top";
    Tab3Type[Tab3Type["Tab3_Suit_Top"] = 1032] = "Tab3_Suit_Top";
    Tab3Type[Tab3Type["Tab3_ALongCoat_Top"] = 1033] = "Tab3_ALongCoat_Top";
    Tab3Type[Tab3Type["Tab3_ShortSkirt_Bottom"] = 1034] = "Tab3_ShortSkirt_Bottom";
    Tab3Type[Tab3Type["Tab3_LongPants_Bottom"] = 1035] = "Tab3_LongPants_Bottom";
    Tab3Type[Tab3Type["Tab3_Shorts_Bottom"] = 1036] = "Tab3_Shorts_Bottom";
    Tab3Type[Tab3Type["Tab3_LongSkirt_Bottom"] = 1037] = "Tab3_LongSkirt_Bottom";
    Tab3Type[Tab3Type["Tab3_Tights_Bottom"] = 1038] = "Tab3_Tights_Bottom";
    Tab3Type[Tab3Type["Tab3_Gloves_Gloves"] = 1039] = "Tab3_Gloves_Gloves";
    Tab3Type[Tab3Type["Tab3_Accessories_Gloves"] = 1040] = "Tab3_Accessories_Gloves";
    Tab3Type[Tab3Type["Tab3_Everyday_Shoes"] = 1041] = "Tab3_Everyday_Shoes";
    Tab3Type[Tab3Type["Tab3_Boots_Shoes"] = 1042] = "Tab3_Boots_Shoes";
    Tab3Type[Tab3Type["Tab3_FootCover_Shoes"] = 1043] = "Tab3_FootCover_Shoes";
    Tab3Type[Tab3Type["Tab3_NakedDress_Shoes"] = 1044] = "Tab3_NakedDress_Shoes";
    Tab3Type[Tab3Type["Tab3_HighHeels_Shoes"] = 1045] = "Tab3_HighHeels_Shoes";
    Tab3Type[Tab3Type["Tab3_SportsShoes_Shoes"] = 1046] = "Tab3_SportsShoes_Shoes";
    Tab3Type[Tab3Type["Tab3_DailyStyling_Suit2"] = 1047] = "Tab3_DailyStyling_Suit2";
    Tab3Type[Tab3Type["Tab3_BackPet"] = 1048] = "Tab3_BackPet";
    Tab3Type[Tab3Type["Tab3_PupilStyle_Collection"] = 2001] = "Tab3_PupilStyle_Collection";
    Tab3Type[Tab3Type["Tab3_Lens_Collection"] = 2002] = "Tab3_Lens_Collection";
    Tab3Type[Tab3Type["Tab3_UpperHighlight_Collection"] = 2003] = "Tab3_UpperHighlight_Collection";
    Tab3Type[Tab3Type["Tab3_LowerHighlight_Collection"] = 2004] = "Tab3_LowerHighlight_Collection";
    Tab3Type[Tab3Type["Tab3_Eyelashes_Collection"] = 2005] = "Tab3_Eyelashes_Collection";
    Tab3Type[Tab3Type["Tab3_Eyeshadow_Collection"] = 2006] = "Tab3_Eyeshadow_Collection";
    Tab3Type[Tab3Type["Tab3_Blush_Collection"] = 2007] = "Tab3_Blush_Collection";
    Tab3Type[Tab3Type["Tab3_LipMakeup_Collection"] = 2008] = "Tab3_LipMakeup_Collection";
    Tab3Type[Tab3Type["Tab3_FaceTattoo_Collection"] = 2009] = "Tab3_FaceTattoo_Collection";
    Tab3Type[Tab3Type["Tab3_FullHair_Collection"] = 2010] = "Tab3_FullHair_Collection";
    Tab3Type[Tab3Type["Tab3_FrontHair_Collection"] = 2011] = "Tab3_FrontHair_Collection";
    Tab3Type[Tab3Type["Tab3_BackHair_Collection"] = 2012] = "Tab3_BackHair_Collection";
    Tab3Type[Tab3Type["Tab3_LeftHand_Collection"] = 2013] = "Tab3_LeftHand_Collection";
    Tab3Type[Tab3Type["Tab3_RightHand_Collection"] = 2014] = "Tab3_RightHand_Collection";
    Tab3Type[Tab3Type["Tab3_Back_Collection"] = 2015] = "Tab3_Back_Collection";
    Tab3Type[Tab3Type["Tab3_Ear_Collection"] = 2016] = "Tab3_Ear_Collection";
    Tab3Type[Tab3Type["Tab3_Face_Collection"] = 2017] = "Tab3_Face_Collection";
    Tab3Type[Tab3Type["Tab3_Hip_Collection"] = 2018] = "Tab3_Hip_Collection";
    Tab3Type[Tab3Type["Tab3_Shoulder_Collection"] = 2019] = "Tab3_Shoulder_Collection";
    Tab3Type[Tab3Type["Tab3_Effects_Collection"] = 2020] = "Tab3_Effects_Collection";
    Tab3Type[Tab3Type["Tab3_Trailing_Collection"] = 2021] = "Tab3_Trailing_Collection";
})(Tab3Type || (Tab3Type = {}));

var foreign105 = Object.freeze({
    __proto__: null,
    AssetIdInfoData: AssetIdInfoData,
    ColorPickTab2Data: ColorPickTab2Data,
    get Tab1Type() {
        return Tab1Type;
    },
    get Tab2Type() {
        return Tab2Type;
    },
    get Tab3Type() {
        return Tab3Type;
    },
    TabIdData: TabIdData,
    get TabType() {
        return TabType;
    },
    default: MallData
});

var CameraManager_1;

let CameraManager = CameraManager_1 = class CameraManager extends Script {
    constructor() {
        super(...arguments);
        this.wfzCameraName = `WFZCamera`;
        this.cameraType = CameraManagerType.Body;
        this.isRotCharacter = false;
        this.isRotWFZCamera = false;
        this.mainCamera = null;
        this.defaultRotation = mw.Rotation.zero;
        this.targetCharacter = null;
        this.oldSlotPos = mw.Vector.zero;
        this.cameraData = new CameraData;
        this.E_Head_H = new CameraData;
        this.E_Body_H = new CameraData;
        this.E_Head_V = new CameraData;
        this.E_Body_V = new CameraData;
        this.lastTouchPos = mw.Vector2.zero;
        this.onTouchBegin = (index, location, touchType) => {
            this.lastTouchPos = location;
        };
        this.onTouchMove = (index, loc, type) => {
            if (this.isWFZCamera && this.targetCharacter) {
                if (index == 0) {
                    let rot = this.wfzCamera.parent.worldTransform.rotation;
                    let z = loc.x - this.lastTouchPos.x;
                    this.lastTouchPos = loc;
                    if (Math.abs(z) > 80) return;
                    if (this.isRotCharacter) {
                        const rot = this.targetCharacter.worldTransform.rotation;
                        rot.z -= z;
                        this.targetCharacter.worldTransform.rotation = rot;
                    }
                    if (this.isRotWFZCamera) this.worldRotation([ rot.x, rot.y, rot.z + z ]);
                }
            }
        };
    }
    static get instance() {
        return CameraManager_1.cameraManager;
    }
    get wfzCamera() {
        return this.gameObject;
    }
    get isWFZCamera() {
        try {
            return Camera.currentCamera?.getCustomProperty(this.wfzCameraName) == this.wfzCameraName;
        } catch (error) {
            return false;
        }
    }
    static async asyncReady() {
        while (!this.cameraManager) {
            await TimeUtil.delaySecond(.1);
        }
    }
    onStart() {
        this.initData();
        this.gameObject.asyncReady().then((() => {
            this.gameObject.setCustomProperty(this.wfzCameraName, this.wfzCameraName);
            CameraManager_1.cameraManager = this;
            this.useUpdate = true;
        }));
        Event.addLocalListener(EventType.SwitchCamera, this.changeCameraType2.bind(this));
    }
    onUpdate(dt) {
        this.follow();
    }
    switchWFZCamera(isOpenCamera, targetCharacter = null, isRotWFZCamera = false, isRotCharacter = false) {
        this.targetCharacter = targetCharacter;
        if (targetCharacter?.worldTransform?.rotation) this.defaultRotation = targetCharacter?.worldTransform?.rotation;
        this.isRotWFZCamera = isRotWFZCamera;
        this.isRotCharacter = isRotCharacter;
        TouchInputUtil.getInstance().onTouchBegin.remove(this.onTouchBegin.bind(this));
        TouchInputUtil.getInstance().onTouchMove.remove(this.onTouchMove.bind(this));
        if (isOpenCamera) {
            if (isRotWFZCamera || isRotCharacter) {
                TouchInputUtil.getInstance().onTouchBegin.add(this.onTouchBegin.bind(this));
                TouchInputUtil.getInstance().onTouchMove.add(this.onTouchMove.bind(this));
            }
            if (this.isWFZCamera) return;
            this.mainCamera = Camera.currentCamera;
            Camera.switch(this.wfzCamera);
            const size = mw.getViewportSize();
            if (size.x >= size.y) {
                this.wfzCamera.aspectRatioAxisConstraint = mw.AspectRatioAxisConstraint.MaintainXFOV;
            } else {
                this.wfzCamera.aspectRatioAxisConstraint = mw.AspectRatioAxisConstraint.MaintainYFOV;
            }
        } else {
            if (this.mainCamera && this.isWFZCamera) {
                Camera.switch(this.mainCamera);
                this.mainCamera = null;
            }
        }
        this.useUpdate = isOpenCamera;
    }
    worldRotation(rotation) {
        this.wfzCamera.parent.worldTransform.rotation = new mw.Rotation(rotation[0], rotation[1], rotation[2]);
    }
    follow() {
        if (!this.targetCharacter) return;
        let slotPos = CameraData.getTargetPos(this.targetCharacter, this.cameraData);
        if (!slotPos) return;
        this.oldSlotPos = slotPos;
        this.wfzCamera.parent.worldTransform.position = slotPos;
    }
    setData(cameraData) {
        this.wfzCamera.springArm.length = cameraData.l;
        let rot = this.wfzCamera.localTransform.rotation;
        this.wfzCamera.fov = cameraData.fov;
        let rotY = cameraData.fov * cameraData.v;
        this.wfzCamera.localTransform.rotation = new mw.Rotation(rot.x, rotY, cameraData.fov * cameraData.h);
        if (this.targetCharacter) this.wfzCamera.parent.worldTransform.rotation = new mw.Rotation(0, 0, this.targetCharacter.worldTransform.rotation.z + 180);
    }
    setValue(name, value) {
        this.cameraData[name] = value;
        this.setData(this.cameraData);
    }
    initData() {
        this.E_Body_H.l = 500;
        this.E_Body_H.fov = 45;
        this.E_Body_H.targetType = TargetType.WorldPos;
        this.E_Body_H.h = .25;
        this.E_Body_H.v = 0;
        this.E_Head_V = {
            h: 0,
            v: -.1,
            targetType: 1,
            slot: 1,
            l: 260,
            fov: 45,
            offset: Vector.zero
        };
        this.E_Body_V = {
            h: 0,
            v: -.13,
            targetType: 2,
            slot: 1,
            l: 2500,
            fov: 18,
            offset: Vector.zero
        };
    }
    changeCameraType2(avatarCameraType) {
        if (this.targetCharacter?.worldTransform) this.targetCharacter.worldTransform.rotation = this.defaultRotation;
        if (CameraManagerType[avatarCameraType]) {
            this.cameraType = avatarCameraType;
        } else if (CameraManagerType[this.cameraType]) ; else {
            this.cameraType = CameraManagerType.Body;
        }
        let cameraData = this.getCameraDataByType(avatarCameraType);
        this.cameraData.l = cameraData.l;
        this.cameraData.fov = cameraData.fov;
        this.cameraData.slot = cameraData.slot;
        this.cameraData.targetType = cameraData.targetType;
        this.cameraData.h = cameraData.h;
        this.cameraData.v = cameraData.v;
        this.cameraData.offset = cameraData.offset;
        this.setData(cameraData);
    }
    getCameraDataByType(avatarCameraType) {
        let size = mw.getViewportSize();
        if (size.x < size.y) {
            switch (avatarCameraType) {
              case CameraManagerType.Head:
                return this.E_Head_V;

              default:
                return this.E_Body_V;
            }
        } else {
            switch (avatarCameraType) {
              case CameraManagerType.Head:
                return this.E_Head_H;

              default:
                return this.E_Body_H;
            }
        }
    }
};

CameraManager.cameraManager = null;

CameraManager = CameraManager_1 = __decorate([ Component ], CameraManager);

var CameraManager$1 = CameraManager;

var TargetType;

(function(TargetType) {
    TargetType[TargetType["slot"] = 1] = "slot";
    TargetType[TargetType["WorldPos"] = 2] = "WorldPos";
})(TargetType || (TargetType = {}));

class CameraData {
    constructor() {
        this.h = .25;
        this.v = 0;
        this.targetType = TargetType.slot;
        this.slot = mw.HumanoidSlotType.Head;
        this.l = 250;
        this.fov = 45;
        this.offset = Vector.zero;
    }
    static getTargetPos(char, data) {
        let pos = data.offset.clone();
        switch (data.targetType) {
          case TargetType.slot:
            let v3 = char?.getSlotWorldPosition(data.slot);
            if (v3) pos.add(v3);
            break;

          case TargetType.WorldPos:
            pos.add(char.worldTransform.position);
            break;
        }
        return pos;
    }
}

var foreign139 = Object.freeze({
    __proto__: null,
    default: CameraManager$1
});

class Mall {
    static async copyCharacterSlot(fromCharacter, toCharacter) {
        if (!fromCharacter || !toCharacter) return;
        let slotDataArrStr = this.getSlotDataArrStr(fromCharacter);
        await this.setSlotByDataArrStr(toCharacter, slotDataArrStr);
    }
    static getSlotDataArrStr(character) {
        let slot = character.description.advance.slotAndDecoration.slot;
        let dataStrArr = [];
        for (let i = 0; i < slot.length; ++i) {
            for (let j = 0; j < slot[i].decoration.length; ++j) {
                let decoration = slot[i].decoration[j];
                if (!decoration.attachmentAssetId || !decoration.attachmentGameObject || !decoration.attachmentOffset) continue;
                let transform = new Transform;
                transform.position = new Vector(Number(decoration.attachmentOffset.position.x.toFixed(3)), Number(decoration.attachmentOffset.position.y.toFixed(3)), Number(decoration.attachmentOffset.position.z.toFixed(3)));
                transform.rotation = new Rotation(Number(decoration.attachmentOffset.rotation.x.toFixed(3)), Number(decoration.attachmentOffset.rotation.y.toFixed(3)), Number(decoration.attachmentOffset.rotation.z.toFixed(3)));
                transform.scale = new Vector(Number(decoration.attachmentOffset.scale.x.toFixed(3)), Number(decoration.attachmentOffset.scale.y.toFixed(3)), Number(decoration.attachmentOffset.scale.z.toFixed(3)));
                let str = `${i}${this.slotSplit}${decoration.attachmentAssetId}${this.slotSplit}${transform.toString()}`;
                dataStrArr.push(str);
            }
        }
        return dataStrArr.length > 0 ? dataStrArr : null;
    }
    static async setSlotByDataArrStr(character, strArr) {
        if (!strArr || strArr?.length == 0) return;
        for (let i = 0; i < strArr.length; ++i) {
            let [slotIndexStr, assetId, transform] = strArr[i].split(this.slotSplit);
            let slotIndex = Number(slotIndexStr);
            if (slotIndex >= 0 && slotIndex < character.description.advance.slotAndDecoration.slot.length) {
                await this.setDecoraBase(character, slotIndex, assetId, Transform.fromString(transform));
            }
        }
        await character.asyncReady();
    }
    static async setDecoraBase(character, slotIndex, assetId, offset) {
        await Utils.asyncDownloadAsset(assetId);
        let model = await GameObject.asyncSpawn(assetId);
        if (!model) return false;
        model.setCollision(mw.PropertyStatus.Off, true);
        character.description.advance.slotAndDecoration.slot[slotIndex].decoration.add(model, offset);
        return true;
    }
    static async copyCharacterClothingAndHair(fromCharacter, toCharacter) {
        if (!fromCharacter || !toCharacter) return;
        let fromClothing = fromCharacter.description.advance.clothing;
        let fromHair = fromCharacter.description.advance.hair;
        let toClothing = toCharacter.description.advance.clothing;
        let toHair = toCharacter.description.advance.hair;
        let frontHairStyle = fromHair?.frontHair?.style;
        if (frontHairStyle) {
            await Utils.asyncDownloadAsset(frontHairStyle);
            toHair.frontHair.style = frontHairStyle;
        }
        let frontHairColor = fromHair?.frontHair?.color?.color;
        if (frontHairColor) toHair.frontHair.color.color = frontHairColor;
        let frontHairGradientColor = fromHair?.frontHair?.color?.gradientColor;
        if (frontHairGradientColor) toHair.frontHair.color.gradientColor = frontHairGradientColor;
        let frontHairGradientArea = fromHair?.frontHair?.color?.gradientArea;
        if (frontHairGradientArea) toHair.frontHair.color.gradientArea = frontHairGradientArea;
        let frontHairHighlightStyle = fromHair?.frontHair?.highlight?.highlightStyle;
        if (frontHairHighlightStyle) toHair.frontHair.highlight.highlightStyle = frontHairHighlightStyle;
        let frontHairAccessories = fromHair?.frontHair?.accessories;
        if (frontHairAccessories && frontHairAccessories.length > 0) {
            for (let i = 0; i < frontHairAccessories.length; ++i) {
                let accessoryColor = frontHairAccessories[i]?.color?.accessoryColor;
                if (accessoryColor) fromHair.frontHair.accessories[i].color.accessoryColor = accessoryColor;
                let designStyle = frontHairAccessories[i]?.design?.designStyle;
                if (designStyle) fromHair.frontHair.accessories[i].design.designStyle = designStyle;
                let designColor = frontHairAccessories[i]?.design?.designColor;
                if (designColor) fromHair.frontHair.accessories[i].design.designColor = designColor;
                let designRotation = frontHairAccessories[i]?.design?.designRotation;
                if (designRotation) fromHair.frontHair.accessories[i].design.designRotation = designRotation;
                let designScale = frontHairAccessories[i]?.design?.designScale;
                if (designScale) fromHair.frontHair.accessories[i].design.designScale = designScale;
                let patternStyle = frontHairAccessories[i]?.pattern?.patternStyle;
                if (patternStyle) fromHair.frontHair.accessories[i].pattern.patternStyle = patternStyle;
                let patternColor = frontHairAccessories[i]?.pattern?.patternColor;
                if (patternColor) fromHair.frontHair.accessories[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = frontHairAccessories[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) fromHair.frontHair.accessories[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = frontHairAccessories[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) fromHair.frontHair.accessories[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = frontHairAccessories[i]?.pattern?.patternRotation;
                if (patternRotation) fromHair.frontHair.accessories[i].pattern.patternRotation = patternRotation;
                let patternVisibility = frontHairAccessories[i]?.pattern?.patternVisibility;
                if (patternVisibility) fromHair.frontHair.accessories[i].pattern.patternVisibility = patternVisibility;
            }
        }
        let backHairStyle = fromHair?.backHair?.style;
        if (backHairStyle) {
            await Utils.asyncDownloadAsset(backHairStyle);
            toHair.backHair.style = backHairStyle;
        }
        let backHairColor = fromHair?.backHair?.color?.color;
        if (backHairColor) toHair.backHair.color.color = backHairColor;
        let backHairGradientColor = fromHair?.backHair?.color?.gradientColor;
        if (backHairGradientColor) toHair.backHair.color.gradientColor = backHairGradientColor;
        let backHairGradientArea = fromHair?.backHair?.color?.gradientArea;
        if (backHairGradientArea) toHair.backHair.color.gradientArea = backHairGradientArea;
        let backHairHighlightStyle = fromHair?.backHair?.highlight?.highlightStyle;
        if (backHairHighlightStyle) toHair.backHair.highlight.highlightStyle = backHairHighlightStyle;
        let backHairAccessories = fromHair?.backHair?.accessories;
        if (backHairAccessories && backHairAccessories.length > 0) {
            for (let i = 0; i < backHairAccessories.length; ++i) {
                let accessoryColor = backHairAccessories[i]?.color?.accessoryColor;
                if (accessoryColor) fromHair.backHair.accessories[i].color.accessoryColor = accessoryColor;
                let designStyle = backHairAccessories[i]?.design?.designStyle;
                if (designStyle) fromHair.backHair.accessories[i].design.designStyle = designStyle;
                let designColor = backHairAccessories[i]?.design?.designColor;
                if (designColor) fromHair.backHair.accessories[i].design.designColor = designColor;
                let designRotation = backHairAccessories[i]?.design?.designRotation;
                if (designRotation) fromHair.backHair.accessories[i].design.designRotation = designRotation;
                let designScale = backHairAccessories[i]?.design?.designScale;
                if (designScale) fromHair.backHair.accessories[i].design.designScale = designScale;
                let patternStyle = backHairAccessories[i]?.pattern?.patternStyle;
                if (patternStyle) fromHair.backHair.accessories[i].pattern.patternStyle = patternStyle;
                let patternColor = backHairAccessories[i]?.pattern?.patternColor;
                if (patternColor) fromHair.backHair.accessories[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = backHairAccessories[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) fromHair.backHair.accessories[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = backHairAccessories[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) fromHair.backHair.accessories[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = backHairAccessories[i]?.pattern?.patternRotation;
                if (patternRotation) fromHair.backHair.accessories[i].pattern.patternRotation = patternRotation;
                let patternVisibility = backHairAccessories[i]?.pattern?.patternVisibility;
                if (patternVisibility) fromHair.backHair.accessories[i].pattern.patternVisibility = patternVisibility;
            }
        }
        let upperClothStyle = fromClothing?.upperCloth?.style;
        if (upperClothStyle) {
            await Utils.asyncDownloadAsset(upperClothStyle);
            toClothing.upperCloth.style = upperClothStyle;
        }
        let upperClothPart = fromClothing?.upperCloth?.part;
        if (upperClothPart && upperClothPart.length > 0) {
            for (let i = 0; i < upperClothPart.length; ++i) {
                let areaColor = upperClothPart[i]?.color?.areaColor;
                if (areaColor) toClothing.upperCloth.part[i].color.areaColor = areaColor;
                let patternStyle = upperClothPart[i]?.pattern?.patternStyle;
                if (patternStyle) toClothing.upperCloth.part[i].pattern.patternStyle = patternStyle;
                let patternColor = upperClothPart[i]?.pattern?.patternColor;
                if (patternColor) toClothing.upperCloth.part[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = upperClothPart[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) toClothing.upperCloth.part[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = upperClothPart[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) toClothing.upperCloth.part[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = upperClothPart[i]?.pattern?.patternRotation;
                if (patternRotation) toClothing.upperCloth.part[i].pattern.patternRotation = patternRotation;
                let patternVisibility = upperClothPart[i]?.pattern?.patternVisibility;
                if (patternVisibility) toClothing.upperCloth.part[i].pattern.patternVisibility = patternVisibility;
                let designStyle = upperClothPart[i]?.design?.designStyle;
                if (designStyle) toClothing.upperCloth.part[i].design.designStyle = designStyle;
                let designColor = upperClothPart[i]?.design?.designColor;
                if (designColor) toClothing.upperCloth.part[i].design.designColor = designColor;
                let designRotation = upperClothPart[i]?.design?.designRotation;
                if (designRotation) toClothing.upperCloth.part[i].design.designRotation = patternVisibility;
            }
        }
        let lowerClothStyle = fromClothing?.lowerCloth?.style;
        if (lowerClothStyle) {
            await Utils.asyncDownloadAsset(lowerClothStyle);
            toClothing.lowerCloth.style = lowerClothStyle;
        }
        let lowerClothPart = fromClothing?.lowerCloth?.part;
        if (lowerClothPart && lowerClothPart.length > 0) {
            for (let i = 0; i < lowerClothPart.length; ++i) {
                let areaColor = lowerClothPart[i]?.color?.areaColor;
                if (areaColor) toClothing.lowerCloth.part[i].color.areaColor = areaColor;
                let patternStyle = lowerClothPart[i]?.pattern?.patternStyle;
                if (patternStyle) toClothing.lowerCloth.part[i].pattern.patternStyle = patternStyle;
                let patternColor = lowerClothPart[i]?.pattern?.patternColor;
                if (patternColor) toClothing.lowerCloth.part[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = lowerClothPart[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) toClothing.lowerCloth.part[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = lowerClothPart[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) toClothing.lowerCloth.part[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = lowerClothPart[i]?.pattern?.patternRotation;
                if (patternRotation) toClothing.lowerCloth.part[i].pattern.patternRotation = patternRotation;
                let patternVisibility = lowerClothPart[i]?.pattern?.patternVisibility;
                if (patternVisibility) toClothing.lowerCloth.part[i].pattern.patternVisibility = patternVisibility;
                let designStyle = lowerClothPart[i]?.design?.designStyle;
                if (designStyle) toClothing.lowerCloth.part[i].design.designStyle = designStyle;
                let designColor = lowerClothPart[i]?.design?.designColor;
                if (designColor) toClothing.lowerCloth.part[i].design.designColor = designColor;
                let designRotation = lowerClothPart[i]?.design?.designRotation;
                if (designRotation) toClothing.lowerCloth.part[i].design.designRotation = patternVisibility;
            }
        }
        let shoesStyle = fromClothing?.shoes?.style;
        if (shoesStyle) {
            await Utils.asyncDownloadAsset(shoesStyle);
            toClothing.shoes.style = shoesStyle;
        }
        let shoesPart = fromClothing?.shoes?.part;
        if (shoesPart && shoesPart.length > 0) {
            for (let i = 0; i < shoesPart.length; ++i) {
                let areaColor = shoesPart[i]?.color?.areaColor;
                if (areaColor) toClothing.shoes.part[i].color.areaColor = areaColor;
                let patternStyle = shoesPart[i]?.pattern?.patternStyle;
                if (patternStyle) toClothing.shoes.part[i].pattern.patternStyle = patternStyle;
                let patternColor = shoesPart[i]?.pattern?.patternColor;
                if (patternColor) toClothing.shoes.part[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = shoesPart[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) toClothing.shoes.part[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = shoesPart[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) toClothing.shoes.part[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = shoesPart[i]?.pattern?.patternRotation;
                if (patternRotation) toClothing.shoes.part[i].pattern.patternRotation = patternRotation;
                let patternVisibility = shoesPart[i]?.pattern?.patternVisibility;
                if (patternVisibility) toClothing.shoes.part[i].pattern.patternVisibility = patternVisibility;
                let designStyle = shoesPart[i]?.design?.designStyle;
                if (designStyle) toClothing.shoes.part[i].design.designStyle = designStyle;
                let designColor = shoesPart[i]?.design?.designColor;
                if (designColor) toClothing.shoes.part[i].design.designColor = designColor;
                let designRotation = shoesPart[i]?.design?.designRotation;
                if (designRotation) toClothing.shoes.part[i].design.designRotation = patternVisibility;
            }
        }
        let glovesStyle = fromClothing?.gloves?.style;
        if (glovesStyle) {
            await Utils.asyncDownloadAsset(glovesStyle);
            toClothing.gloves.style = glovesStyle;
        }
        let glovesPart = fromClothing?.gloves?.part;
        if (glovesPart && glovesPart.length > 0) {
            for (let i = 0; i < glovesPart.length; ++i) {
                let areaColor = glovesPart[i]?.color?.areaColor;
                if (areaColor) toClothing.gloves.part[i].color.areaColor = areaColor;
                let patternStyle = glovesPart[i]?.pattern?.patternStyle;
                if (patternStyle) toClothing.gloves.part[i].pattern.patternStyle = patternStyle;
                let patternColor = glovesPart[i]?.pattern?.patternColor;
                if (patternColor) toClothing.gloves.part[i].pattern.patternColor = patternColor;
                let patternHorizontalScale = glovesPart[i]?.pattern?.patternHorizontalScale;
                if (patternHorizontalScale) toClothing.gloves.part[i].pattern.patternHorizontalScale = patternHorizontalScale;
                let patternVerticalScale = glovesPart[i]?.pattern?.patternVerticalScale;
                if (patternVerticalScale) toClothing.gloves.part[i].pattern.patternVerticalScale = patternVerticalScale;
                let patternRotation = glovesPart[i]?.pattern?.patternRotation;
                if (patternRotation) toClothing.gloves.part[i].pattern.patternRotation = patternRotation;
                let patternVisibility = glovesPart[i]?.pattern?.patternVisibility;
                if (patternVisibility) toClothing.gloves.part[i].pattern.patternVisibility = patternVisibility;
                let designStyle = glovesPart[i]?.design?.designStyle;
                if (designStyle) toClothing.gloves.part[i].design.designStyle = designStyle;
                let designColor = glovesPart[i]?.design?.designColor;
                if (designColor) toClothing.gloves.part[i].design.designColor = designColor;
                let designRotation = glovesPart[i]?.design?.designRotation;
                if (designRotation) toClothing.gloves.part[i].design.designRotation = patternVisibility;
            }
        }
    }
    static isSupportColorPick(tabId) {
        return this.colorPickTabIds.includes(tabId);
    }
    static isRemovableTabId(tabId) {
        return this.removableTabIds.includes(tabId);
    }
    static isSlot(tabId) {
        return this.slotTabIds.includes(tabId);
    }
    static isClothingTabId(tabId) {
        return this.clothingTabIds.includes(tabId);
    }
    static isDefaultAssetId(assetId) {
        return this.defaultAssetIds.includes(assetId);
    }
    static isHeadTabId(tabId) {
        return this.headTabIds.includes(tabId);
    }
    static getAssetId(type, character) {
        if (!character) character = Player.localPlayer.character;
        switch (type) {
          case Tab2Type.Tab2_Face:
            return character.description.advance.headFeatures.head.style;

          case Tab2Type.Tab2_Eyebrows:
            return character.description.advance.makeup.eyebrows.eyebrowStyle;

          case Tab2Type.Tab2_Top:
          case Tab3Type.Tab3_LongSinglePiece_Top:
          case Tab3Type.Tab3_ShortJacket_Top:
          case Tab3Type.Tab3_ShortSinglePiece_Top:
          case Tab3Type.Tab3_Suit_Top:
          case Tab3Type.Tab3_ALongCoat_Top:
            return character.description.advance.clothing.upperCloth.style;

          case Tab2Type.Tab2_Bottom:
          case Tab3Type.Tab3_ShortSkirt_Bottom:
          case Tab3Type.Tab3_LongPants_Bottom:
          case Tab3Type.Tab3_Shorts_Bottom:
          case Tab3Type.Tab3_LongSkirt_Bottom:
          case Tab3Type.Tab3_Tights_Bottom:
            return character.description.advance.clothing.lowerCloth.style;

          case Tab2Type.Tab2_Shoes:
          case Tab3Type.Tab3_Everyday_Shoes:
          case Tab3Type.Tab3_Boots_Shoes:
          case Tab3Type.Tab3_FootCover_Shoes:
          case Tab3Type.Tab3_NakedDress_Shoes:
          case Tab3Type.Tab3_HighHeels_Shoes:
          case Tab3Type.Tab3_SportsShoes_Shoes:
            return character.description.advance.clothing.shoes.style;

          case Tab2Type.Tab2_Gloves:
          case Tab3Type.Tab3_Gloves_Gloves:
          case Tab3Type.Tab3_Accessories_Gloves:
            return character.description.advance.clothing.gloves.style;

          case Tab3Type.Tab3_PupilStyle:
            return character.description.advance.makeup.coloredContacts.style.pupilStyle;

          case Tab3Type.Tab3_Lens:
            return character.description.advance.makeup.coloredContacts.decal.pupilStyle;

          case Tab3Type.Tab3_UpperHighlight:
            return character.description.advance.makeup.coloredContacts.highlight.upperHighlightStyle;

          case Tab3Type.Tab3_LowerHighlight:
            return character.description.advance.makeup.coloredContacts.highlight.lowerHighlightStyle;

          case Tab3Type.Tab3_Eyelashes:
            return character.description.advance.makeup.eyelashes.eyelashStyle;

          case Tab3Type.Tab3_Eyeshadow:
            return character.description.advance.makeup.eyeShadow.eyeshadowStyle;

          case Tab3Type.Tab3_Blush:
            return character.description.advance.makeup.blush.blushStyle;

          case Tab3Type.Tab3_LipMakeup:
            return character.description.advance.makeup.lipstick.lipstickStyle;

          case Tab3Type.Tab3_FullHair:
            return character.description.advance.hair.backHair.style;

          case Tab3Type.Tab3_FrontHair:
            return character.description.advance.hair.frontHair.style;

          case Tab3Type.Tab3_BackHair:
            return character.description.advance.hair.backHair.style;
        }
    }
}

Mall.slotSplit = "$";

Mall.colorPickTabIds = [ Tab2Type.Tab2_Eyebrows, Tab2Type.Tab2_Top, Tab3Type.Tab3_LongSinglePiece_Top, Tab3Type.Tab3_ShortJacket_Top, Tab3Type.Tab3_ShortSinglePiece_Top, Tab3Type.Tab3_Suit_Top, Tab3Type.Tab3_ALongCoat_Top, Tab2Type.Tab2_Bottom, Tab3Type.Tab3_ShortSkirt_Bottom, Tab3Type.Tab3_LongPants_Bottom, Tab3Type.Tab3_Shorts_Bottom, Tab3Type.Tab3_LongSkirt_Bottom, Tab3Type.Tab3_Tights_Bottom, Tab3Type.Tab3_Gloves_Gloves, Tab3Type.Tab3_Accessories_Gloves, Tab3Type.Tab3_Everyday_Shoes, Tab3Type.Tab3_Boots_Shoes, Tab3Type.Tab3_FootCover_Shoes, Tab3Type.Tab3_NakedDress_Shoes, Tab3Type.Tab3_HighHeels_Shoes, Tab3Type.Tab3_SportsShoes_Shoes, Tab2Type.Tab2_Shoes, Tab2Type.Tab2_Gloves, Tab3Type.Tab3_PupilStyle, Tab3Type.Tab3_Lens, Tab3Type.Tab3_UpperHighlight, Tab3Type.Tab3_LowerHighlight, Tab3Type.Tab3_Eyelashes, Tab3Type.Tab3_Eyeshadow, Tab3Type.Tab3_Blush, Tab3Type.Tab3_LipMakeup, Tab3Type.Tab3_FullHair, Tab3Type.Tab3_FrontHair, Tab3Type.Tab3_BackHair ];

Mall.removableTabIds = [ Tab2Type.Tab2_Eyebrows, Tab2Type.Tab2_Top, Tab3Type.Tab3_LongSinglePiece_Top, Tab3Type.Tab3_ShortJacket_Top, Tab3Type.Tab3_ShortSinglePiece_Top, Tab3Type.Tab3_Suit_Top, Tab3Type.Tab3_ALongCoat_Top, Tab2Type.Tab2_Bottom, Tab3Type.Tab3_ShortSkirt_Bottom, Tab3Type.Tab3_LongPants_Bottom, Tab3Type.Tab3_Shorts_Bottom, Tab3Type.Tab3_LongSkirt_Bottom, Tab3Type.Tab3_Tights_Bottom, Tab3Type.Tab3_Gloves_Gloves, Tab3Type.Tab3_Accessories_Gloves, Tab3Type.Tab3_Everyday_Shoes, Tab3Type.Tab3_Boots_Shoes, Tab3Type.Tab3_FootCover_Shoes, Tab3Type.Tab3_NakedDress_Shoes, Tab3Type.Tab3_HighHeels_Shoes, Tab3Type.Tab3_SportsShoes_Shoes, Tab2Type.Tab2_Shoes, Tab2Type.Tab2_Gloves, Tab3Type.Tab3_PupilStyle, Tab3Type.Tab3_Lens, Tab3Type.Tab3_UpperHighlight, Tab3Type.Tab3_LowerHighlight, Tab3Type.Tab3_Eyelashes, Tab3Type.Tab3_Eyeshadow, Tab3Type.Tab3_Blush, Tab3Type.Tab3_LipMakeup, Tab3Type.Tab3_FullHair, Tab3Type.Tab3_FrontHair, Tab3Type.Tab3_BackHair, Tab3Type.Tab3_LeftHand, Tab3Type.Tab3_RightHand, Tab3Type.Tab3_Back, Tab3Type.Tab3_Ear, Tab3Type.Tab3_Face, Tab3Type.Tab3_Hip, Tab3Type.Tab3_Shoulder, Tab3Type.Tab3_Effects, Tab3Type.Tab3_Trailing, Tab3Type.Tab3_BackPet, Tab2Type.Tab2_Outfit, Tab3Type.Tab3_DailyStyling_Suit1, Tab3Type.Tab3_DailyStyling_Suit2, Tab3Type.Tab3_MuppetStyling_Suit, Tab3Type.Tab3_HeroStyling_Suit, Tab3Type.Tab3_FantasyModeling_Suit, Tab3Type.Tab3_HolidayStyling_Suit, Tab3Type.Tab3_ScienceFictionStyling_Suit, Tab3Type.Tab3_AncientMolding_Suit, Tab2Type.Tab2_Pet, Tab1Type.Tab1_Clothing ];

Mall.slotTabIds = [ Tab3Type.Tab3_LeftHand, Tab3Type.Tab3_RightHand, Tab3Type.Tab3_Back, Tab3Type.Tab3_Ear, Tab3Type.Tab3_Face, Tab3Type.Tab3_Hip, Tab2Type.Tab2_Pet, Tab3Type.Tab3_Shoulder, Tab3Type.Tab3_Effects, Tab3Type.Tab3_Trailing, Tab3Type.Tab3_BackPet ];

Mall.clothingTabIds = [ Tab2Type.Tab2_Eyebrows, Tab2Type.Tab2_Top, Tab3Type.Tab3_LongSinglePiece_Top, Tab3Type.Tab3_ShortJacket_Top, Tab3Type.Tab3_ShortSinglePiece_Top, Tab3Type.Tab3_Suit_Top, Tab3Type.Tab3_ALongCoat_Top, Tab3Type.Tab3_ShortSkirt_Bottom, Tab3Type.Tab3_LongPants_Bottom, Tab3Type.Tab3_Shorts_Bottom, Tab3Type.Tab3_LongSkirt_Bottom, Tab3Type.Tab3_Tights_Bottom, Tab3Type.Tab3_Gloves_Gloves, Tab3Type.Tab3_Accessories_Gloves, Tab3Type.Tab3_Everyday_Shoes, Tab3Type.Tab3_Boots_Shoes, Tab3Type.Tab3_FootCover_Shoes, Tab3Type.Tab3_NakedDress_Shoes, Tab3Type.Tab3_HighHeels_Shoes, Tab3Type.Tab3_SportsShoes_Shoes, Tab2Type.Tab2_Bottom, Tab2Type.Tab2_Shoes, Tab2Type.Tab2_Gloves, Tab3Type.Tab3_PupilStyle, Tab3Type.Tab3_Lens, Tab3Type.Tab3_UpperHighlight, Tab3Type.Tab3_LowerHighlight, Tab3Type.Tab3_Eyelashes, Tab3Type.Tab3_Eyeshadow, Tab3Type.Tab3_Blush, Tab3Type.Tab3_LipMakeup, Tab3Type.Tab3_FullHair, Tab3Type.Tab3_FrontHair, Tab3Type.Tab3_BackHair ];

Mall.defaultAssetIds = [ `398608`, `77763`, `292004`, `343474`, `292002`, `343467`, `66505`, `343475`, `75663`, `343466`, `398609`, `47968`, `48041`, `32112`, `48026`, `32098`, `398607`, `48062`, `292003`, `292001`, `343471`, `343476` ];

Mall.headTabIds = [ Tab2Type.Tab2_Face, Tab2Type.Tab2_Eyebrows, Tab2Type.Tab2_Expression, Tab3Type.Tab3_PupilStyle, Tab3Type.Tab3_Lens, Tab3Type.Tab3_UpperHighlight, Tab3Type.Tab3_LowerHighlight, Tab3Type.Tab3_Eyelashes, Tab3Type.Tab3_Eyeshadow, Tab3Type.Tab3_Blush, Tab3Type.Tab3_LipMakeup, Tab3Type.Tab3_FaceTattoo, Tab3Type.Tab3_FullHair, Tab3Type.Tab3_FrontHair, Tab3Type.Tab3_BackHair ];

var foreign104 = Object.freeze({
    __proto__: null,
    default: Mall
});

let ColorPickPanel_Generate = class ColorPickPanel_Generate extends UIScript {
    get mSaveCanvas() {
        if (!this.mSaveCanvas_Internal && this.uiWidgetBase) {
            this.mSaveCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSaveCanvas");
        }
        return this.mSaveCanvas_Internal;
    }
    get mSaveButton() {
        if (!this.mSaveButton_Internal && this.uiWidgetBase) {
            this.mSaveButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSaveCanvas/SaveCanvas/mSaveButton");
        }
        return this.mSaveButton_Internal;
    }
    get mSaveTextBlock() {
        if (!this.mSaveTextBlock_Internal && this.uiWidgetBase) {
            this.mSaveTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSaveCanvas/SaveCanvas/mSaveTextBlock");
        }
        return this.mSaveTextBlock_Internal;
    }
    get mListBgImage() {
        if (!this.mListBgImage_Internal && this.uiWidgetBase) {
            this.mListBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListBgImage");
        }
        return this.mListBgImage_Internal;
    }
    get mListCanvas() {
        if (!this.mListCanvas_Internal && this.uiWidgetBase) {
            this.mListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas");
        }
        return this.mListCanvas_Internal;
    }
    get mTab1Canvas() {
        if (!this.mTab1Canvas_Internal && this.uiWidgetBase) {
            this.mTab1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas");
        }
        return this.mTab1Canvas_Internal;
    }
    get mTab1ScrollBox() {
        if (!this.mTab1ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab1ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas/mTab1ScrollBox");
        }
        return this.mTab1ScrollBox_Internal;
    }
    get mTab1ContentCanvas() {
        if (!this.mTab1ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab1ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas/mTab1ScrollBox/mTab1ContentCanvas");
        }
        return this.mTab1ContentCanvas_Internal;
    }
    get mTab2Canvas() {
        if (!this.mTab2Canvas_Internal && this.uiWidgetBase) {
            this.mTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas");
        }
        return this.mTab2Canvas_Internal;
    }
    get mTab2ScrollBox() {
        if (!this.mTab2ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab2ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mTab2ScrollBox");
        }
        return this.mTab2ScrollBox_Internal;
    }
    get mTab2ContentCanvas() {
        if (!this.mTab2ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab2ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mTab2ScrollBox/mTab2ContentCanvas");
        }
        return this.mTab2ContentCanvas_Internal;
    }
    get mTab3Canvas() {
        if (!this.mTab3Canvas_Internal && this.uiWidgetBase) {
            this.mTab3Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas");
        }
        return this.mTab3Canvas_Internal;
    }
    get mTab3ScrollBox() {
        if (!this.mTab3ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab3ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mTab3ScrollBox");
        }
        return this.mTab3ScrollBox_Internal;
    }
    get mTab3ContentCanvas() {
        if (!this.mTab3ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab3ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mTab3ScrollBox/mTab3ContentCanvas");
        }
        return this.mTab3ContentCanvas_Internal;
    }
    get mColorPickCanvas() {
        if (!this.mColorPickCanvas_Internal && this.uiWidgetBase) {
            this.mColorPickCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mColorPickCanvas");
        }
        return this.mColorPickCanvas_Internal;
    }
    get mColorPick() {
        if (!this.mColorPick_Internal && this.uiWidgetBase) {
            this.mColorPick_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mColorPickCanvas/mColorPick");
        }
        return this.mColorPick_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    get mCloseImage() {
        if (!this.mCloseImage_Internal && this.uiWidgetBase) {
            this.mCloseImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton/mCloseImage");
        }
        return this.mCloseImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSaveButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveButton");
        }));
        this.mSaveButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mSaveTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ColorPickPanel_Generate = __decorate([ UIBind("UI/module/MallModule/ColorPickPanel.ui") ], ColorPickPanel_Generate);

var ColorPickPanel_Generate$1 = ColorPickPanel_Generate;

var foreign168 = Object.freeze({
    __proto__: null,
    default: ColorPickPanel_Generate$1
});

let ColorPickTab1_Generate = class ColorPickTab1_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTitleTextBlock");
        }
        return this.mTitleTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.mTitleTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ColorPickTab1_Generate = __decorate([ UIBind("UI/module/MallModule/ColorPickTab1.ui") ], ColorPickTab1_Generate);

var ColorPickTab1_Generate$1 = ColorPickTab1_Generate;

var foreign169 = Object.freeze({
    __proto__: null,
    default: ColorPickTab1_Generate$1
});

class ColorPickTab1 extends ColorPickTab1_Generate$1 {
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
    }
    refreshColorPickTab1(text) {
        this.mTitleTextBlock.text = text;
    }
}

var foreign109 = Object.freeze({
    __proto__: null,
    default: ColorPickTab1
});

let ColorPickTab2_Generate = class ColorPickTab2_Generate extends UIScript {
    get mTab2Canvas() {
        if (!this.mTab2Canvas_Internal && this.uiWidgetBase) {
            this.mTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas");
        }
        return this.mTab2Canvas_Internal;
    }
    get mColorImage() {
        if (!this.mColorImage_Internal && this.uiWidgetBase) {
            this.mColorImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mColorImage");
        }
        return this.mColorImage_Internal;
    }
    get mTab2Button() {
        if (!this.mTab2Button_Internal && this.uiWidgetBase) {
            this.mTab2Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mTab2Button");
        }
        return this.mTab2Button_Internal;
    }
    get mTab2TextBlock() {
        if (!this.mTab2TextBlock_Internal && this.uiWidgetBase) {
            this.mTab2TextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mTab2TextBlock");
        }
        return this.mTab2TextBlock_Internal;
    }
    get mSelectTab2Canvas() {
        if (!this.mSelectTab2Canvas_Internal && this.uiWidgetBase) {
            this.mSelectTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mSelectTab2Canvas");
        }
        return this.mSelectTab2Canvas_Internal;
    }
    get mSelectTab2BgImage() {
        if (!this.mSelectTab2BgImage_Internal && this.uiWidgetBase) {
            this.mSelectTab2BgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mSelectTab2Canvas/mSelectTab2BgImage");
        }
        return this.mSelectTab2BgImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mTab2Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mTab2Button");
        }));
        this.mTab2Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTab2TextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ColorPickTab2_Generate = __decorate([ UIBind("UI/module/MallModule/ColorPickTab2.ui") ], ColorPickTab2_Generate);

var ColorPickTab2_Generate$1 = ColorPickTab2_Generate;

var foreign170 = Object.freeze({
    __proto__: null,
    default: ColorPickTab2_Generate$1
});

class ColorPickTab2 extends ColorPickTab2_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.index = -1;
        this.colorPickTab2Data = null;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mTab2Button.onClicked.add(this.addTab2Button.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectColorPickTab2Action.add(this.addSelectColorPickTab2Action.bind(this));
    }
    addTab2Button() {
        this.getMallModuleC.onSelectColorPickTab2Action.call(this.index);
    }
    initTab2(index, colorPickTab2Data) {
        this.index = index;
        this.colorPickTab2Data = colorPickTab2Data;
        this.mTab2TextBlock.text = colorPickTab2Data.text;
        this.mColorImage.imageColor = colorPickTab2Data.color;
        this.updateSelectState(false);
    }
    refreshColorImage(color) {
        this.mColorImage.imageColor = color;
    }
    addSelectColorPickTab2Action(index) {
        this.updateSelectState(this.index == index);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        if (this.isSelect) {
            Utils.setWidgetVisibility(this.mSelectTab2BgImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mTab2TextBlock.setFontColorByHex(`000000E5`);
            this.mTab2TextBlock.glyph = mw.UIFontGlyph.Bold;
        } else {
            Utils.setWidgetVisibility(this.mSelectTab2BgImage, mw.SlateVisibility.Collapsed);
            this.mTab2TextBlock.setFontColorByHex(`00000099`);
            this.mTab2TextBlock.glyph = mw.UIFontGlyph.Normal;
        }
    }
}

var foreign110 = Object.freeze({
    __proto__: null,
    default: ColorPickTab2
});

let ColorPickTab3_Generate = class ColorPickTab3_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectImage");
        }
        return this.mSelectImage_Internal;
    }
    get mSelectButton() {
        if (!this.mSelectButton_Internal && this.uiWidgetBase) {
            this.mSelectButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectButton");
        }
        return this.mSelectButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSelectButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSelectButton");
        }));
        this.mSelectButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

ColorPickTab3_Generate = __decorate([ UIBind("UI/module/MallModule/ColorPickTab3.ui") ], ColorPickTab3_Generate);

var ColorPickTab3_Generate$1 = ColorPickTab3_Generate;

var foreign171 = Object.freeze({
    __proto__: null,
    default: ColorPickTab3_Generate$1
});

class ColorPickTab3 extends ColorPickTab3_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.index = -1;
        this.color = null;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.mBgImage.imageGuid = `199136`;
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mSelectButton.onClicked.add(this.addSelectButton.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectColorPickTab3Action.add(this.addSelectItemAction.bind(this));
    }
    addSelectButton() {
        this.getMallModuleC.onSelectColorPickTab3Action.call(this.index);
    }
    initColorPickTab3(index, color) {
        this.index = index;
        this.color = color;
        this.mBgImage.setImageColorByHex(color);
        this.updateSelectState(false);
    }
    addSelectItemAction(index) {
        this.updateSelectState(this.index == index);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        this.mSelectImage.renderOpacity = this.isSelect ? 1 : 0;
    }
}

var foreign111 = Object.freeze({
    __proto__: null,
    default: ColorPickTab3
});

var Enums;

(function(Enums) {
    (function(TouchEvent) {
        TouchEvent[TouchEvent["DOWN"] = 0] = "DOWN";
        TouchEvent[TouchEvent["MOVE"] = 1] = "MOVE";
        TouchEvent[TouchEvent["UP"] = 2] = "UP";
    })(Enums.TouchEvent || (Enums.TouchEvent = {}));
})(Enums || (Enums = {}));

class TouchScript {
    constructor() {
        this.captureMap = new Map;
        this.screenListeners = [];
    }
    onStart() {}
    static get instance() {
        if (this._ins == null) {
            this._ins = new TouchScript;
        }
        return this._ins;
    }
    addScreenListener(widget, callback, adjuestCenter) {
        this.screenListeners.push({
            widget: widget,
            callback: callback,
            adjuestCenter: adjuestCenter
        });
    }
    removeScreenListener(widget) {
        for (let i = 0; i < this.screenListeners.length; i++) {
            if (this.screenListeners[i].widget == widget) {
                this.screenListeners.splice(i, 1);
                i--;
            }
        }
    }
    onTouchStarted(inGemory, inPointerEvent) {
        for (let i = 0; i < this.screenListeners.length; i++) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            const pos = new mw.Vector2(this.screenListeners[i].widget.position.x, this.screenListeners[i].widget.position.y);
            const size = this.screenListeners[i].widget.size;
            if (localPosition.x > pos.x && localPosition.y > pos.y && localPosition.x < pos.x + size.x && localPosition.y < pos.y + size.y) {
                this.captureMap.set(inPointerEvent.pointerIndex, this.screenListeners[i]);
                this.screenListeners[i].callback(this.screenListeners[i].widget, Enums.TouchEvent.DOWN, localPosition.x, localPosition.y, inPointerEvent);
                return mw.EventReply.handled;
            }
        }
        return mw.EventReply.handled;
    }
    onTouchMoved(inGemory, inPointerEvent) {
        if (this.captureMap.has(inPointerEvent.pointerIndex)) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            let capture = this.captureMap.get(inPointerEvent.pointerIndex);
            const pos = new mw.Vector2(capture.widget.position.x, capture.widget.position.y);
            const size = capture.widget.size;
            if (localPosition.x > pos.x && localPosition.y > pos.y && localPosition.x < pos.x + size.x && localPosition.y < pos.y + size.y) {
                capture.callback(capture.widget, Enums.TouchEvent.MOVE, localPosition.x, localPosition.y, inPointerEvent);
            }
        }
        return mw.EventReply.handled;
    }
    onTouchEnded(inGemory, inPointerEvent) {
        if (this.captureMap.has(inPointerEvent.pointerIndex)) {
            const position = inPointerEvent.screenSpacePosition;
            const localPosition = mw.absoluteToLocal(inGemory, position);
            let capture = this.captureMap.get(inPointerEvent.pointerIndex);
            capture.callback(capture.widget, Enums.TouchEvent.UP, localPosition.x, localPosition.y, inPointerEvent);
            this.captureMap.delete(inPointerEvent.pointerIndex);
        }
        return mw.EventReply.handled;
    }
}

var foreign143 = Object.freeze({
    __proto__: null,
    get Enums() {
        return Enums;
    },
    TouchScript: TouchScript
});

let MallPanel_Generate = class MallPanel_Generate extends UIScript {
    get mTouchImage() {
        if (!this.mTouchImage_Internal && this.uiWidgetBase) {
            this.mTouchImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTouchImage");
        }
        return this.mTouchImage_Internal;
    }
    get mLeftCanvas() {
        if (!this.mLeftCanvas_Internal && this.uiWidgetBase) {
            this.mLeftCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas");
        }
        return this.mLeftCanvas_Internal;
    }
    get mResetButton() {
        if (!this.mResetButton_Internal && this.uiWidgetBase) {
            this.mResetButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mResetButton");
        }
        return this.mResetButton_Internal;
    }
    get mResetTextBlock() {
        if (!this.mResetTextBlock_Internal && this.uiWidgetBase) {
            this.mResetTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mResetButton/mResetTextBlock");
        }
        return this.mResetTextBlock_Internal;
    }
    get mSaveButton() {
        if (!this.mSaveButton_Internal && this.uiWidgetBase) {
            this.mSaveButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSaveButton");
        }
        return this.mSaveButton_Internal;
    }
    get mSaveTextBlock() {
        if (!this.mSaveTextBlock_Internal && this.uiWidgetBase) {
            this.mSaveTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSaveButton/mSaveTextBlock");
        }
        return this.mSaveTextBlock_Internal;
    }
    get mSexButton() {
        if (!this.mSexButton_Internal && this.uiWidgetBase) {
            this.mSexButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSexButton");
        }
        return this.mSexButton_Internal;
    }
    get mSexImage() {
        if (!this.mSexImage_Internal && this.uiWidgetBase) {
            this.mSexImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSexButton/mSexImage");
        }
        return this.mSexImage_Internal;
    }
    get mSelfCanvas() {
        if (!this.mSelfCanvas_Internal && this.uiWidgetBase) {
            this.mSelfCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelfCanvas");
        }
        return this.mSelfCanvas_Internal;
    }
    get mSelfScrollBox() {
        if (!this.mSelfScrollBox_Internal && this.uiWidgetBase) {
            this.mSelfScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelfCanvas/mSelfScrollBox");
        }
        return this.mSelfScrollBox_Internal;
    }
    get mSelfContentCanvas() {
        if (!this.mSelfContentCanvas_Internal && this.uiWidgetBase) {
            this.mSelfContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelfCanvas/mSelfScrollBox/mSelfContentCanvas");
        }
        return this.mSelfContentCanvas_Internal;
    }
    get mListBgImage() {
        if (!this.mListBgImage_Internal && this.uiWidgetBase) {
            this.mListBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListBgImage");
        }
        return this.mListBgImage_Internal;
    }
    get mListCanvas() {
        if (!this.mListCanvas_Internal && this.uiWidgetBase) {
            this.mListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas");
        }
        return this.mListCanvas_Internal;
    }
    get mTab1Canvas() {
        if (!this.mTab1Canvas_Internal && this.uiWidgetBase) {
            this.mTab1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas");
        }
        return this.mTab1Canvas_Internal;
    }
    get mTab1ScrollBox() {
        if (!this.mTab1ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab1ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas/mTab1ScrollBox");
        }
        return this.mTab1ScrollBox_Internal;
    }
    get mTab1ContentCanvas() {
        if (!this.mTab1ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab1ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas/mTab1ScrollBox/mTab1ContentCanvas");
        }
        return this.mTab1ContentCanvas_Internal;
    }
    get mTab2Canvas() {
        if (!this.mTab2Canvas_Internal && this.uiWidgetBase) {
            this.mTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas");
        }
        return this.mTab2Canvas_Internal;
    }
    get mTab2ScrollBox() {
        if (!this.mTab2ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab2ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mTab2ScrollBox");
        }
        return this.mTab2ScrollBox_Internal;
    }
    get mTab2ContentCanvas() {
        if (!this.mTab2ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab2ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mTab2ScrollBox/mTab2ContentCanvas");
        }
        return this.mTab2ContentCanvas_Internal;
    }
    get mTab3Canvas() {
        if (!this.mTab3Canvas_Internal && this.uiWidgetBase) {
            this.mTab3Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas");
        }
        return this.mTab3Canvas_Internal;
    }
    get mTab3ScrollBox() {
        if (!this.mTab3ScrollBox_Internal && this.uiWidgetBase) {
            this.mTab3ScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mTab3ScrollBox");
        }
        return this.mTab3ScrollBox_Internal;
    }
    get mTab3ContentCanvas() {
        if (!this.mTab3ContentCanvas_Internal && this.uiWidgetBase) {
            this.mTab3ContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab3Canvas/mTab3ScrollBox/mTab3ContentCanvas");
        }
        return this.mTab3ContentCanvas_Internal;
    }
    get mItemScrollBox() {
        if (!this.mItemScrollBox_Internal && this.uiWidgetBase) {
            this.mItemScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mItemScrollBox");
        }
        return this.mItemScrollBox_Internal;
    }
    get mItemContentCanvas() {
        if (!this.mItemContentCanvas_Internal && this.uiWidgetBase) {
            this.mItemContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mItemScrollBox/mItemContentCanvas");
        }
        return this.mItemContentCanvas_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    get mCloseImage() {
        if (!this.mCloseImage_Internal && this.uiWidgetBase) {
            this.mCloseImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton/mCloseImage");
        }
        return this.mCloseImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mResetButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mResetButton");
        }));
        this.mResetButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSaveButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveButton");
        }));
        this.mSaveButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSexButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSexButton");
        }));
        this.mSexButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mResetTextBlock);
        this.initLanguage(this.mSaveTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallPanel_Generate = __decorate([ UIBind("UI/module/MallModule/MallPanel.ui") ], MallPanel_Generate);

var MallPanel_Generate$1 = MallPanel_Generate;

var foreign177 = Object.freeze({
    __proto__: null,
    default: MallPanel_Generate$1
});

let MallItem_Big_Generate = class MallItem_Big_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mSelectButton() {
        if (!this.mSelectButton_Internal && this.uiWidgetBase) {
            this.mSelectButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectButton");
        }
        return this.mSelectButton_Internal;
    }
    get mCoinCanvas() {
        if (!this.mCoinCanvas_Internal && this.uiWidgetBase) {
            this.mCoinCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas");
        }
        return this.mCoinCanvas_Internal;
    }
    get mCoinIconImage() {
        if (!this.mCoinIconImage_Internal && this.uiWidgetBase) {
            this.mCoinIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas/mCoinIconImage");
        }
        return this.mCoinIconImage_Internal;
    }
    get mPriceTextBlock() {
        if (!this.mPriceTextBlock_Internal && this.uiWidgetBase) {
            this.mPriceTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas/mPriceTextBlock");
        }
        return this.mPriceTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSelectButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSelectButton");
        }));
        this.mSelectButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mPriceTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallItem_Big_Generate = __decorate([ UIBind("UI/module/MallModule/MallItem_Big.ui") ], MallItem_Big_Generate);

var MallItem_Big_Generate$1 = MallItem_Big_Generate;

var foreign172 = Object.freeze({
    __proto__: null,
    default: MallItem_Big_Generate$1
});

class MallItem_Big extends MallItem_Big_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tabType = TabType.None;
        this.tabId = 0;
        this.assetId = null;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.mIconImage.imageGuid = `32115`;
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mSelectButton.onClicked.add(this.addItemButton.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectItemAction.add(this.addSelectItemAction.bind(this));
    }
    addItemButton() {
        this.getMallModuleC.onSelectItemAction.call(this.tabType, this.tabId, this.assetId);
    }
    initItem(tabType, tabId, assetId) {
        this.tabType = tabType;
        this.tabId = tabId;
        this.assetId = assetId;
        switch (tabId) {
          case Tab2Type.Tab2_BodyType:
            let bodyTypeElement = GameConfig.BodyType.getElement(assetId);
            this.mIconImage.imageGuid = bodyTypeElement.Icon;
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.Collapsed);
            this.mPriceTextBlock.text = StringUtil.format(GameConfig.Language.Text_BodyTypeDescribe.Value, bodyTypeElement.Scale);
            break;

          case Tab2Type.Tab2_Outfit:
            let outfitElement = GameConfig.Outfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(outfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_DailyStyling_Suit1:
            let dailyStylingOutfit1Element = GameConfig.DailyStylingOutfit1.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(dailyStylingOutfit1Element.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_DailyStyling_Suit2:
            let dailyStylingOutfit2Element = GameConfig.DailyStylingOutfit2.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(dailyStylingOutfit2Element.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_MuppetStyling_Suit:
            let muppetStylingOutfitElement = GameConfig.MuppetStylingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(muppetStylingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_HeroStyling_Suit:
            let heroStylingOutfitElement = GameConfig.HeroStylingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(heroStylingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_FantasyModeling_Suit:
            let fantasyModelingOutfitElement = GameConfig.FantasyModelingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(fantasyModelingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_HolidayStyling_Suit:
            let holidayStylingOutfitElement = GameConfig.HolidayStylingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(holidayStylingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_ScienceFictionStyling_Suit:
            let scienceFictionStylingOutfitElement = GameConfig.ScienceFictionStylingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(scienceFictionStylingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_AncientMolding_Suit:
            let ancientMoldingOutfitElement = GameConfig.AncientMoldingOutfit.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(ancientMoldingOutfitElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          default:
            this.mIconImage.imageInfo.setByAssetIcon(assetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;
        }
        this.updateSelectState(false);
    }
    addSelectItemAction(tabType, tabId, assetId) {
        if (this.tabType != tabType || this.tabId != tabId) return;
        this.updateSelectState(this.assetId == assetId);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        this.mSelectButton.renderOpacity = this.isSelect ? 1 : 0;
    }
}

var foreign112 = Object.freeze({
    __proto__: null,
    default: MallItem_Big
});

let MallItem_Character_Generate = class MallItem_Character_Generate extends UIScript {
    get mSelectButton() {
        if (!this.mSelectButton_Internal && this.uiWidgetBase) {
            this.mSelectButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectButton");
        }
        return this.mSelectButton_Internal;
    }
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mIconCanvas() {
        if (!this.mIconCanvas_Internal && this.uiWidgetBase) {
            this.mIconCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconCanvas");
        }
        return this.mIconCanvas_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mDeleteButton() {
        if (!this.mDeleteButton_Internal && this.uiWidgetBase) {
            this.mDeleteButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconCanvas/mDeleteButton");
        }
        return this.mDeleteButton_Internal;
    }
    get mAddCanvas() {
        if (!this.mAddCanvas_Internal && this.uiWidgetBase) {
            this.mAddCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mAddCanvas");
        }
        return this.mAddCanvas_Internal;
    }
    get mAddBgTextBlock() {
        if (!this.mAddBgTextBlock_Internal && this.uiWidgetBase) {
            this.mAddBgTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mAddCanvas/mAddBgTextBlock");
        }
        return this.mAddBgTextBlock_Internal;
    }
    get mAddTextBlock() {
        if (!this.mAddTextBlock_Internal && this.uiWidgetBase) {
            this.mAddTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mAddCanvas/mAddTextBlock");
        }
        return this.mAddTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSelectButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSelectButton");
        }));
        this.mSelectButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mDeleteButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mDeleteButton");
        }));
        this.mDeleteButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mAddBgTextBlock);
        this.initLanguage(this.mAddTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallItem_Character_Generate = __decorate([ UIBind("UI/module/MallModule/MallItem_Character.ui") ], MallItem_Character_Generate);

var MallItem_Character_Generate$1 = MallItem_Character_Generate;

var foreign173 = Object.freeze({
    __proto__: null,
    default: MallItem_Character_Generate$1
});

class MallItem_Character extends MallItem_Character_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tabType = TabType.None;
        this.tabId = 0;
        this.assetId = null;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.mIconImage.imageGuid = `32115`;
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mSelectButton.onClicked.add(this.addItemButton.bind(this));
        this.mDeleteButton.onClicked.add(this.addDeleteButton.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectItemAction.add(this.addSelectItemAction.bind(this));
    }
    addItemButton() {
        this.getMallModuleC.onSelectItemAction.call(this.tabType, this.tabId, this.assetId);
    }
    addDeleteButton() {
        this.getMallModuleC.onDeleteItemAction.call(this.tabType, this.tabId, this.assetId);
    }
    initItem(tabType, tabId, assetId, length) {
        this.tabType = tabType;
        this.tabId = tabId;
        this.assetId = assetId;
        switch (tabId) {
          case Tab1Type.Tab1_Collection:
            if (assetId == `0`) {
                Utils.setWidgetVisibility(this.mIconCanvas, mw.SlateVisibility.Collapsed);
                Utils.setWidgetVisibility(this.mAddCanvas, mw.SlateVisibility.SelfHitTestInvisible);
                this.mAddTextBlock.text = StringUtil.format(GameConfig.Language.Text_SaveCurrentCharacter.Value, length, GlobalData.savaMaxCount);
            } else {
                Utils.setWidgetVisibility(this.mIconCanvas, mw.SlateVisibility.SelfHitTestInvisible);
                Utils.setWidgetVisibility(this.mAddCanvas, mw.SlateVisibility.Collapsed);
                this.mIconImage.imageInfo.setByAssetIcon(this.getMallModuleC.getCharacterDataUpAssetIdByKey(assetId), mw.AssetIconSize.Icon_128px);
            }
            break;
        }
        this.updateSelectState(false);
    }
    addSelectItemAction(tabType, tabId, assetId) {
        if (this.tabType != tabType || this.tabId != tabId) return;
        this.updateSelectState(this.assetId == assetId);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        this.mSelectButton.renderOpacity = this.isSelect ? 1 : 0;
    }
}

var foreign113 = Object.freeze({
    __proto__: null,
    default: MallItem_Character
});

let MallItem_Color_Generate = class MallItem_Color_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mSelectImage() {
        if (!this.mSelectImage_Internal && this.uiWidgetBase) {
            this.mSelectImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectImage");
        }
        return this.mSelectImage_Internal;
    }
    get mSelectButton() {
        if (!this.mSelectButton_Internal && this.uiWidgetBase) {
            this.mSelectButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectButton");
        }
        return this.mSelectButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSelectButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSelectButton");
        }));
        this.mSelectButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallItem_Color_Generate = __decorate([ UIBind("UI/module/MallModule/MallItem_Color.ui") ], MallItem_Color_Generate);

var MallItem_Color_Generate$1 = MallItem_Color_Generate;

var foreign174 = Object.freeze({
    __proto__: null,
    default: MallItem_Color_Generate$1
});

class MallItem_Color extends MallItem_Color_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tabType = TabType.None;
        this.tabId = 0;
        this.assetId = null;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mSelectButton.onClicked.add(this.addItemButton.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectItemAction.add(this.addSelectItemAction.bind(this));
    }
    addItemButton() {
        if (this.assetId == `ColorPick`) {
            this.getMallModuleC.onOpenColorPickAction.call(this.tabType, this.tabId);
        } else {
            this.getMallModuleC.onSelectItemAction.call(this.tabType, this.tabId, this.assetId);
        }
    }
    initItem(tabType, tabId, assetId) {
        this.tabType = tabType;
        this.tabId = tabId;
        this.assetId = assetId;
        if (assetId == `ColorPick`) {
            this.mBgImage.imageGuid = `169864`;
        } else {
            this.mBgImage.imageGuid = `199136`;
            this.mBgImage.setImageColorByHex(assetId);
        }
        this.updateSelectState(false);
    }
    addSelectItemAction(tabType, tabId, assetId) {
        if (this.tabType != tabType || this.tabId != tabId) return;
        this.updateSelectState(this.assetId == assetId);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        this.mSelectImage.renderOpacity = this.isSelect ? 1 : 0;
    }
}

var foreign114 = Object.freeze({
    __proto__: null,
    default: MallItem_Color
});

let MallItem_Self_Generate = class MallItem_Self_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMaskImage");
        }
        return this.mMaskImage_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.initLanguage(this.mCloseButton);
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallItem_Self_Generate = __decorate([ UIBind("UI/module/MallModule/MallItem_Self.ui") ], MallItem_Self_Generate);

var MallItem_Self_Generate$1 = MallItem_Self_Generate;

var foreign175 = Object.freeze({
    __proto__: null,
    default: MallItem_Self_Generate$1
});

class MallItem_Self extends MallItem_Self_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.assetType = 0;
        this.assetId = null;
        this.isDefault = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mIconImage.imageGuid = `32115`;
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.getMallModuleC.onCloseMallItemSelfAction.call(this.assetType, this.assetId);
    }
    initItem(assetType, assetIdInfoData) {
        this.assetType = assetType;
        this.assetId = assetIdInfoData.assetId;
        this.mIconImage.imageInfo.setByAssetIcon(this.assetId, mw.AssetIconSize.Icon_128px);
        this.mIconImage.imageColor = mw.LinearColor.white;
        switch (assetType) {
          case Tab3Type.Tab3_Lens:
          case Tab3Type.Tab3_UpperHighlight:
          case Tab3Type.Tab3_LowerHighlight:
            this.mIconImage.imageColor = new mw.LinearColor(.3098, .1921, .7176);
            break;
        }
        this.isDefault = Mall.isDefaultAssetId(this.assetId);
        Utils.setWidgetVisibility(this.mCloseButton, this.isDefault ? mw.SlateVisibility.Collapsed : mw.SlateVisibility.Visible);
    }
}

var foreign115 = Object.freeze({
    __proto__: null,
    default: MallItem_Self
});

let MallItem_Small_Generate = class MallItem_Small_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mMaskImage() {
        if (!this.mMaskImage_Internal && this.uiWidgetBase) {
            this.mMaskImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMaskImage");
        }
        return this.mMaskImage_Internal;
    }
    get mSelectButton() {
        if (!this.mSelectButton_Internal && this.uiWidgetBase) {
            this.mSelectButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSelectButton");
        }
        return this.mSelectButton_Internal;
    }
    get mColorButton() {
        if (!this.mColorButton_Internal && this.uiWidgetBase) {
            this.mColorButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mColorButton");
        }
        return this.mColorButton_Internal;
    }
    get mCoinCanvas() {
        if (!this.mCoinCanvas_Internal && this.uiWidgetBase) {
            this.mCoinCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas");
        }
        return this.mCoinCanvas_Internal;
    }
    get mCoinIconImage() {
        if (!this.mCoinIconImage_Internal && this.uiWidgetBase) {
            this.mCoinIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas/mCoinIconImage");
        }
        return this.mCoinIconImage_Internal;
    }
    get mPriceTextBlock() {
        if (!this.mPriceTextBlock_Internal && this.uiWidgetBase) {
            this.mPriceTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCoinCanvas/mPriceTextBlock");
        }
        return this.mPriceTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSelectButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSelectButton");
        }));
        this.mSelectButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mColorButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mColorButton");
        }));
        this.mColorButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mPriceTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallItem_Small_Generate = __decorate([ UIBind("UI/module/MallModule/MallItem_Small.ui") ], MallItem_Small_Generate);

var MallItem_Small_Generate$1 = MallItem_Small_Generate;

var foreign176 = Object.freeze({
    __proto__: null,
    default: MallItem_Small_Generate$1
});

class MallItem_Small extends MallItem_Small_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tabType = TabType.None;
        this.tabId = 0;
        this.assetId = null;
        this.isSupportColor = false;
        this.isRemovableTabId = false;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.mIconImage.imageGuid = `32115`;
        this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mSelectButton.onClicked.add(this.addItemButton.bind(this));
        this.mColorButton.onClicked.add(this.addColorButton.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectItemAction.add(this.addSelectItemAction.bind(this));
    }
    addItemButton() {
        this.getMallModuleC.onSelectItemAction.call(this.tabType, this.tabId, this.assetId);
    }
    addColorButton() {
        this.getMallModuleC.onOpenColorPickAction.call(this.tabType, this.tabId);
    }
    initItem(tabType, tabId, assetId) {
        this.tabType = tabType;
        this.tabId = tabId;
        this.assetId = assetId;
        this.mIconImage.imageColor = mw.LinearColor.white;
        this.isSupportColor = Mall.isSupportColorPick(tabId);
        this.isRemovableTabId = Mall.isRemovableTabId(tabId);
        switch (tabId) {
          case Tab3Type.Tab3_Lens:
          case Tab3Type.Tab3_UpperHighlight:
          case Tab3Type.Tab3_LowerHighlight:
            this.mIconImage.imageColor = new mw.LinearColor(.3098, .1921, .7176);
            this.mIconImage.imageInfo.setByAssetIcon(assetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab2Type.Tab2_Expression:
            let faceExpressionElement = GameConfig.FaceExpression.getElement(assetId);
            this.mIconImage.imageColor = new mw.LinearColor(.3098, .1921, .7176);
            this.mIconImage.imageGuid = faceExpressionElement.Icon;
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.Collapsed);
            this.mPriceTextBlock.text = faceExpressionElement.Name;
            break;

          case Tab3Type.Tab3_LeftHand:
            let leftHandElement = GameConfig.LeftHand.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(leftHandElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_RightHand:
            let rightHandElement = GameConfig.RightHand.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(rightHandElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Back:
            let backElement = GameConfig.Back.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(backElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Ear:
            let earElement = GameConfig.Ear.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(earElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Face:
            let facingElement = GameConfig.Facing.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(facingElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Hip:
            let hipElement = GameConfig.Hip.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(hipElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Shoulder:
            let shoulderElement = GameConfig.Shoulder.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(shoulderElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Effects:
            let effectsElement = GameConfig.Effects.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(effectsElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Trailing:
            let trailingElement = GameConfig.Trailing.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(trailingElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_BackPet:
            let backPetElement = GameConfig.BackPet.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(backPetElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_LongSinglePiece_Top:
            let longSinglePieceTopElement = GameConfig.LongSinglePieceTop.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(longSinglePieceTopElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_ShortJacket_Top:
            let shortJacketTopElement = GameConfig.ShortJacketTop.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(shortJacketTopElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_ShortSinglePiece_Top:
            let shortSinglePieceTopElement = GameConfig.ShortSinglePieceTop.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(shortSinglePieceTopElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Suit_Top:
            let suitTopElement = GameConfig.SuitTop.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(suitTopElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_ALongCoat_Top:
            let aLongCoatTopElement = GameConfig.ALongCoatTop.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(aLongCoatTopElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_ShortSkirt_Bottom:
            let shortSkirtBottomElement = GameConfig.ShortSkirtBottom.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(shortSkirtBottomElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_LongPants_Bottom:
            let longPantsBottomElement = GameConfig.LongPantsBottom.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(longPantsBottomElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Shorts_Bottom:
            let shortsBottomElement = GameConfig.ShortsBottom.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(shortsBottomElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_LongSkirt_Bottom:
            let longSkirtBottomElement = GameConfig.LongSkirtBottom.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(longSkirtBottomElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Tights_Bottom:
            let tightsBottomElement = GameConfig.TightsBottom.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(tightsBottomElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Gloves_Gloves:
            let glovesGlovesElement = GameConfig.GlovesGloves.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(glovesGlovesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Accessories_Gloves:
            let accessoriesGlovesElement = GameConfig.AccessoriesGloves.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(accessoriesGlovesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Everyday_Shoes:
            let everydayShoesElement = GameConfig.EverydayShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(everydayShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_Boots_Shoes:
            let bootsShoesElement = GameConfig.BootsShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(bootsShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_FootCover_Shoes:
            let footCoverShoesElement = GameConfig.FootCoverShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(footCoverShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_NakedDress_Shoes:
            let nakedDressShoesElement = GameConfig.NakedDressShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(nakedDressShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_HighHeels_Shoes:
            let highHeelsShoesElement = GameConfig.HighHeelsShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(highHeelsShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab3Type.Tab3_SportsShoes_Shoes:
            let sportsShoesShoesElement = GameConfig.SportsShoesShoes.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(sportsShoesShoesElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          case Tab2Type.Tab2_Pet:
            let petElement = GameConfig.Pet.getElement(assetId);
            this.mIconImage.imageInfo.setByAssetIcon(petElement.AssetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;

          default:
            this.mIconImage.imageInfo.setByAssetIcon(assetId, mw.AssetIconSize.Icon_128px);
            Utils.setWidgetVisibility(this.mCoinIconImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mPriceTextBlock.text = GameConfig.Language.Text_MallItem_Free.Value;
            break;
        }
        this.updateSelectState(false);
    }
    addSelectItemAction(tabType, tabId, assetId) {
        if (this.tabType != tabType || this.tabId != tabId) return;
        this.updateSelectState(this.assetId == assetId, false);
    }
    updateSelectState(isSelect, isDriectUpdate = true) {
        if (isDriectUpdate) {
            if (this.isSelect == isSelect) return;
            this.isSelect = isSelect;
        } else {
            if (this.isRemovableTabId) {
                if (!this.isSelect && this.isSelect == isSelect) {
                    return;
                } else if (!this.isSelect && this.isSelect != isSelect) {
                    this.isSelect = isSelect;
                } else if (this.isSelect && this.isSelect == isSelect) {
                    this.isSelect = false;
                } else if (this.isSelect && this.isSelect != isSelect) {
                    this.isSelect = isSelect;
                }
            } else {
                if (this.isSelect == isSelect) return;
            }
        }
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        if (this.isSelect) {
            this.mSelectButton.renderOpacity = 1;
            if (this.isSupportColor) {
                Utils.setWidgetVisibility(this.mColorButton, mw.SlateVisibility.Visible);
            } else {
                Utils.setWidgetVisibility(this.mColorButton, mw.SlateVisibility.Collapsed);
            }
        } else {
            this.mSelectButton.renderOpacity = 0;
            Utils.setWidgetVisibility(this.mColorButton, mw.SlateVisibility.Collapsed);
        }
    }
}

var foreign116 = Object.freeze({
    __proto__: null,
    default: MallItem_Small
});

let MallTab1_Generate = class MallTab1_Generate extends UIScript {
    get mTab1Canvas() {
        if (!this.mTab1Canvas_Internal && this.uiWidgetBase) {
            this.mTab1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab1Canvas");
        }
        return this.mTab1Canvas_Internal;
    }
    get mTab1Button() {
        if (!this.mTab1Button_Internal && this.uiWidgetBase) {
            this.mTab1Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab1Canvas/mTab1Button");
        }
        return this.mTab1Button_Internal;
    }
    get mTab1TextBlock() {
        if (!this.mTab1TextBlock_Internal && this.uiWidgetBase) {
            this.mTab1TextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab1Canvas/mTab1TextBlock");
        }
        return this.mTab1TextBlock_Internal;
    }
    get mSelectTab1Canvas() {
        if (!this.mSelectTab1Canvas_Internal && this.uiWidgetBase) {
            this.mSelectTab1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab1Canvas/mSelectTab1Canvas");
        }
        return this.mSelectTab1Canvas_Internal;
    }
    get mSelectTab1BgImage() {
        if (!this.mSelectTab1BgImage_Internal && this.uiWidgetBase) {
            this.mSelectTab1BgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab1Canvas/mSelectTab1Canvas/mSelectTab1BgImage");
        }
        return this.mSelectTab1BgImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mTab1Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mTab1Button");
        }));
        this.mTab1Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTab1TextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallTab1_Generate = __decorate([ UIBind("UI/module/MallModule/MallTab1.ui") ], MallTab1_Generate);

var MallTab1_Generate$1 = MallTab1_Generate;

var foreign178 = Object.freeze({
    __proto__: null,
    default: MallTab1_Generate$1
});

class MallTab1 extends MallTab1_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tab1Id = 0;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mTab1Button.onClicked.add(this.addTab1Button.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectTab1Action.add(this.addSelectTab1Action.bind(this));
    }
    addTab1Button() {
        this.getMallModuleC.onSelectTab1Action.call(this.tab1Id);
    }
    initTab1(tab1Id) {
        this.tab1Id = tab1Id;
        this.mTab1TextBlock.text = GameConfig.Tab1.getElement(this.tab1Id).Text;
    }
    addSelectTab1Action(tab1Id) {
        this.updateSelectState(this.tab1Id == tab1Id);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        if (this.isSelect) {
            Utils.setWidgetVisibility(this.mSelectTab1BgImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mTab1TextBlock.setFontColorByHex(`000000E5`);
            this.mTab1TextBlock.glyph = mw.UIFontGlyph.Bold;
        } else {
            Utils.setWidgetVisibility(this.mSelectTab1BgImage, mw.SlateVisibility.Collapsed);
            this.mTab1TextBlock.setFontColorByHex(`00000099`);
            this.mTab1TextBlock.glyph = mw.UIFontGlyph.Normal;
        }
    }
}

var foreign118 = Object.freeze({
    __proto__: null,
    default: MallTab1
});

let MallTab2_Generate = class MallTab2_Generate extends UIScript {
    get mTab2Canvas() {
        if (!this.mTab2Canvas_Internal && this.uiWidgetBase) {
            this.mTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas");
        }
        return this.mTab2Canvas_Internal;
    }
    get mTab2Button() {
        if (!this.mTab2Button_Internal && this.uiWidgetBase) {
            this.mTab2Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mTab2Button");
        }
        return this.mTab2Button_Internal;
    }
    get mTab2TextBlock() {
        if (!this.mTab2TextBlock_Internal && this.uiWidgetBase) {
            this.mTab2TextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab2Canvas/mTab2TextBlock");
        }
        return this.mTab2TextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mTab2Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mTab2Button");
        }));
        this.mTab2Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTab2TextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallTab2_Generate = __decorate([ UIBind("UI/module/MallModule/MallTab2.ui") ], MallTab2_Generate);

var MallTab2_Generate$1 = MallTab2_Generate;

var foreign179 = Object.freeze({
    __proto__: null,
    default: MallTab2_Generate$1
});

class MallTab2 extends MallTab2_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tab2Id = 0;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mTab2Button.onClicked.add(this.addTab2Button.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectTab2Action.add(this.addSelectTab2Action.bind(this));
    }
    addTab2Button() {
        this.getMallModuleC.onSelectTab2Action.call(this.tab2Id);
    }
    initTab2(tab2Id) {
        this.tab2Id = tab2Id;
        this.mTab2TextBlock.text = GameConfig.Tab2.getElement(this.tab2Id).Text;
    }
    addSelectTab2Action(tab2Id) {
        this.updateSelectState(this.tab2Id == tab2Id);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        if (this.isSelect) {
            this.mTab2TextBlock.setFontColorByHex(`000000E5`);
            this.mTab2TextBlock.glyph = mw.UIFontGlyph.Bold;
        } else {
            this.mTab2TextBlock.setFontColorByHex(`00000099`);
            this.mTab2TextBlock.glyph = mw.UIFontGlyph.Normal;
        }
    }
}

var foreign119 = Object.freeze({
    __proto__: null,
    default: MallTab2
});

let MallTab3_Generate = class MallTab3_Generate extends UIScript {
    get mTab3Canvas() {
        if (!this.mTab3Canvas_Internal && this.uiWidgetBase) {
            this.mTab3Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab3Canvas");
        }
        return this.mTab3Canvas_Internal;
    }
    get mTab3Button() {
        if (!this.mTab3Button_Internal && this.uiWidgetBase) {
            this.mTab3Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab3Canvas/mTab3Button");
        }
        return this.mTab3Button_Internal;
    }
    get mTab3TextBlock() {
        if (!this.mTab3TextBlock_Internal && this.uiWidgetBase) {
            this.mTab3TextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTab3Canvas/mTab3TextBlock");
        }
        return this.mTab3TextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mTab3Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mTab3Button");
        }));
        this.mTab3Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTab3TextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallTab3_Generate = __decorate([ UIBind("UI/module/MallModule/MallTab3.ui") ], MallTab3_Generate);

var MallTab3_Generate$1 = MallTab3_Generate;

var foreign180 = Object.freeze({
    __proto__: null,
    default: MallTab3_Generate$1
});

class MallTab3 extends MallTab3_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.tab3Id = 0;
        this.isSelect = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.updateSelectStateUI();
    }
    bindButton() {
        this.mTab3Button.onClicked.add(this.addTab3Button.bind(this));
    }
    bindAction() {
        this.getMallModuleC.onSelectTab3Action.add(this.addSelectTab3Action.bind(this));
    }
    addTab3Button() {
        this.getMallModuleC.onSelectTab3Action.call(this.tab3Id);
    }
    initTab3(tab3Id) {
        this.tab3Id = tab3Id;
        this.mTab3TextBlock.text = GameConfig.Tab3.getElement(this.tab3Id).Text;
    }
    addSelectTab3Action(tab3Id) {
        this.updateSelectState(this.tab3Id == tab3Id);
    }
    updateSelectState(isSelect) {
        if (this.isSelect == isSelect) return;
        this.isSelect = isSelect;
        this.updateSelectStateUI();
    }
    updateSelectStateUI() {
        if (this.isSelect) {
            this.mTab3TextBlock.setFontColorByHex(`000000E5`);
            this.mTab3TextBlock.glyph = mw.UIFontGlyph.Bold;
        } else {
            this.mTab3TextBlock.setFontColorByHex(`00000099`);
            this.mTab3TextBlock.glyph = mw.UIFontGlyph.Normal;
        }
    }
}

var foreign120 = Object.freeze({
    __proto__: null,
    default: MallTab3
});

class MallPanel extends MallPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.currentSomatotype = -1;
        this.tab1Elements = [];
        this.tab1Ids = [];
        this.tab1Id = 0;
        this.tab2Ids = [];
        this.tab2Id = 0;
        this.tab3Ids = [];
        this.tab3Id = 0;
        this.currentTabType = TabType.None;
        this.tabIdDataMap = new Map;
        this.mallItem_Color = [];
        this.mallItem_Small = [];
        this.mallItem_Big = [];
        this.mallItem_Character = [];
        this.mallItemAssetIds = [];
        this.mallItemMap = new Map;
        this.mallItemHasBig = [ Tab2Type.Tab2_BodyType, Tab2Type.Tab2_Outfit, Tab3Type.Tab3_DailyStyling_Suit1, Tab3Type.Tab3_DailyStyling_Suit2, Tab3Type.Tab3_MuppetStyling_Suit, Tab3Type.Tab3_HeroStyling_Suit, Tab3Type.Tab3_FantasyModeling_Suit, Tab3Type.Tab3_HolidayStyling_Suit, Tab3Type.Tab3_ScienceFictionStyling_Suit, Tab3Type.Tab3_AncientMolding_Suit ];
        this.mallItemHasColor = [ Tab2Type.Tab2_SkinTone ];
        this.mallItemHasCharacter = [ Tab1Type.Tab1_Collection ];
        this.currentConfigId = 0;
        this.mallTab1s = [];
        this.mallTab2s = [];
        this.mallTab3s = [];
        this.mallItem_Selfs = [];
        this.moveId = -1;
        this.moveVec = [];
        this.dir = 0;
        this.onMoveTouchEvent = (widget, event, x, y, inPointerEvent) => {
            if (this.movePos) {
                if (event == Enums.TouchEvent.DOWN) {
                    if (this.moveId < 0) {
                        this.moveId = inPointerEvent.pointerIndex;
                        this.moveVec[0] = x;
                        this.moveVec[1] = y;
                    }
                } else if (event == Enums.TouchEvent.MOVE) {
                    if (this.moveId >= 0) {
                        let xoffset = x - this.moveVec[0];
                        let yoffset = y - this.moveVec[1];
                        this.dir = 0;
                        if (Math.abs(xoffset) > Math.abs(yoffset)) {
                            this.dir = Math.floor(xoffset);
                        }
                        this.moveVec[0] = x;
                        this.moveVec[1] = y;
                    }
                } else if (event == Enums.TouchEvent.UP) {
                    if (this.moveId >= 0) {
                        this.moveId = -1;
                        this.dir = 0;
                    }
                }
            }
        };
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        Utils.setWidgetVisibility(this.mTouchImage, mw.SlateVisibility.Collapsed);
        this.mSaveTextBlock.text = GameConfig.Language.Text_FreeSave.Value;
        this.mResetTextBlock.text = GameConfig.Language.Text_ResetImage.Value;
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mResetButton.onClicked.add(this.addResetButton.bind(this));
        this.mSaveButton.onClicked.add(this.addSaveButton.bind(this));
        this.mSexButton.onClicked.add(this.addSexButton.bind(this));
    }
    addCloseButton() {
        this.getMallModuleC.onCloseMallPanelAction.call();
    }
    addResetButton() {
        this.getMallModuleC.onResetAction.call();
    }
    addSaveButton() {
        this.getMallModuleC.onSaveAction.call();
    }
    addSexButton() {
        this.getMallModuleC.onSexAction.call();
    }
    switchSexImage(somatotype) {
        if (this.currentSomatotype == somatotype) return;
        this.currentSomatotype = somatotype;
        if (somatotype % 2 == 0) {
            this.mSexButton.normalImageGuid = `311549`;
        } else {
            this.mSexButton.normalImageGuid = `311563`;
        }
    }
    bindAction() {
        this.getMallModuleC.onSelectTab1Action.add(this.addSelectTab1Action.bind(this));
        this.getMallModuleC.onSelectTab2Action.add(this.addSelectTab2Action.bind(this));
        this.getMallModuleC.onSelectTab3Action.add(this.addSelectTab3Action.bind(this));
    }
    checkSkinToneMallItemStateAndShowMallPanel() {
        this.onOffLeftCanvas(true);
        this.checkSkinToneMallItemState();
    }
    initMallPanel(somatotype, usingAssetIdMap) {
        this.clearTabIdDataMap();
        this.switchSexImage(somatotype);
        this.refreshMallItemSelf(usingAssetIdMap);
        this.initTab1();
    }
    initTab1() {
        this.tab1Elements = GameConfig.Tab1.getAllElement();
        if (!this.tab1Elements || this.tab1Elements?.length == 0) {
            this.tab1Ids.length = 0;
            this.tab1Id = 0;
            this.hideTab123Canvas();
            this.initItem(TabType.None);
            return;
        }
        this.showTab1Canvas();
        this.tab1Ids.length = 0;
        this.tab1Elements.forEach((value => {
            this.tab1Ids.push(value.ID);
        }));
        this.updateTab1();
        this.tab1Id = this.tab1Ids[0];
        this.getMallModuleC.onSelectTab1Action.call(this.tab1Id);
        this.initTab2();
    }
    initTab2() {
        let tab1Element = GameConfig.Tab1.getElement(this.tab1Id);
        if (!tab1Element || !tab1Element?.Tab2 || tab1Element.Tab2?.length == 0) {
            this.tab2Ids.length = 0;
            this.tab2Id = 0;
            this.hideTab23Canvas();
            this.initItem(TabType.Tab1);
            return;
        }
        this.showTab2Canvas();
        this.tab2Ids.length = 0;
        this.tab2Ids = Utils.copyArray(tab1Element.Tab2);
        this.updateTab2();
        this.tab2Id = this.getTab2();
        this.getMallModuleC.onSelectTab2Action.call(this.tab2Id);
        this.initTab3();
    }
    initTab3() {
        let tab2Element = GameConfig.Tab2.getElement(this.tab2Id);
        if (!tab2Element || !tab2Element?.Tab3 || tab2Element.Tab3?.length == 0) {
            this.tab3Ids.length = 0;
            this.tab3Id = 0;
            this.hideTab3Canvas();
            this.initItem(TabType.Tab2);
            return;
        }
        this.showTab3Canvas();
        this.tab3Ids.length = 0;
        this.tab3Ids = Utils.copyArray(tab2Element.Tab3);
        this.updateTab3();
        this.tab3Id = this.getTab3();
        this.getMallModuleC.onSelectTab3Action.call(this.tab3Id);
        this.initItem(TabType.Tab3);
    }
    initItem(tabType) {
        this.currentTabType = tabType;
        this.calculateItemCanvas(tabType);
        switch (tabType) {
          case TabType.None:
            this.clearTabIdDataMap();
            break;

          case TabType.Tab1:
            this.initTab1IdDataMap();
            console.error(`tab1Id:${this.tab1Id}`);
            this.initTab1Item();
            break;

          case TabType.Tab2:
            this.initTab2IdDataMap();
            console.error(`tab2Id:${this.tab2Id}`);
            this.initTab2Item();
            break;

          case TabType.Tab3:
            this.initTab3IdDataMap();
            console.error(`tab3Id:${this.tab3Id}`);
            this.initTab3Item();
            break;
        }
    }
    calculateItemCanvas(tabType) {
        let positionY = 0;
        let sizeY = 0;
        switch (tabType) {
          case TabType.Tab1:
            positionY = this.mTab1Canvas.position.y;
            sizeY = this.mTab1Canvas.size.y;
            break;

          case TabType.Tab2:
            positionY = this.mTab2Canvas.position.y;
            sizeY = this.mTab2Canvas.size.y;
            break;

          case TabType.Tab3:
            positionY = this.mTab3Canvas.position.y;
            sizeY = this.mTab3Canvas.size.y;
            break;

          default:
            positionY = this.mTab3Canvas.position.y;
            sizeY = this.mTab3Canvas.size.y;
            break;
        }
        this.mItemScrollBox.position = new mw.Vector(0, positionY + sizeY);
        this.mItemScrollBox.size = new mw.Vector(this.mItemScrollBox.size.x, this.rootCanvas.size.y - this.mItemScrollBox.position.y);
    }
    clearTabIdDataMap() {
        this.tabIdDataMap.clear();
    }
    getTab2() {
        let tab2Id = this.tab2Ids[this.getDefaultTab2Index];
        if (this.tabIdDataMap.has(this.tab1Id)) {
            let tab2IdDataMap = this.tabIdDataMap.get(this.tab1Id).tabIdDataMap;
            if (!tab2IdDataMap || tab2IdDataMap.size == 0) return tab2Id;
            tab2IdDataMap.forEach(((value, key) => {
                if (value.isOn) tab2Id = key;
            }));
            return tab2Id;
        } else {
            return tab2Id;
        }
    }
    get getDefaultTab2Index() {
        if (this.tab1Id == Tab1Type.Tab1_Appearance) return 5;
        if (this.tab1Id == Tab1Type.Tab1_Clothing) return 0;
        return 0;
    }
    getTab3() {
        let tab3Id = this.tab3Ids[0];
        if (this.tabIdDataMap.has(this.tab1Id)) {
            let tab2IdDataMap = this.tabIdDataMap.get(this.tab1Id).tabIdDataMap;
            if (!tab2IdDataMap || tab2IdDataMap.size == 0) return tab3Id;
            if (tab2IdDataMap.has(this.tab2Id)) {
                let tab3IdDataMap = tab2IdDataMap.get(this.tab2Id).tabIdDataMap;
                if (!tab3IdDataMap || tab3IdDataMap.size == 0) return tab3Id;
                tab3IdDataMap.forEach(((value, key) => {
                    if (value.isOn) tab3Id = key;
                }));
                return tab3Id;
            } else {
                return tab3Id;
            }
        } else {
            return tab3Id;
        }
    }
    initTab1IdDataMap() {
        if (this.tabIdDataMap.has(this.tab1Id)) ; else {
            let tab1IdData = new TabIdData;
            tab1IdData.tabId = this.tab1Id;
            this.tabIdDataMap.set(this.tab1Id, tab1IdData);
        }
        this.tabIdDataMap.forEach(((value, key) => {
            value.isOn = key == this.tab1Id;
        }));
    }
    initTab2IdDataMap() {
        let tab1IdData = null;
        if (this.tabIdDataMap.has(this.tab1Id)) {
            tab1IdData = this.tabIdDataMap.get(this.tab1Id);
            if (tab1IdData.tabIdDataMap.has(this.tab2Id)) ; else {
                let tab2IdData = new TabIdData;
                tab2IdData.tabId = this.tab2Id;
                tab1IdData.tabIdDataMap.set(this.tab2Id, tab2IdData);
            }
            tab1IdData.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab2Id;
            }));
        } else {
            tab1IdData = new TabIdData;
            tab1IdData.tabId = this.tab1Id;
            let tab2IdData = new TabIdData;
            tab2IdData.tabId = this.tab2Id;
            tab1IdData.tabIdDataMap.set(this.tab2Id, tab2IdData);
            tab1IdData.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab2Id;
            }));
            this.tabIdDataMap.set(this.tab1Id, tab1IdData);
            this.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab1Id;
            }));
        }
    }
    initTab3IdDataMap() {
        let tab1IdData = null;
        if (this.tabIdDataMap.has(this.tab1Id)) {
            tab1IdData = this.tabIdDataMap.get(this.tab1Id);
            let tab2IdData = new TabIdData;
            if (tab1IdData.tabIdDataMap.has(this.tab2Id)) {
                tab2IdData = tab1IdData.tabIdDataMap.get(this.tab2Id);
                if (tab2IdData.tabIdDataMap.has(this.tab3Id)) ; else {
                    let tab3IdData = new TabIdData;
                    tab3IdData.tabId = this.tab3Id;
                    tab2IdData.tabIdDataMap.set(this.tab3Id, tab3IdData);
                }
                tab2IdData.tabIdDataMap.forEach(((value, key) => {
                    value.isOn = key == this.tab3Id;
                }));
            } else {
                tab2IdData.tabId = this.tab2Id;
                tab1IdData.tabIdDataMap.set(this.tab2Id, tab2IdData);
                tab1IdData.tabIdDataMap.forEach(((value, key) => {
                    value.isOn = key == this.tab2Id;
                }));
                let tab3IdData = new TabIdData;
                tab3IdData.tabId = this.tab3Id;
                tab2IdData.tabIdDataMap.set(this.tab3Id, tab3IdData);
                tab2IdData.tabIdDataMap.forEach(((value, key) => {
                    value.isOn = key == this.tab3Id;
                }));
            }
        } else {
            tab1IdData = new TabIdData;
            tab1IdData.tabId = this.tab1Id;
            let tab2IdData = new TabIdData;
            tab2IdData.tabId = this.tab2Id;
            tab1IdData.tabIdDataMap.set(this.tab2Id, tab2IdData);
            tab1IdData.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab2Id;
            }));
            let tab3IdData = new TabIdData;
            tab3IdData.tabId = this.tab3Id;
            tab2IdData.tabIdDataMap.set(this.tab3Id, tab3IdData);
            tab2IdData.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab3Id;
            }));
            this.tabIdDataMap.set(this.tab1Id, tab1IdData);
            this.tabIdDataMap.forEach(((value, key) => {
                value.isOn = key == this.tab1Id;
            }));
        }
    }
    clearMallItemData() {
        this.mallItemMap.clear();
        this.mallItemAssetIds.length = 0;
    }
    initTab2Item() {
        this.clearMallItemData();
        switch (this.tab2Id) {
          case Tab2Type.Tab2_BodyType:
            GameConfig.BodyType.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab2Type.Tab2_SkinTone:
            GameConfig.SkinTone.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.SkinTone);
            }));
            break;

          case Tab2Type.Tab2_Face:
            GameConfig.Face.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Eyebrows:
            GameConfig.Eyebrows.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Expression:
            GameConfig.FaceExpression.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab2Type.Tab2_Outfit:
            GameConfig.Outfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab2Type.Tab2_Top:
            GameConfig.Top.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Bottom:
            GameConfig.Bottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Shoes:
            GameConfig.Shoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Gloves:
            GameConfig.Gloves.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab2Type.Tab2_Pet:
            GameConfig.Pet.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;
        }
        this.currentConfigId = this.tab2Id;
        this.initMallItem();
    }
    initTab3Item() {
        this.clearMallItemData();
        switch (this.tab3Id) {
          case Tab3Type.Tab3_PupilStyle:
            GameConfig.PupilStyle.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_Lens:
            GameConfig.Lens.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_UpperHighlight:
            GameConfig.UpperHighlight.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_LowerHighlight:
            GameConfig.LowerHighlight.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_Eyelashes:
            GameConfig.Eyelashes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_Eyeshadow:
            GameConfig.Eyeshadow.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_Blush:
            GameConfig.Blush.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_LipMakeup:
            GameConfig.LipMakeup.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_FaceTattoo:
            break;

          case Tab3Type.Tab3_FullHair:
            GameConfig.FullHair.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_FrontHair:
            GameConfig.FrontHair.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_BackHair:
            GameConfig.BackHair.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(value.AssetId);
            }));
            break;

          case Tab3Type.Tab3_LeftHand:
            GameConfig.LeftHand.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_RightHand:
            GameConfig.RightHand.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Back:
            GameConfig.Back.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Ear:
            GameConfig.Ear.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Face:
            GameConfig.Facing.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Hip:
            GameConfig.Hip.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Shoulder:
            GameConfig.Shoulder.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Effects:
            GameConfig.Effects.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Trailing:
            GameConfig.Trailing.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_BackPet:
            GameConfig.BackPet.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_DailyStyling_Suit1:
            GameConfig.DailyStylingOutfit1.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_DailyStyling_Suit2:
            GameConfig.DailyStylingOutfit2.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_MuppetStyling_Suit:
            GameConfig.MuppetStylingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_HeroStyling_Suit:
            GameConfig.HeroStylingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_FantasyModeling_Suit:
            GameConfig.FantasyModelingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_HolidayStyling_Suit:
            GameConfig.HolidayStylingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_ScienceFictionStyling_Suit:
            GameConfig.ScienceFictionStylingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_AncientMolding_Suit:
            GameConfig.AncientMoldingOutfit.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_LongSinglePiece_Top:
            GameConfig.LongSinglePieceTop.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_ShortJacket_Top:
            GameConfig.ShortJacketTop.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_ShortSinglePiece_Top:
            GameConfig.ShortSinglePieceTop.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Suit_Top:
            GameConfig.SuitTop.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_ALongCoat_Top:
            GameConfig.ALongCoatTop.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_ShortSkirt_Bottom:
            GameConfig.ShortSkirtBottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_LongPants_Bottom:
            GameConfig.LongPantsBottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Shorts_Bottom:
            GameConfig.ShortsBottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_LongSkirt_Bottom:
            GameConfig.LongSkirtBottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Tights_Bottom:
            GameConfig.TightsBottom.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Gloves_Gloves:
            GameConfig.GlovesGloves.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Accessories_Gloves:
            GameConfig.AccessoriesGloves.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Everyday_Shoes:
            GameConfig.EverydayShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_Boots_Shoes:
            GameConfig.BootsShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_FootCover_Shoes:
            GameConfig.FootCoverShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_NakedDress_Shoes:
            GameConfig.NakedDressShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_HighHeels_Shoes:
            GameConfig.HighHeelsShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;

          case Tab3Type.Tab3_SportsShoes_Shoes:
            GameConfig.SportsShoesShoes.getAllElement().forEach((value => {
                if (value.SexType == 0 || value.SexType == this.currentSomatotype) this.mallItemAssetIds.push(`${value.ID}`);
            }));
            break;
        }
        this.currentConfigId = this.tab3Id;
        this.initMallItem();
    }
    initTab1Item() {
        this.clearMallItemData();
        switch (this.tab1Id) {
          case Tab1Type.Tab1_Collection:
            this.mallItemAssetIds.push(`0`);
            let keys = this.getMallModuleC.getCharacterDataKeys;
            if (keys && keys.length > 0) {
                this.mallItemAssetIds = this.mallItemAssetIds.concat(keys);
            }
            break;
        }
        this.currentConfigId = this.tab1Id;
        this.initMallItem();
    }
    thisFeatureIsNotEnabled() {
        if (!this.mallItemAssetIds || this.mallItemAssetIds.length == 0) {
            Notice.showDownNotice(GameConfig.Language.Text_ThisFeatureIsNotEnabled.Value);
        }
    }
    hideOtherMallItemNoHasColor() {
        this.mallItem_Small.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Big.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Character.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
    }
    hideOtherMallItemNoHasBig() {
        this.mallItem_Small.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Color.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Character.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
    }
    hideOtherMallItemNoHasSmall() {
        this.mallItem_Big.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Color.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Character.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
    }
    hideOtherMallItemNoHasCharacter() {
        this.mallItem_Color.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Small.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
        this.mallItem_Big.forEach((value => {
            Utils.setWidgetVisibility(value.uiObject, mw.SlateVisibility.Collapsed);
        }));
    }
    initMallItem() {
        this.thisFeatureIsNotEnabled();
        if (this.mallItemHasBig.includes(this.currentConfigId)) {
            this.hideOtherMallItemNoHasBig();
            this.initMallItemBig();
        } else if (this.mallItemHasColor.includes(this.currentConfigId)) {
            this.hideOtherMallItemNoHasColor();
            this.initMallItemColor();
        } else if (this.mallItemHasCharacter.includes(this.currentConfigId)) {
            this.hideOtherMallItemNoHasCharacter();
            this.initMallItemCharacter();
        } else {
            this.hideOtherMallItemNoHasSmall();
            this.initMallItemSmall();
        }
        this.checkMallItemState();
        this.getMallModuleC.onSwitchCameraAction.call(Mall.isHeadTabId(this.currentConfigId) ? 1 : 2);
    }
    initMallItemBig() {
        if (this.mallItemAssetIds.length > this.mallItem_Big.length) {
            for (let i = 0; i < this.mallItem_Big.length; ++i) {
                this.mallItem_Big[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Big[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Big[i]);
            }
            for (let i = this.mallItem_Big.length; i < this.mallItemAssetIds.length; ++i) {
                let mallItem_Big = UIService.create(MallItem_Big);
                mallItem_Big.initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                this.mItemContentCanvas.addChild(mallItem_Big.uiObject);
                this.mallItem_Big.push(mallItem_Big);
                this.mallItemMap.set(this.mallItemAssetIds[i], mallItem_Big);
            }
        } else {
            for (let i = 0; i < this.mallItemAssetIds.length; ++i) {
                this.mallItem_Big[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Big[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Big[i]);
            }
            for (let i = this.mallItemAssetIds.length; i < this.mallItem_Big.length; ++i) {
                Utils.setWidgetVisibility(this.mallItem_Big[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    initMallItemSmall() {
        if (this.mallItemAssetIds.length > this.mallItem_Small.length) {
            for (let i = 0; i < this.mallItem_Small.length; ++i) {
                this.mallItem_Small[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Small[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Small[i]);
            }
            for (let i = this.mallItem_Small.length; i < this.mallItemAssetIds.length; ++i) {
                let mallItem_Small = UIService.create(MallItem_Small);
                mallItem_Small.initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                this.mItemContentCanvas.addChild(mallItem_Small.uiObject);
                this.mallItem_Small.push(mallItem_Small);
                this.mallItemMap.set(this.mallItemAssetIds[i], mallItem_Small);
            }
        } else {
            for (let i = 0; i < this.mallItemAssetIds.length; ++i) {
                this.mallItem_Small[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Small[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Small[i]);
            }
            for (let i = this.mallItemAssetIds.length; i < this.mallItem_Small.length; ++i) {
                Utils.setWidgetVisibility(this.mallItem_Small[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    initMallItemColor() {
        if (this.mallItemAssetIds.length > this.mallItem_Color.length) {
            for (let i = 0; i < this.mallItem_Color.length; ++i) {
                this.mallItem_Color[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Color[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Color[i]);
            }
            for (let i = this.mallItem_Color.length; i < this.mallItemAssetIds.length; ++i) {
                let mallItem_Color = UIService.create(MallItem_Color);
                mallItem_Color.initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                this.mItemContentCanvas.addChild(mallItem_Color.uiObject);
                this.mallItem_Color.push(mallItem_Color);
                this.mallItemMap.set(this.mallItemAssetIds[i], mallItem_Color);
            }
        } else {
            for (let i = 0; i < this.mallItemAssetIds.length; ++i) {
                this.mallItem_Color[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i]);
                Utils.setWidgetVisibility(this.mallItem_Color[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Color[i]);
            }
            for (let i = this.mallItemAssetIds.length; i < this.mallItem_Color.length; ++i) {
                Utils.setWidgetVisibility(this.mallItem_Color[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    initMallItemCharacter() {
        if (this.mallItemAssetIds.length > this.mallItem_Character.length) {
            for (let i = 0; i < this.mallItem_Character.length; ++i) {
                this.mallItem_Character[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i], this.mallItemAssetIds.length - 1);
                Utils.setWidgetVisibility(this.mallItem_Character[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Character[i]);
            }
            for (let i = this.mallItem_Character.length; i < this.mallItemAssetIds.length; ++i) {
                let mallItem_Character = UIService.create(MallItem_Character);
                mallItem_Character.initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i], this.mallItemAssetIds.length - 1);
                this.mItemContentCanvas.addChild(mallItem_Character.uiObject);
                this.mallItem_Character.push(mallItem_Character);
                this.mallItemMap.set(this.mallItemAssetIds[i], mallItem_Character);
            }
        } else {
            for (let i = 0; i < this.mallItemAssetIds.length; ++i) {
                this.mallItem_Character[i].initItem(this.currentTabType, this.currentConfigId, this.mallItemAssetIds[i], this.mallItemAssetIds.length - 1);
                Utils.setWidgetVisibility(this.mallItem_Character[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallItemMap.set(this.mallItemAssetIds[i], this.mallItem_Character[i]);
            }
            for (let i = this.mallItemAssetIds.length; i < this.mallItem_Character.length; ++i) {
                Utils.setWidgetVisibility(this.mallItem_Character[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    checkMallItemState() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let assetId = null;
            switch (this.currentConfigId) {
              case Tab2Type.Tab2_SkinTone:
                assetId = await this.getMallModuleC.getCharacterAssetId(this.currentConfigId);
                let colorKey = `ColorPick`;
                for (let key of this.mallItemMap.keys()) {
                    if (Utils.isEqulaLinearColor(assetId, Utils.colorHexToLinearColorToString(key))) {
                        colorKey = key;
                        break;
                    }
                }
                if (!this.mallItemMap.has(colorKey)) return;
                this.mallItemMap.get(colorKey).updateSelectState(true);
                break;

              default:
                assetId = await this.getMallModuleC.getCharacterAssetId(this.currentConfigId);
                if (!assetId || assetId.length == 0 || !this.mallItemMap.has(assetId)) return;
                this.mallItemMap.get(assetId).updateSelectState(true);
                break;
            }
        }));
    }
    checkSkinToneMallItemState() {
        if (this.currentConfigId != Tab2Type.Tab2_SkinTone) return;
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let assetId = await this.getMallModuleC.getCharacterAssetId(this.currentConfigId);
            let isHasSelect = false;
            this.mallItemMap.forEach(((value, key) => {
                if (Utils.isEqulaLinearColor(Utils.colorHexToLinearColorToString(key), assetId)) {
                    isHasSelect = true;
                    value.updateSelectState(true);
                } else {
                    value.updateSelectState(false);
                }
            }));
            if (!isHasSelect) this.mallItemMap.get(`ColorPick`).updateSelectState(true);
        }));
    }
    hideTab123Canvas() {
        Utils.setWidgetVisibility(this.mTab1Canvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mTab2Canvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mTab3Canvas, mw.SlateVisibility.Collapsed);
    }
    hideTab23Canvas() {
        Utils.setWidgetVisibility(this.mTab2Canvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mTab3Canvas, mw.SlateVisibility.Collapsed);
    }
    hideTab3Canvas() {
        Utils.setWidgetVisibility(this.mTab3Canvas, mw.SlateVisibility.Collapsed);
    }
    showTab1Canvas() {
        Utils.setWidgetVisibility(this.mTab1Canvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    showTab2Canvas() {
        Utils.setWidgetVisibility(this.mTab2Canvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    showTab3Canvas() {
        Utils.setWidgetVisibility(this.mTab3Canvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    addSelectTab1Action(tab1Id) {
        if (this.tab1Id == tab1Id) return;
        this.tab1Id = tab1Id;
        this.initTab2();
    }
    addSelectTab2Action(tab2Id) {
        if (this.tab2Id == tab2Id) return;
        this.tab2Id = tab2Id;
        this.initTab3();
    }
    addSelectTab3Action(tab3Id) {
        if (this.tab3Id == tab3Id) return;
        this.tab3Id = tab3Id;
        this.initItem(TabType.Tab3);
    }
    updateTab1() {
        if (this.tab1Ids.length >= this.mallTab1s.length) {
            for (let i = 0; i < this.mallTab1s.length; ++i) {
                this.mallTab1s[i].initTab1(this.tab1Ids[i]);
                Utils.setWidgetVisibility(this.mallTab1s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.mallTab1s.length; i < this.tab1Ids.length; ++i) {
                let mallTab1 = UIService.create(MallTab1);
                mallTab1.initTab1(this.tab1Ids[i]);
                this.mTab1ContentCanvas.addChild(mallTab1.uiObject);
                this.mallTab1s.push(mallTab1);
            }
        } else {
            for (let i = 0; i < this.tab1Ids.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab1s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallTab1s[i].initTab1(this.tab1Ids[i]);
            }
            for (let i = this.tab1Ids.length; i < this.mallTab1s.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab1s[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    updateTab2() {
        if (this.tab2Ids.length >= this.mallTab2s.length) {
            for (let i = 0; i < this.mallTab2s.length; ++i) {
                this.mallTab2s[i].initTab2(this.tab2Ids[i]);
                Utils.setWidgetVisibility(this.mallTab2s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.mallTab2s.length; i < this.tab2Ids.length; ++i) {
                let mallTab2 = UIService.create(MallTab2);
                mallTab2.initTab2(this.tab2Ids[i]);
                this.mTab2ContentCanvas.addChild(mallTab2.uiObject);
                this.mallTab2s.push(mallTab2);
            }
        } else {
            for (let i = 0; i < this.tab2Ids.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab2s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallTab2s[i].initTab2(this.tab2Ids[i]);
            }
            for (let i = this.tab2Ids.length; i < this.mallTab2s.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab2s[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    updateTab3() {
        if (this.tab3Ids.length >= this.mallTab3s.length) {
            for (let i = 0; i < this.mallTab3s.length; ++i) {
                this.mallTab3s[i].initTab3(this.tab3Ids[i]);
                Utils.setWidgetVisibility(this.mallTab3s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.mallTab3s.length; i < this.tab3Ids.length; ++i) {
                let mallTab3 = UIService.create(MallTab3);
                mallTab3.initTab3(this.tab3Ids[i]);
                this.mTab3ContentCanvas.addChild(mallTab3.uiObject);
                this.mallTab3s.push(mallTab3);
            }
        } else {
            for (let i = 0; i < this.tab3Ids.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab3s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.mallTab3s[i].initTab3(this.tab3Ids[i]);
            }
            for (let i = this.tab3Ids.length; i < this.mallTab3s.length; ++i) {
                Utils.setWidgetVisibility(this.mallTab3s[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    refreshMallItemSelf(usingAssetIdMap, isCheck = false) {
        if (isCheck) this.checkMallItemState();
        let valueArr = Array.from(usingAssetIdMap);
        if (this.mallItem_Selfs.length > valueArr.length) {
            for (let i = 0; i < valueArr.length; ++i) {
                this.mallItem_Selfs[i].initItem(valueArr[i][0], valueArr[i][1]);
                Utils.setWidgetVisibility(this.mallItem_Selfs[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = valueArr.length; i < this.mallItem_Selfs.length; ++i) {
                Utils.setWidgetVisibility(this.mallItem_Selfs[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        } else {
            for (let i = 0; i < this.mallItem_Selfs.length; ++i) {
                this.mallItem_Selfs[i].initItem(valueArr[i][0], valueArr[i][1]);
                Utils.setWidgetVisibility(this.mallItem_Selfs[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.mallItem_Selfs.length; i < valueArr.length; ++i) {
                let mallItem_Self = UIService.create(MallItem_Self);
                mallItem_Self.initItem(valueArr[i][0], valueArr[i][1]);
                this.mSelfContentCanvas.addChild(mallItem_Self.uiObject);
                this.mallItem_Selfs.push(mallItem_Self);
            }
        }
    }
    onShow(...params) {
        Event.dispatchToLocal(EventType.OnOffMainUI, false);
    }
    onHide() {
        Event.dispatchToLocal(EventType.OnOffMainUI, true);
    }
    onOffLeftCanvas(isOpen) {
        Utils.setWidgetVisibility(this.mLeftCanvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mSelfCanvas, isOpen ? mw.SlateVisibility.SelfHitTestInvisible : mw.SlateVisibility.Collapsed);
    }
    initMallRot() {
        this.moveVec = [];
        mw.TimeUtil.delayExecute((() => {
            this.movePos = this.mTouchImage.position.multiply(1);
        }), 3);
    }
    onUpdate(dt) {
        if (this.dir != 0) {
            this.getMallModuleC.addRoatation(this.dir * dt);
            this.dir = 0;
        }
    }
    onTouchStarted(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchStarted(inGemory, inPointerEvent);
    }
    onTouchMoved(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchMoved(inGemory, inPointerEvent);
    }
    onTouchEnded(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchEnded(inGemory, inPointerEvent);
    }
}

var foreign117 = Object.freeze({
    __proto__: null,
    default: MallPanel
});

class ColorPickPanel extends ColorPickPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.mallModuleC = null;
        this.mallPanel = null;
        this.colorPickText = null;
        this.colorPickTab1 = null;
        this.currenrColorPickTab2Index = 0;
        this.colorPickTab2Datas = [];
        this.colorPickTab2s = [];
        this.colorPickTab3Colors = [];
        this.colorPickTab3s = [];
        this.colorPickTab3Map = new Map;
        this.isLockColorPick = false;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    get getMallPanel() {
        if (!this.mallPanel) {
            this.mallPanel = UIService.getUI(MallPanel);
        }
        return this.mallPanel;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
        this.bindAction();
    }
    initUI() {
        this.mSaveTextBlock.text = StringUtil.format(GameConfig.Language.Text_SaveColor.Value, ``);
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mSaveButton.onClicked.add(this.addSaveButton.bind(this));
    }
    addCloseButton() {
        this.hide();
        this.getMallModuleC.onCloseColorPickPanelAction.call();
    }
    addSaveButton() {
        this.hide();
        this.getMallModuleC.onSaveColorPickPanelAction.call();
    }
    bindAction() {
        this.getMallModuleC.onSelectColorPickTab2Action.add(this.addSelectColorPickTab2Action.bind(this));
        this.mColorPick.onColorChanged.add(this.addColorChanged.bind(this));
    }
    showColorPickPanel(tab1Text, name, colorPickTab2Datas, colorPickTab3Colors) {
        this.colorPickText = tab1Text;
        this.mSaveTextBlock.text = StringUtil.format(GameConfig.Language.Text_SaveColor.Value, name);
        this.refreshColorPickTab1();
        this.colorPickTab2Datas = colorPickTab2Datas;
        this.refreshColorPickTab2();
        this.colorPickTab3Colors = colorPickTab3Colors;
        this.refreshColorPickTab3();
        this.refreshColorPick();
        this.show();
        this.getMallPanel.onOffLeftCanvas(false);
    }
    refreshColorPickTab1() {
        if (!this.colorPickTab1) {
            this.colorPickTab1 = mw.UIService.getUI(ColorPickTab1);
            this.mTab1ContentCanvas.addChild(this.colorPickTab1.uiObject);
        }
        this.colorPickTab1.refreshColorPickTab1(this.colorPickText);
    }
    refreshColorPickTab2() {
        this.currenrColorPickTab2Index = 0;
        if (this.colorPickTab2Datas.length > this.colorPickTab2s.length) {
            for (let i = 0; i < this.colorPickTab2s.length; ++i) {
                this.colorPickTab2s[i].initTab2(i, this.colorPickTab2Datas[i]);
                Utils.setWidgetVisibility(this.colorPickTab2s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.colorPickTab2s.length; i < this.colorPickTab2Datas.length; ++i) {
                let colorPickTab2 = mw.UIService.create(ColorPickTab2);
                this.mTab2ContentCanvas.addChild(colorPickTab2.uiObject);
                colorPickTab2.initTab2(i, this.colorPickTab2Datas[i]);
                this.colorPickTab2s.push(colorPickTab2);
            }
        } else {
            for (let i = 0; i < this.colorPickTab2Datas.length; ++i) {
                this.colorPickTab2s[i].initTab2(i, this.colorPickTab2Datas[i]);
                Utils.setWidgetVisibility(this.colorPickTab2s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.colorPickTab2Datas.length; i < this.colorPickTab2s.length; ++i) {
                Utils.setWidgetVisibility(this.colorPickTab2s[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
        this.colorPickTab2s[this.currenrColorPickTab2Index].updateSelectState(true);
    }
    addSelectColorPickTab2Action(index) {
        if (this.currenrColorPickTab2Index == index) return;
        this.currenrColorPickTab2Index = index;
    }
    refreshColorPickTab3() {
        this.colorPickTab3Map.clear();
        if (this.colorPickTab3Colors.length > this.colorPickTab3s.length) {
            for (let i = 0; i < this.colorPickTab3s.length; ++i) {
                this.colorPickTab3s[i].initColorPickTab3(i, this.colorPickTab3Colors[i]);
                Utils.setWidgetVisibility(this.colorPickTab3s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.colorPickTab3Map.set(this.colorPickTab3Colors[i], this.colorPickTab3s[i]);
            }
            for (let i = this.colorPickTab3s.length; i < this.colorPickTab3Colors.length; ++i) {
                let colorPickTab3 = mw.UIService.create(ColorPickTab3);
                this.mTab3ContentCanvas.addChild(colorPickTab3.uiObject);
                colorPickTab3.initColorPickTab3(i, this.colorPickTab3Colors[i]);
                this.colorPickTab3s.push(colorPickTab3);
                this.colorPickTab3Map.set(this.colorPickTab3Colors[i], colorPickTab3);
            }
        } else {
            for (let i = 0; i < this.colorPickTab3Colors.length; ++i) {
                this.colorPickTab3s[i].initColorPickTab3(i, this.colorPickTab3Colors[i]);
                Utils.setWidgetVisibility(this.colorPickTab3s[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
                this.colorPickTab3Map.set(this.colorPickTab3Colors[i], this.colorPickTab3s[i]);
            }
            for (let i = this.colorPickTab3Colors.length; i < this.colorPickTab3s.length; ++i) {
                Utils.setWidgetVisibility(this.colorPickTab3s[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
        this.checkColorPickTab3();
    }
    checkColorPickTab3() {
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) return;
        let colorKey = this.colorPickTab2Datas[this.currenrColorPickTab2Index].color;
        for (let key of this.colorPickTab3Map.keys()) {
            if (Utils.isEqulaLinearColor(Utils.colorHexToLinearColorToString(key), colorKey)) {
                this.colorPickTab3Map.get(key).updateSelectState(true);
                break;
            }
        }
    }
    refreshColorPick() {
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) return;
        this.isLockColorPick = true;
        this.mColorPick.color = this.colorPickTab2Datas[this.currenrColorPickTab2Index].color;
        this.isLockColorPick = false;
    }
    checkColorPickTab3AndColorPick(color) {
        if (!color) return;
        this.colorPickTab3Map.forEach(((value, key) => {
            value.updateSelectState(Utils.isEqulaLinearColor(Utils.colorHexToLinearColorToString(key), color));
        }));
        this.isLockColorPick = true;
        this.mColorPick.color = color;
        this.isLockColorPick = false;
    }
    refreshColorPickTab2AndColorPick(color) {
        if (!color) return;
        this.isLockColorPick = true;
        this.mColorPick.color = color;
        this.isLockColorPick = false;
        if (this.currenrColorPickTab2Index < 0 || !this.colorPickTab2s || this.currenrColorPickTab2Index >= this.colorPickTab2s.length) return;
        this.colorPickTab2s[this.currenrColorPickTab2Index].refreshColorImage(color);
    }
    addColorChanged(Content) {
        if (this.isLockColorPick) return;
        this.getMallModuleC.onColorPickChangedAction.call(Content);
        this.colorPickTab3Map.forEach(((value, key) => {
            value.updateSelectState(false);
        }));
        if (this.currenrColorPickTab2Index < 0 || !this.colorPickTab2s || this.currenrColorPickTab2Index >= this.colorPickTab2s.length) return;
        this.colorPickTab2s[this.currenrColorPickTab2Index].refreshColorImage(Content);
    }
}

var foreign108 = Object.freeze({
    __proto__: null,
    default: ColorPickPanel
});

let MallTipsPanel_Generate = class MallTipsPanel_Generate extends UIScript {
    get mMainImage() {
        if (!this.mMainImage_Internal && this.uiWidgetBase) {
            this.mMainImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage");
        }
        return this.mMainImage_Internal;
    }
    get mTipsTextBlock() {
        if (!this.mTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mTipsTextBlock");
        }
        return this.mTipsTextBlock_Internal;
    }
    get mContentTextBlock() {
        if (!this.mContentTextBlock_Internal && this.uiWidgetBase) {
            this.mContentTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mContentTextBlock");
        }
        return this.mContentTextBlock_Internal;
    }
    get mCancelButton() {
        if (!this.mCancelButton_Internal && this.uiWidgetBase) {
            this.mCancelButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mCancelButton");
        }
        return this.mCancelButton_Internal;
    }
    get mCancelTextBlock() {
        if (!this.mCancelTextBlock_Internal && this.uiWidgetBase) {
            this.mCancelTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mCancelButton/mCancelTextBlock");
        }
        return this.mCancelTextBlock_Internal;
    }
    get mSureButton() {
        if (!this.mSureButton_Internal && this.uiWidgetBase) {
            this.mSureButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mSureButton");
        }
        return this.mSureButton_Internal;
    }
    get mSureTextBlock() {
        if (!this.mSureTextBlock_Internal && this.uiWidgetBase) {
            this.mSureTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mMainImage/mSureButton/mSureTextBlock");
        }
        return this.mSureTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mCancelButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCancelButton");
        }));
        this.mCancelButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSureButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSureButton");
        }));
        this.mSureButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTipsTextBlock);
        this.initLanguage(this.mContentTextBlock);
        this.initLanguage(this.mCancelTextBlock);
        this.initLanguage(this.mSureTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

MallTipsPanel_Generate = __decorate([ UIBind("UI/module/MallModule/MallTipsPanel.ui") ], MallTipsPanel_Generate);

var MallTipsPanel_Generate$1 = MallTipsPanel_Generate;

var foreign181 = Object.freeze({
    __proto__: null,
    default: MallTipsPanel_Generate$1
});

class MallTipsPanel extends MallTipsPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.sureCallback = null;
        this.cancelCallback = null;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.bindButtons();
    }
    bindButtons() {
        this.mSureButton.onClicked.add(this.addSureButton.bind(this));
        this.mCancelButton.onClicked.add(this.addCancelButton.bind(this));
    }
    addSureButton() {
        if (this.sureCallback) this.sureCallback();
        this.hide();
    }
    addCancelButton() {
        if (this.cancelCallback) this.cancelCallback();
        this.hide();
    }
    showTips(sureCallback, cancelCallback, titleText, contentText, noText, yesText) {
        this.sureCallback = sureCallback;
        this.cancelCallback = cancelCallback;
        this.mTipsTextBlock.text = titleText;
        this.mContentTextBlock.text = contentText;
        this.mCancelTextBlock.text = noText;
        this.mSureTextBlock.text = yesText;
        this.show();
    }
}

var foreign121 = Object.freeze({
    __proto__: null,
    default: MallTipsPanel
});

class MallModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.mallPanel = null;
        this.colorPickPanel = null;
        this.mallTipsPanel = null;
        this.characterModuleC = null;
        this.onSelectTab1Action = new Action1;
        this.onSelectTab2Action = new Action1;
        this.onSelectTab3Action = new Action1;
        this.onSelectItemAction = new Action3;
        this.onDeleteItemAction = new Action3;
        this.onOpenColorPickAction = new Action2;
        this.onResetAction = new Action;
        this.onSaveAction = new Action;
        this.onSexAction = new Action;
        this.onCloseMallPanelAction = new Action;
        this.onSelectColorPickTab2Action = new Action1;
        this.onSelectColorPickTab3Action = new Action1;
        this.onColorPickChangedAction = new Action1;
        this.onCloseColorPickPanelAction = new Action;
        this.onSaveColorPickPanelAction = new Action;
        this.onCloseMallItemSelfAction = new Action2;
        this.usingAssetIdMap = new Map;
        this.usingAssetIds = [];
        this.delaySwitchCameraTabIds = [ Tab1Type.Tab1_Clothing, Tab2Type.Tab2_BodyType ];
        this.isNeedSaveCharacter = false;
        this.decorationIndexMap = new Map;
        this.onSwitchCameraAction = new Action1;
        this.lastCameraType = -1;
        this.mallCharacterRotSpeed = 30;
        this.maleNpc = null;
        this.feMaleNpc = null;
        this.transitionNpc = null;
        this.copyNpc = null;
        this.saveSomatotype = 2;
        this.colorPickTabId = -1;
        this.colorPickTab2Datas = [];
        this.colorPickTab3Colors = [];
        this.colorPickTab2Index = 0;
        this.isNeedSaveColor = false;
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getMallPanel() {
        if (!this.mallPanel) {
            this.mallPanel = UIService.getUI(MallPanel);
        }
        return this.mallPanel;
    }
    get getColorPickPanel() {
        if (!this.colorPickPanel) {
            this.colorPickPanel = UIService.getUI(ColorPickPanel);
        }
        return this.colorPickPanel;
    }
    get getMallTipsPanel() {
        if (!this.mallTipsPanel) {
            this.mallTipsPanel = UIService.getUI(MallTipsPanel);
        }
        return this.mallTipsPanel;
    }
    get getCharacterModuleC() {
        if (!this.characterModuleC) {
            this.characterModuleC = ModuleService.getModule(CharacterModuleC);
        }
        return this.characterModuleC;
    }
    onStart() {
        this.bindAction();
        this.bindEvent();
    }
    onEnterScene(sceneType) {
        this.initNpc();
        this.initShopCamera();
    }
    bindAction() {
        this.getHUDModuleC?.onOpenMallAction.add(this.addOpenMallAction.bind(this));
        this.onSelectItemAction.add(this.addSelectItemAction.bind(this));
        this.onDeleteItemAction.add(this.addDeleteItemAction.bind(this));
        this.onOpenColorPickAction.add(this.addOpenColorPickAction.bind(this));
        this.onSaveAction.add(this.addSaveAction.bind(this));
        this.onCloseMallPanelAction.add(this.addCloseAction.bind(this));
        this.onResetAction.add(this.addResetAction.bind(this));
        this.onSexAction.add(this.addSexAction.bind(this));
        this.onSelectColorPickTab2Action.add(this.addSelectColorPickTab2Action.bind(this));
        this.onSelectColorPickTab3Action.add(this.addSelectColorPickTab3Action.bind(this));
        this.onColorPickChangedAction.add(this.changeCharacterColor.bind(this));
        this.onCloseColorPickPanelAction.add(this.addCloseColorPickPanelAction.bind(this));
        this.onSaveColorPickPanelAction.add(this.addSaveColorPickPanelAction.bind(this));
        this.onCloseMallItemSelfAction.add(this.addCloseMallItemSelfAction.bind(this));
    }
    bindEvent() {
        InputUtil.onKeyDown(mw.Keys.O, (() => {
            this.addOpenMallAction();
        }));
    }
    addSaveColorPickPanelAction() {
        this.isNeedSaveColor = false;
        this.getMallPanel.checkSkinToneMallItemStateAndShowMallPanel();
    }
    addCloseColorPickPanelAction() {
        if (this.isNeedSaveColor) {
            this.getMallTipsPanel.showTips((() => {
                this.isNeedSaveColor = false;
                this.getMallPanel.checkSkinToneMallItemStateAndShowMallPanel();
            }), (() => {
                this.isNeedSaveColor = false;
                ExecutorManager.instance.pushAsyncExecutor((async () => {
                    await this.copyNpc.asyncReady();
                    this.localPlayer.character.setDescription(this.copyNpc.getDescription());
                    await this.localPlayer.character.asyncReady();
                    this.getMallPanel.checkSkinToneMallItemStateAndShowMallPanel();
                }));
            }), GameConfig.Language.Text_CloseTips.Value, GameConfig.Language.Text_WhetherToKeepTheCurrentColor.Value, GameConfig.Language.Text_NoRetain.Value, GameConfig.Language.Text_Retain.Value);
        } else {
            this.getMallPanel.checkSkinToneMallItemStateAndShowMallPanel();
        }
    }
    addOpenMallAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            await this.isAccountServiceDownloadData();
            this.initUsingCharacterData();
            this.onSwitchCameraAction.call(2);
            if (!mw.UIService.getUI(MallPanel, false)?.visible) {
                this.mallPanel = UIService.getUI(MallPanel);
                this.getMallPanel.initMallPanel(this.saveSomatotype, this.usingAssetIdMap);
            }
            this.getMallPanel.show();
            this.decorationIndexMap.clear();
        }));
    }
    async isAccountServiceDownloadData() {
        let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
        if (somatotype != this.saveSomatotype) {
            await Utils.accountServiceDownloadData(this.localPlayer.character);
            await this.localPlayer.character.asyncReady();
            Notice.showDownNotice(GameConfig.Language.Text_ResetImage.Value);
        }
        return true;
    }
    closeMallPanel() {
        this.getMallPanel.hide();
        this.onSwitchCameraAction.call(0);
    }
    initUsingCharacterData() {
        this.usingAssetIdMap.clear();
        this.usingAssetIds.length = 0;
        let fullHair = Mall.getAssetId(Tab3Type.Tab3_FullHair);
        if (fullHair && fullHair.length > 0) {
            let fullHairElement = GameConfig.FullHair.findElement(`AssetId`, fullHair);
            if (fullHairElement) {
                this.usingAssetIdMap.set(Tab3Type.Tab3_FullHair, new AssetIdInfoData(fullHair));
            } else {
                let frontHair = Mall.getAssetId(Tab3Type.Tab3_FrontHair);
                if (frontHair && frontHair.length > 0) this.usingAssetIdMap.set(Tab3Type.Tab3_FrontHair, new AssetIdInfoData(frontHair));
                this.usingAssetIdMap.set(Tab3Type.Tab3_BackHair, new AssetIdInfoData(fullHair));
            }
        }
        let top = Mall.getAssetId(Tab2Type.Tab2_Top);
        if (top && top.length > 0) this.usingAssetIdMap.set(Tab2Type.Tab2_Top, new AssetIdInfoData(top));
        let bottom = Mall.getAssetId(Tab2Type.Tab2_Bottom);
        if (bottom && bottom.length > 0) this.usingAssetIdMap.set(Tab2Type.Tab2_Bottom, new AssetIdInfoData(bottom));
        let shoes = Mall.getAssetId(Tab2Type.Tab2_Shoes);
        if (shoes && shoes.length > 0) this.usingAssetIdMap.set(Tab2Type.Tab2_Shoes, new AssetIdInfoData(shoes));
        let gloves = Mall.getAssetId(Tab2Type.Tab2_Gloves);
        if (gloves && gloves.length > 0) this.usingAssetIdMap.set(Tab2Type.Tab2_Gloves, new AssetIdInfoData(gloves));
        let slot = this.localPlayer.character.description.advance.slotAndDecoration.slot;
        for (let i = 0; i < slot.length; ++i) {
            for (let j = 0; j < slot[i].decoration.length; ++j) {
                let decoration = slot[i].decoration[j];
                if (!decoration.attachmentAssetId || !decoration.attachmentGameObject || !decoration.attachmentOffset) continue;
                this.usingAssetIdMap.set(Number(decoration.attachmentAssetId), new AssetIdInfoData(decoration.attachmentAssetId, i, j));
                this.usingAssetIds.push(Number(decoration.attachmentAssetId));
            }
        }
        let eyebrows = Mall.getAssetId(Tab2Type.Tab2_Eyebrows);
        if (eyebrows && eyebrows.length > 0 && eyebrows != `32115`) this.usingAssetIdMap.set(Tab2Type.Tab2_Eyebrows, new AssetIdInfoData(eyebrows));
        let pupilStyle = Mall.getAssetId(Tab3Type.Tab3_PupilStyle);
        if (pupilStyle && pupilStyle.length > 0 && pupilStyle != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_PupilStyle, new AssetIdInfoData(pupilStyle));
        let Lens = Mall.getAssetId(Tab3Type.Tab3_Lens);
        if (Lens && Lens.length > 0 && Lens != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_Lens, new AssetIdInfoData(Lens));
        let UpperHighlight = Mall.getAssetId(Tab3Type.Tab3_UpperHighlight);
        if (UpperHighlight && UpperHighlight.length > 0 && UpperHighlight != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_UpperHighlight, new AssetIdInfoData(UpperHighlight));
        let LowerHighlight = Mall.getAssetId(Tab3Type.Tab3_LowerHighlight);
        if (LowerHighlight && LowerHighlight.length > 0 && LowerHighlight != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_LowerHighlight, new AssetIdInfoData(LowerHighlight));
        let Eyelashes = Mall.getAssetId(Tab3Type.Tab3_Eyelashes);
        if (Eyelashes && Eyelashes.length > 0 && Eyelashes != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_Eyelashes, new AssetIdInfoData(Eyelashes));
        let Eyeshadow = Mall.getAssetId(Tab3Type.Tab3_Eyeshadow);
        if (Eyeshadow && Eyeshadow.length > 0 && Eyeshadow != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_Eyeshadow, new AssetIdInfoData(Eyeshadow));
        let Blush = Mall.getAssetId(Tab3Type.Tab3_Blush);
        if (Blush && Blush.length > 0 && Blush != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_Blush, new AssetIdInfoData(Blush));
        let LipMakeup = Mall.getAssetId(Tab3Type.Tab3_LipMakeup);
        if (LipMakeup && LipMakeup.length > 0 && LipMakeup != `32115`) this.usingAssetIdMap.set(Tab3Type.Tab3_LipMakeup, new AssetIdInfoData(LipMakeup));
    }
    addCloseMallItemSelfAction(tabId, assetId) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            if (Mall.isClothingTabId(tabId)) {
                await this.changeCharacter(tabId, assetId);
            } else {
                if (!this.usingAssetIdMap.has(Number(assetId))) return;
                let assetIdInfoData = this.usingAssetIdMap.get(Number(assetId));
                await this.localPlayer.character.asyncReady();
                let attachmentGameObject = this.localPlayer.character.description.advance?.slotAndDecoration?.slot[assetIdInfoData.slotType]?.decoration[assetIdInfoData.slotIndex]?.attachmentGameObject;
                if (!attachmentGameObject) return;
                this.localPlayer.character.description.advance.slotAndDecoration.slot[assetIdInfoData.slotType].decoration.delete(attachmentGameObject, true);
                this.usingAssetIdMap.delete(Number(assetId));
                if (this.usingAssetIds.indexOf(Number(assetId)) != -1) this.usingAssetIds.splice(this.usingAssetIds.indexOf(Number(assetId)), 1);
                await this.localPlayer.character.asyncReady();
            }
            this.initUsingCharacterData();
            this.getMallPanel.refreshMallItemSelf(this.usingAssetIdMap, true);
        }));
    }
    addSelectItemAction(tabType, tabId, assetId) {
        if (tabType == TabType.None) return;
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.changeCharacter(tabId, assetId);
            if (!Mall.isRemovableTabId(tabId) || assetId == `0`) return;
            this.initUsingCharacterData();
            this.getMallPanel.refreshMallItemSelf(this.usingAssetIdMap, Mall.isSlot(tabId));
        }));
    }
    addDeleteItemAction(tabType, tabId, assetId) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.getCharacterModuleC.deleteCharacterData(assetId, (() => {
                this.getMallPanel.initTab1Item();
            }));
        }));
    }
    async changeCharacter(tabId, assetId) {
        await this.localPlayer.character.asyncReady();
        switch (tabId) {
          case Tab1Type.Tab1_Collection:
            await this.getCharacterModuleC.useCharacterData(assetId, (isAdd => {
                if (isAdd) {
                    this.getMallPanel.initTab1Item();
                } else {
                    this.updateMallPanelBySomatotype();
                }
            }));
            break;

          case Tab2Type.Tab2_BodyType:
            let bodyTypeElement = GameConfig.BodyType.getElement(assetId);
            if (!bodyTypeElement || bodyTypeElement?.Scale == 0) return;
            this.localPlayer.character.description.advance.bodyFeatures.body.height = bodyTypeElement.Scale;
            break;

          case Tab2Type.Tab2_SkinTone:
            this.localPlayer.character.description.advance.makeup.skinTone.skinColor = mw.LinearColor.colorHexToLinearColor(assetId);
            break;

          case Tab2Type.Tab2_Face:
            await Utils.asyncDownloadAsset(assetId);
            this.localPlayer.character.description.advance.headFeatures.head.style = assetId;
            break;

          case Tab2Type.Tab2_Eyebrows:
            if (this.localPlayer.character.description.advance.makeup.eyebrows.eyebrowStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.eyebrows.eyebrowStyle = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let eyebrowStyle = ``;
                if (somatotype % 2 == 0) {
                    eyebrowStyle = `398608`;
                } else {
                    eyebrowStyle = `77763`;
                }
                await Utils.asyncDownloadAsset(eyebrowStyle);
                this.localPlayer.character.description.advance.makeup.eyebrows.eyebrowStyle = eyebrowStyle;
            }
            break;

          case Tab2Type.Tab2_Expression:
            let faceExpressionElement = GameConfig.FaceExpression.getElement(assetId);
            if (!faceExpressionElement || faceExpressionElement?.ExpressionType < 0 || faceExpressionElement?.ExpressionType > 9) return;
            this.localPlayer.character.description.advance.headFeatures.expressions.changeExpression = faceExpressionElement.ExpressionType;
            break;

          case Tab2Type.Tab2_Outfit:
            await this.changeOutfit(GameConfig.Outfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_DailyStyling_Suit1:
            await this.changeOutfit(GameConfig.DailyStylingOutfit1.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_DailyStyling_Suit2:
            await this.changeOutfit(GameConfig.DailyStylingOutfit2.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_MuppetStyling_Suit:
            await this.changeOutfit(GameConfig.MuppetStylingOutfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_HeroStyling_Suit:
            await this.changeOutfit(GameConfig.HeroStylingOutfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_FantasyModeling_Suit:
            await this.changeOutfit(GameConfig.FantasyModelingOutfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_HolidayStyling_Suit:
            await this.changeOutfit(GameConfig.HolidayStylingOutfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_ScienceFictionStyling_Suit:
            await this.changeOutfit(GameConfig.ScienceFictionStylingOutfit.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_AncientMolding_Suit:
            await this.changeOutfit(GameConfig.AncientMoldingOutfit.getElement(assetId).AssetId);
            break;

          case Tab2Type.Tab2_Top:
            await this.changeTop(assetId);
            break;

          case Tab3Type.Tab3_LongSinglePiece_Top:
            await this.changeTop(GameConfig.LongSinglePieceTop.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_ShortJacket_Top:
            await this.changeTop(GameConfig.ShortJacketTop.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_ShortSinglePiece_Top:
            await this.changeTop(GameConfig.ShortSinglePieceTop.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_Suit_Top:
            await this.changeTop(GameConfig.SuitTop.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_ALongCoat_Top:
            await this.changeTop(GameConfig.ALongCoatTop.getElement(assetId).AssetId);
            break;

          case Tab2Type.Tab2_Bottom:
            await this.changeBottom(assetId);
            break;

          case Tab3Type.Tab3_ShortSkirt_Bottom:
            await this.changeBottom(GameConfig.ShortSkirtBottom.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_LongPants_Bottom:
            await this.changeBottom(GameConfig.LongPantsBottom.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_Shorts_Bottom:
            await this.changeBottom(GameConfig.ShortsBottom.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_LongSkirt_Bottom:
            await this.changeBottom(GameConfig.LongSkirtBottom.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_Tights_Bottom:
            await this.changeBottom(GameConfig.TightsBottom.getElement(assetId).AssetId);
            break;

          case Tab2Type.Tab2_Shoes:
            await this.changeShoes(assetId);
            break;

          case Tab3Type.Tab3_Everyday_Shoes:
            await this.changeShoes(GameConfig.EverydayShoes.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_Boots_Shoes:
            await this.changeShoes(GameConfig.BootsShoes.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_FootCover_Shoes:
            await this.changeShoes(GameConfig.FootCoverShoes.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_NakedDress_Shoes:
            await this.changeShoes(GameConfig.NakedDressShoes.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_HighHeels_Shoes:
            await this.changeShoes(GameConfig.HighHeelsShoes.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_SportsShoes_Shoes:
            await this.changeShoes(GameConfig.SportsShoesShoes.getElement(assetId).AssetId);
            break;

          case Tab2Type.Tab2_Gloves:
            await this.changeGloves(assetId);
            break;

          case Tab3Type.Tab3_Gloves_Gloves:
            await this.changeGloves(GameConfig.GlovesGloves.getElement(assetId).AssetId);
            break;

          case Tab3Type.Tab3_Accessories_Gloves:
            await this.changeGloves(GameConfig.AccessoriesGloves.getElement(assetId).AssetId);
            break;

          case Tab2Type.Tab2_Pet:
            let petElement = GameConfig.Pet.getElement(assetId);
            if (!petElement) return;
            await this.changeSlotAndDecoration(tabId, petElement.AssetId, Utils.stringArrayToTransform(petElement.Transform), mw.HumanoidSlotType.Root);
            break;

          case Tab3Type.Tab3_PupilStyle:
            if (this.localPlayer.character.description.advance.makeup.coloredContacts.style.pupilStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.pupilStyle = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let pupilStyle = ``;
                if (somatotype % 2 == 0) {
                    pupilStyle = `398609`;
                } else {
                    pupilStyle = `47968`;
                }
                await Utils.asyncDownloadAsset(pupilStyle);
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.pupilStyle = pupilStyle;
            }
            break;

          case Tab3Type.Tab3_Lens:
            if (this.localPlayer.character.description.advance.makeup.coloredContacts.decal.pupilStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.coloredContacts.decal.pupilStyle = assetId;
            } else {
                await Utils.asyncDownloadAsset(`32115`);
                this.localPlayer.character.description.advance.makeup.coloredContacts.decal.pupilStyle = `32115`;
            }
            break;

          case Tab3Type.Tab3_UpperHighlight:
            if (this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.upperHighlightStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.upperHighlightStyle = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let upperHighlightStyle = ``;
                if (somatotype % 2 == 0) {
                    upperHighlightStyle = `48041`;
                } else {
                    upperHighlightStyle = `32112`;
                }
                await Utils.asyncDownloadAsset(upperHighlightStyle);
                this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.upperHighlightStyle = upperHighlightStyle;
            }
            break;

          case Tab3Type.Tab3_LowerHighlight:
            if (this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.lowerHighlightStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.lowerHighlightStyle = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let lowerHighlightStyle = ``;
                if (somatotype % 2 == 0) {
                    lowerHighlightStyle = `48026`;
                } else {
                    lowerHighlightStyle = `32098`;
                }
                await Utils.asyncDownloadAsset(lowerHighlightStyle);
                this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.lowerHighlightStyle = lowerHighlightStyle;
            }
            break;

          case Tab3Type.Tab3_Eyelashes:
            if (this.localPlayer.character.description.advance.makeup.eyelashes.eyelashStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.eyelashes.eyelashStyle = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let eyelashStyle = ``;
                if (somatotype % 2 == 0) {
                    eyelashStyle = `398607`;
                } else {
                    eyelashStyle = `48062`;
                }
                await Utils.asyncDownloadAsset(eyelashStyle);
                this.localPlayer.character.description.advance.makeup.eyelashes.eyelashStyle = eyelashStyle;
            }
            break;

          case Tab3Type.Tab3_Eyeshadow:
            if (this.localPlayer.character.description.advance.makeup.eyeShadow.eyeshadowStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.eyeShadow.eyeshadowStyle = assetId;
            } else {
                await Utils.asyncDownloadAsset(`32115`);
                this.localPlayer.character.description.advance.makeup.eyeShadow.eyeshadowStyle = `32115`;
            }
            break;

          case Tab3Type.Tab3_Blush:
            if (this.localPlayer.character.description.advance.makeup.blush.blushStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.blush.blushStyle = assetId;
            } else {
                await Utils.asyncDownloadAsset(`32115`);
                this.localPlayer.character.description.advance.makeup.blush.blushStyle = `32115`;
            }
            break;

          case Tab3Type.Tab3_LipMakeup:
            if (this.localPlayer.character.description.advance.makeup.lipstick.lipstickStyle != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.makeup.lipstick.lipstickStyle = assetId;
            } else {
                await Utils.asyncDownloadAsset(`32115`);
                this.localPlayer.character.description.advance.makeup.lipstick.lipstickStyle = `32115`;
            }
            break;

          case Tab3Type.Tab3_FaceTattoo:
            break;

          case Tab3Type.Tab3_FullHair:
            if (this.localPlayer.character.description.advance.hair.backHair.style != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.hair.backHair.style = assetId;
                this.localPlayer.character.description.advance.hair.frontHair.style = ``;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let frontHair = ``;
                let backHair = ``;
                if (somatotype % 2 == 0) {
                    frontHair = `292003`;
                    backHair = `292001`;
                } else {
                    frontHair = `343471`;
                    backHair = `343476`;
                }
                await Utils.asyncDownloadAssets([ frontHair, backHair ]);
                this.localPlayer.character.description.advance.hair.frontHair.style = frontHair;
                this.localPlayer.character.description.advance.hair.backHair.style = backHair;
            }
            break;

          case Tab3Type.Tab3_FrontHair:
            if (this.localPlayer.character.description.advance.hair.frontHair.style != assetId) {
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.hair.frontHair.style = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let frontHair = ``;
                if (somatotype % 2 == 0) {
                    frontHair = `292003`;
                } else {
                    frontHair = `343471`;
                }
                await Utils.asyncDownloadAsset(frontHair);
                this.localPlayer.character.description.advance.hair.frontHair.style = frontHair;
            }
            let backHair = this.localPlayer.character.description.advance.hair.backHair.style;
            let fullHairElement = GameConfig.FullHair.findElement(`AssetId`, backHair);
            if (fullHairElement) {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let backHair = ``;
                if (somatotype % 2 == 0) {
                    backHair = `292001`;
                } else {
                    backHair = `343476`;
                }
                await Utils.asyncDownloadAsset(backHair);
                this.localPlayer.character.description.advance.hair.backHair.style = backHair;
            }
            break;

          case Tab3Type.Tab3_BackHair:
            if (this.localPlayer.character.description.advance.hair.backHair.style != assetId) {
                let backHair = this.localPlayer.character.description.advance.hair.backHair.style;
                let fullHairElement = GameConfig.FullHair.findElement(`AssetId`, backHair);
                if (fullHairElement) {
                    let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                    let frontHair = ``;
                    if (somatotype % 2 == 0) {
                        frontHair = `292003`;
                    } else {
                        frontHair = `343471`;
                    }
                    await Utils.asyncDownloadAsset(frontHair);
                    this.localPlayer.character.description.advance.hair.frontHair.style = frontHair;
                }
                await Utils.asyncDownloadAsset(assetId);
                this.localPlayer.character.description.advance.hair.backHair.style = assetId;
            } else {
                let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
                let backHair = ``;
                if (somatotype % 2 == 0) {
                    backHair = `292001`;
                } else {
                    backHair = `343476`;
                }
                await Utils.asyncDownloadAsset(backHair);
                this.localPlayer.character.description.advance.hair.backHair.style = backHair;
            }
            break;

          case Tab3Type.Tab3_LeftHand:
            let leftHandElement = GameConfig.LeftHand.getElement(assetId);
            if (!leftHandElement) return;
            await this.changeSlotAndDecoration(tabId, leftHandElement.AssetId, Utils.stringArrayToTransform(leftHandElement.Transform), mw.HumanoidSlotType.LeftHand);
            break;

          case Tab3Type.Tab3_RightHand:
            let rightHandElement = GameConfig.RightHand.getElement(assetId);
            if (!rightHandElement) return;
            await this.changeSlotAndDecoration(tabId, rightHandElement.AssetId, Utils.stringArrayToTransform(rightHandElement.Transform), mw.HumanoidSlotType.RightHand);
            break;

          case Tab3Type.Tab3_Back:
            let backElement = GameConfig.Back.getElement(assetId);
            if (!backElement) return;
            await this.changeSlotAndDecoration(tabId, backElement.AssetId, Utils.stringArrayToTransform(backElement.Transform), mw.HumanoidSlotType.BackOrnamental);
            break;

          case Tab3Type.Tab3_Ear:
            let earElement = GameConfig.Ear.getElement(assetId);
            if (!earElement) return;
            await this.changeSlotAndDecoration(tabId, earElement.AssetId, Utils.stringArrayToTransform(earElement.Transform), mw.HumanoidSlotType.Head);
            break;

          case Tab3Type.Tab3_Face:
            let facingElement = GameConfig.Facing.getElement(assetId);
            if (!facingElement) return;
            await this.changeSlotAndDecoration(tabId, facingElement.AssetId, Utils.stringArrayToTransform(facingElement.Transform), mw.HumanoidSlotType.FaceOrnamental);
            break;

          case Tab3Type.Tab3_Hip:
            let hipElement = GameConfig.Hip.getElement(assetId);
            if (!hipElement) return;
            await this.changeSlotAndDecoration(tabId, hipElement.AssetId, Utils.stringArrayToTransform(hipElement.Transform), mw.HumanoidSlotType.Buttocks);
            break;

          case Tab3Type.Tab3_Shoulder:
            let shoulderElement = GameConfig.Shoulder.getElement(assetId);
            if (!shoulderElement) return;
            await this.changeSlotAndDecoration(tabId, shoulderElement.AssetId, Utils.stringArrayToTransform(shoulderElement.Transform), mw.HumanoidSlotType.Rings);
            break;

          case Tab3Type.Tab3_Effects:
            let effectsElement = GameConfig.Effects.getElement(assetId);
            if (!effectsElement) return;
            await this.changeSlotAndDecoration(tabId, effectsElement.AssetId, Utils.stringArrayToTransform(effectsElement.Transform), mw.HumanoidSlotType.Root);
            break;

          case Tab3Type.Tab3_Trailing:
            let trailingElement = GameConfig.Trailing.getElement(assetId);
            if (!trailingElement) return;
            await this.changeSlotAndDecoration(tabId, trailingElement.AssetId, Utils.stringArrayToTransform(trailingElement.Transform), mw.HumanoidSlotType.Root);
            break;

          case Tab3Type.Tab3_BackPet:
            let backPetElement = GameConfig.BackPet.getElement(assetId);
            if (!backPetElement) return;
            await this.changeSlotAndDecoration(tabId, backPetElement.AssetId, Utils.stringArrayToTransform(backPetElement.Transform), mw.HumanoidSlotType.BackOrnamental);
            break;
        }
        await this.localPlayer.character.asyncReady();
        this.isNeedSaveCharacter = true;
        if (this.delaySwitchCameraTabIds.includes(tabId)) {
            await TimeUtil.delaySecond(1);
            this.onSwitchCameraAction.call(2);
        }
    }
    async changeTop(assetId) {
        if (this.localPlayer.character.description.advance.clothing.upperCloth.style != assetId) {
            await Utils.asyncDownloadAsset(assetId);
            this.localPlayer.character.description.advance.clothing.upperCloth.style = assetId;
        } else {
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            let upperClothStyle = ``;
            if (somatotype % 2 == 0) {
                upperClothStyle = `292004`;
            } else {
                upperClothStyle = `343474`;
            }
            await Utils.asyncDownloadAsset(upperClothStyle);
            this.localPlayer.character.description.advance.clothing.upperCloth.style = upperClothStyle;
        }
    }
    async changeBottom(assetId) {
        if (this.localPlayer.character.description.advance.clothing.lowerCloth.style != assetId) {
            await Utils.asyncDownloadAsset(assetId);
            this.localPlayer.character.description.advance.clothing.lowerCloth.style = assetId;
        } else {
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            let lowerClothStyle = ``;
            if (somatotype % 2 == 0) {
                lowerClothStyle = `292002`;
            } else {
                lowerClothStyle = `343467`;
            }
            await Utils.asyncDownloadAsset(lowerClothStyle);
            this.localPlayer.character.description.advance.clothing.lowerCloth.style = lowerClothStyle;
        }
    }
    async changeShoes(assetId) {
        if (this.localPlayer.character.description.advance.clothing.shoes.style != assetId) {
            await Utils.asyncDownloadAsset(assetId);
            this.localPlayer.character.description.advance.clothing.shoes.style = assetId;
        } else {
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            let shoesStyle = ``;
            if (somatotype % 2 == 0) {
                shoesStyle = `66505`;
            } else {
                shoesStyle = `343475`;
            }
            await Utils.asyncDownloadAsset(shoesStyle);
            this.localPlayer.character.description.advance.clothing.shoes.style = shoesStyle;
        }
    }
    async changeGloves(assetId) {
        if (this.localPlayer.character.description.advance.clothing.gloves.style != assetId) {
            await Utils.asyncDownloadAsset(assetId);
            this.localPlayer.character.description.advance.clothing.gloves.style = assetId;
        } else {
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            let glovesStyle = ``;
            if (somatotype % 2 == 0) {
                glovesStyle = `75663`;
            } else {
                glovesStyle = `343466`;
            }
            await Utils.asyncDownloadAsset(glovesStyle);
            this.localPlayer.character.description.advance.clothing.gloves.style = glovesStyle;
        }
    }
    async changeOutfit(assetId) {
        await Utils.asyncDownloadAsset(assetId);
        await this.changeOutfitTransition(assetId);
    }
    async changeOutfit_abandon(configId) {
        let outfitElement = GameConfig.Outfit.getElement(configId);
        let currentSomatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
        await Utils.asyncDownloadAsset(outfitElement.AssetId);
        if (currentSomatotype == outfitElement.SexType) {
            await this.changeOutfitTransition(outfitElement.AssetId);
        }
        await this.localPlayer.character.asyncReady();
    }
    async changeOutfitTransition(assetId) {
        if (!this.transitionNpc) await this.initTransitionNpc();
        this.transitionNpc.setDescription([ assetId ]);
        await this.transitionNpc.asyncReady();
        await Mall.copyCharacterClothingAndHair(this.transitionNpc, this.localPlayer.character);
    }
    async changeSlotAndDecoration(tagId, assetId, transform, slotIndex) {
        let decorationIndex = -1;
        if (this.decorationIndexMap.has(tagId)) {
            decorationIndex = this.decorationIndexMap.get(tagId);
            let attachmentGameObject = this.localPlayer.character.description.advance.slotAndDecoration.slot[slotIndex].decoration[decorationIndex - 1]?.attachmentGameObject;
            if (attachmentGameObject) {
                let attachmentAssetId = this.localPlayer.character.description.advance.slotAndDecoration.slot[slotIndex].decoration[decorationIndex - 1].attachmentAssetId;
                this.localPlayer.character.description.advance.slotAndDecoration.slot[slotIndex].decoration.delete(attachmentGameObject, true);
                if (assetId == attachmentAssetId) {
                    this.decorationIndexMap.delete(tagId);
                    return;
                }
            } else {
                this.decorationIndexMap.delete(tagId);
            }
        }
        if (this.isUsingDecoration(assetId)) {
            this.decorationIndexMap.delete(tagId);
            return;
        }
        await Utils.asyncDownloadAsset(assetId);
        let model = await GameObject.asyncSpawn(assetId);
        if (!model) return;
        model.setCollision(mw.PropertyStatus.Off, true);
        decorationIndex = this.localPlayer.character.description.advance.slotAndDecoration.slot[slotIndex].decoration.add(model, transform);
        this.decorationIndexMap.set(tagId, decorationIndex);
    }
    isUsingDecoration(assetId) {
        let slot = this.localPlayer.character.description.advance.slotAndDecoration.slot;
        if (!slot || slot.length == 0) return false;
        for (let i = 0; i < slot.length; ++i) {
            for (let j = 0; j < slot[i].decoration.length; ++j) {
                let decoration = slot[i].decoration[j];
                if (decoration.attachmentAssetId == assetId) return true;
            }
        }
        return false;
    }
    getSlotAndDecoration(tagId, slotIndex) {
        if (this.decorationIndexMap.has(tagId)) {
            let decorationIndex = this.decorationIndexMap.get(tagId);
            return this.localPlayer.character.description.advance.slotAndDecoration.slot[slotIndex].decoration[decorationIndex - 1]?.attachmentAssetId;
        } else {
            return null;
        }
    }
    async deleteDecoration() {}
    async getCharacterAssetId(configId) {
        await this.localPlayer.character.asyncReady();
        switch (configId) {
          case Tab1Type.Tab1_Collection:
            return this.getCharacterModuleC.getCharacterDataKey();

          case Tab2Type.Tab2_BodyType:
            let heightRatio = this.localPlayer.character.description.advance.bodyFeatures.body.height;
            let scale = heightRatio.toFixed(1);
            let bodyTypeElement = GameConfig.BodyType.findElement(`Scale`, scale);
            if (!bodyTypeElement) return null;
            return bodyTypeElement.ID.toString();

          case Tab2Type.Tab2_SkinTone:
            return this.localPlayer.character.description.advance.makeup.skinTone.skinColor;

          case Tab2Type.Tab2_Face:
            return this.localPlayer.character.description.advance.headFeatures.head.style;

          case Tab2Type.Tab2_Eyebrows:
            return this.localPlayer.character.description.advance.makeup.eyebrows.eyebrowStyle;

          case Tab2Type.Tab2_Expression:
            let expressionType = this.localPlayer.character.description.advance.headFeatures.expressions.changeExpression;
            if (expressionType < 0 || expressionType > 9) return null;
            let faceExpressionElement = GameConfig.FaceExpression.findElement(`ExpressionType`, expressionType);
            if (!faceExpressionElement) return null;
            return faceExpressionElement.ID.toString();

          case Tab2Type.Tab2_Outfit:
            return null;

          case Tab3Type.Tab3_DailyStyling_Suit1:
            return null;

          case Tab3Type.Tab3_DailyStyling_Suit2:
            return null;

          case Tab3Type.Tab3_MuppetStyling_Suit:
            return null;

          case Tab3Type.Tab3_HeroStyling_Suit:
            return null;

          case Tab3Type.Tab3_FantasyModeling_Suit:
            return null;

          case Tab3Type.Tab3_HolidayStyling_Suit:
            return null;

          case Tab3Type.Tab3_ScienceFictionStyling_Suit:
            return null;

          case Tab3Type.Tab3_AncientMolding_Suit:
            return null;

          case Tab2Type.Tab2_Top:
          case Tab3Type.Tab3_LongSinglePiece_Top:
          case Tab3Type.Tab3_ShortJacket_Top:
          case Tab3Type.Tab3_ShortSinglePiece_Top:
          case Tab3Type.Tab3_Suit_Top:
          case Tab3Type.Tab3_ALongCoat_Top:
            return this.localPlayer.character.description.advance.clothing.upperCloth.style;

          case Tab2Type.Tab2_Bottom:
          case Tab3Type.Tab3_ShortSkirt_Bottom:
          case Tab3Type.Tab3_LongPants_Bottom:
          case Tab3Type.Tab3_Shorts_Bottom:
          case Tab3Type.Tab3_LongSkirt_Bottom:
          case Tab3Type.Tab3_Tights_Bottom:
            return this.localPlayer.character.description.advance.clothing.lowerCloth.style;

          case Tab2Type.Tab2_Shoes:
          case Tab3Type.Tab3_Everyday_Shoes:
          case Tab3Type.Tab3_Boots_Shoes:
          case Tab3Type.Tab3_FootCover_Shoes:
          case Tab3Type.Tab3_NakedDress_Shoes:
          case Tab3Type.Tab3_HighHeels_Shoes:
          case Tab3Type.Tab3_SportsShoes_Shoes:
            return this.localPlayer.character.description.advance.clothing.shoes.style;

          case Tab2Type.Tab2_Gloves:
          case Tab3Type.Tab3_Gloves_Gloves:
          case Tab3Type.Tab3_Accessories_Gloves:
            return this.localPlayer.character.description.advance.clothing.gloves.style;

          case Tab2Type.Tab2_Pet:
            break;

          case Tab3Type.Tab3_PupilStyle:
            return this.localPlayer.character.description.advance.makeup.coloredContacts.style.pupilStyle;

          case Tab3Type.Tab3_Lens:
            return this.localPlayer.character.description.advance.makeup.coloredContacts.decal.pupilStyle;

          case Tab3Type.Tab3_UpperHighlight:
            return this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.upperHighlightStyle;

          case Tab3Type.Tab3_LowerHighlight:
            return this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.lowerHighlightStyle;

          case Tab3Type.Tab3_Eyelashes:
            return this.localPlayer.character.description.advance.makeup.eyelashes.eyelashStyle;

          case Tab3Type.Tab3_Eyeshadow:
            return this.localPlayer.character.description.advance.makeup.eyeShadow.eyeshadowStyle;

          case Tab3Type.Tab3_Blush:
            return this.localPlayer.character.description.advance.makeup.blush.blushStyle;

          case Tab3Type.Tab3_LipMakeup:
            return this.localPlayer.character.description.advance.makeup.lipstick.lipstickStyle;

          case Tab3Type.Tab3_FaceTattoo:
            break;

          case Tab3Type.Tab3_FullHair:
            return this.localPlayer.character.description.advance.hair.backHair.style;

          case Tab3Type.Tab3_FrontHair:
            return this.localPlayer.character.description.advance.hair.frontHair.style;

          case Tab3Type.Tab3_BackHair:
            return this.localPlayer.character.description.advance.hair.backHair.style;

          case Tab3Type.Tab3_LeftHand:
            let leftHand = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.LeftHand);
            if (!leftHand) return null;
            let leftHandElement = GameConfig.LeftHand.findElement(`AssetId`, leftHand);
            if (!leftHandElement) return null;
            return leftHandElement.ID.toString();

          case Tab3Type.Tab3_RightHand:
            let rightHand = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.RightHand);
            if (!rightHand) return null;
            let rightHandElement = GameConfig.RightHand.findElement(`AssetId`, rightHand);
            if (!rightHandElement) return null;
            return rightHandElement.ID.toString();

          case Tab3Type.Tab3_Back:
            let backOrnamental = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.BackOrnamental);
            if (!backOrnamental) return null;
            let backElement = GameConfig.Back.findElement(`AssetId`, backOrnamental);
            if (!backElement) return null;
            return backElement.ID.toString();

          case Tab3Type.Tab3_Ear:
            let ear = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.Head);
            if (!ear) return null;
            let earElement = GameConfig.Ear.findElement(`AssetId`, ear);
            if (!earElement) return null;
            return earElement.ID.toString();

          case Tab3Type.Tab3_Face:
            let face = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.FaceOrnamental);
            if (!face) return null;
            let facingElement = GameConfig.Facing.findElement(`AssetId`, face);
            if (!facingElement) return null;
            return facingElement.ID.toString();

          case Tab3Type.Tab3_Hip:
            let hip = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.Buttocks);
            if (!hip) return null;
            let hipElement = GameConfig.Hip.findElement(`AssetId`, hip);
            if (!hipElement) return null;
            return hipElement.ID.toString();

          case Tab3Type.Tab3_Shoulder:
            let shoulder = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.RightBack);
            if (!shoulder) return null;
            let shoulderElement = GameConfig.Shoulder.findElement(`AssetId`, shoulder);
            if (!shoulderElement) return null;
            return shoulderElement.ID.toString();

          case Tab3Type.Tab3_Effects:
            let effect = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.Root);
            if (!effect) return null;
            let effectsElement = GameConfig.Effects.findElement(`AssetId`, effect);
            if (!effectsElement) return null;
            return effectsElement.ID.toString();

          case Tab3Type.Tab3_Trailing:
            let trailing = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.Root);
            if (!trailing) return null;
            let trailingElement = GameConfig.Trailing.findElement(`AssetId`, trailing);
            if (!trailingElement) return null;
            return trailingElement.ID.toString();

          case Tab3Type.Tab3_BackPet:
            let backPet = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.BackOrnamental);
            if (!backPet) return null;
            let backPetElement = GameConfig.BackPet.findElement(`AssetId`, backPet);
            if (!backPetElement) return null;
            return backPetElement.ID.toString();

          case Tab2Type.Tab2_Pet:
            let pet = this.getSlotAndDecoration(configId, mw.HumanoidSlotType.Root);
            if (!pet) return null;
            let petElement = GameConfig.Pet.findElement(`AssetId`, pet);
            if (!petElement) return null;
            return petElement.ID.toString();

          default:
            return null;
        }
    }
    async initShopCamera() {
        Camera.currentCamera;
        let shopCamera = await GameObject.asyncSpawn(`Camera`);
        shopCamera.worldTransform.rotation = mw.Rotation.zero;
        this.onSwitchCameraAction.add((cameraType => {
            if (cameraType == 0) {
                CameraManager$1.instance.switchWFZCamera(false);
                return;
            } else if (cameraType == 1) {
                CameraManager$1.instance.switchWFZCamera(true, this.localPlayer.character, true, false);
                Event.dispatchToLocal(EventType.SwitchCamera, CameraManagerType.Head);
                return;
            } else if (cameraType == 2) {
                CameraManager$1.instance.switchWFZCamera(true, this.localPlayer.character, true, false);
                Event.dispatchToLocal(EventType.SwitchCamera, CameraManagerType.Body);
                return;
            }
        }));
    }
    addRoatation(dir) {
        if (!this.localPlayer || !this.localPlayer?.character || !this.localPlayer.character?.worldTransform) return;
        this.localPlayer.character.worldTransform.rotation = this.localPlayer.character.worldTransform.rotation.add(new mw.Rotation(0, 0, -(this.mallCharacterRotSpeed * dir)));
    }
    async syncTryOnCharacter() {
        await this.localPlayer.character.asyncReady();
        let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
        this.recordSex(somatotype);
        if (somatotype % 2 == 0) {
            await this.feMaleNpc.asyncReady();
            this.feMaleNpc.setDescription(this.localPlayer.character.getDescription());
        } else {
            await this.maleNpc.asyncReady();
            this.maleNpc.setDescription(this.localPlayer.character.getDescription());
        }
    }
    get getCopyNpc() {
        return this.copyNpc;
    }
    async initNpc() {
        this.maleNpc = await mw.GameObject.asyncFindGameObjectById(`3A3B7F1A`);
        this.feMaleNpc = await mw.GameObject.asyncFindGameObjectById(`047AA580`);
        this.transitionNpc = await mw.GameObject.asyncFindGameObjectById(`1D9FAAD2`);
        this.copyNpc = await mw.GameObject.asyncFindGameObjectById(`118AA52F`);
        await this.localPlayer.character.asyncReady();
        let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
        this.recordSex(somatotype);
        if (somatotype % 2 == 0) {
            await this.feMaleNpc.asyncReady();
            await Utils.accountServiceDownloadData(this.feMaleNpc);
        } else {
            await this.maleNpc.asyncReady();
            await Utils.accountServiceDownloadData(this.maleNpc);
        }
    }
    recordSex(somatotype) {
        this.saveSomatotype = somatotype;
    }
    async initTransitionNpc() {
        this.transitionNpc = await mw.GameObject.asyncSpawn(`Character`);
        await this.transitionNpc.asyncReady();
    }
    addOpenColorPickAction(tabType, tabId) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            this.copyNpc.setDescription(this.localPlayer.character.getDescription());
            await this.copyNpc.asyncReady();
            this.openColorPickPanel(tabId);
        }));
    }
    async openTryOnPanel() {
        await this.localPlayer.character.asyncReady();
        this.copyNpc.setDescription(this.localPlayer.character.getDescription());
        await this.copyNpc.asyncReady();
    }
    addSaveAction() {
        this.saveCharacterDescription();
    }
    saveCharacterDescription() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            this.recordSex(somatotype);
            if (somatotype % 2 == 0) {
                this.feMaleNpc.setDescription(this.localPlayer.character.getDescription());
                await this.feMaleNpc.asyncReady();
            } else {
                this.maleNpc.setDescription(this.localPlayer.character.getDescription());
                await this.maleNpc.asyncReady();
            }
            this.localPlayer.character.syncDescription();
            this.isNeedSaveCharacter = false;
            this.closeMallPanel();
            Notice.showDownNotice(GameConfig.Language.Text_SaveSuccessfully.Value);
        }));
    }
    addCloseAction() {
        if (this.isNeedSaveCharacter) {
            this.getMallTipsPanel.showTips((() => {
                this.isNeedSaveCharacter = false;
                this.saveCharacterDescription();
                this.closeMallPanel();
            }), (() => {
                this.isNeedSaveCharacter = false;
                this.recoverCharacter();
                this.closeMallPanel();
            }), GameConfig.Language.Text_CloseTips.Value, GameConfig.Language.Text_WhetherSaveImage.Value, GameConfig.Language.Text_NoSave.Value, GameConfig.Language.Text_Save.Value);
        } else {
            this.closeMallPanel();
        }
    }
    recoverCharacter() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            this.getMallPanel.hide();
            this.onSwitchCameraAction.call(0);
            if (this.saveSomatotype % 2 == 0) {
                this.localPlayer.character.setDescription(this.feMaleNpc.getDescription());
            } else {
                this.localPlayer.character.setDescription(this.maleNpc.getDescription());
            }
            await this.localPlayer.character.asyncReady();
        }));
    }
    addResetAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let isSuccess = await Utils.accountServiceDownloadData(this.localPlayer.character);
            if (!isSuccess) {
                Notice.showDownNotice(GameConfig.Language.Text_ResetImageFaild.Value);
                return;
            }
            await this.localPlayer.character.asyncReady();
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            this.initUsingCharacterData();
            if (mw.UIService.getUI(MallPanel, false)?.visible) this.getMallPanel.initMallPanel(somatotype, this.usingAssetIdMap);
            Notice.showDownNotice(GameConfig.Language.Text_ResetSuccessfully.Value);
        }));
    }
    addSexAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            if (somatotype % 2 == 0) {
                this.localPlayer.character.setDescription(this.maleNpc.getDescription());
            } else {
                this.localPlayer.character.setDescription(this.feMaleNpc.getDescription());
            }
            await this.localPlayer.character.asyncReady();
            somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
            this.initUsingCharacterData();
            if (mw.UIService.getUI(MallPanel, false)?.visible) this.getMallPanel.initMallPanel(somatotype, this.usingAssetIdMap);
            Notice.showDownNotice(GameConfig.Language.Text_SwitchSuccessfully.Value);
        }));
    }
    updateMallPanelBySomatotype() {
        let somatotype = this.localPlayer.character.description.advance.base.characterSetting.somatotype;
        this.initUsingCharacterData();
        if (mw.UIService.getUI(MallPanel, false)?.visible) {
            this.getMallPanel.initMallPanel(somatotype, this.usingAssetIdMap);
            this.onSelectTab1Action.call(3);
        }
    }
    openColorPickPanel(tabId) {
        this.colorPickTabId = tabId;
        this.colorPickTab2Index = 0;
        this.colorPickTab2Datas.length = 0;
        this.colorPickTab3Colors.length = 0;
        switch (tabId) {
          case Tab2Type.Tab2_SkinTone:
            this.openSkinToneColorPickPanel();
            break;

          case Tab2Type.Tab2_Eyebrows:
            this.openEyebrowsColorPickPanel();
            break;

          case Tab2Type.Tab2_Top:
          case Tab3Type.Tab3_LongSinglePiece_Top:
          case Tab3Type.Tab3_ShortJacket_Top:
          case Tab3Type.Tab3_ShortSinglePiece_Top:
          case Tab3Type.Tab3_Suit_Top:
          case Tab3Type.Tab3_ALongCoat_Top:
            this.openTopColorPickPanel();
            break;

          case Tab2Type.Tab2_Bottom:
          case Tab3Type.Tab3_ShortSkirt_Bottom:
          case Tab3Type.Tab3_LongPants_Bottom:
          case Tab3Type.Tab3_Shorts_Bottom:
          case Tab3Type.Tab3_LongSkirt_Bottom:
          case Tab3Type.Tab3_Tights_Bottom:
            this.openBottomColorPickPanel();
            break;

          case Tab2Type.Tab2_Shoes:
          case Tab3Type.Tab3_Everyday_Shoes:
          case Tab3Type.Tab3_Boots_Shoes:
          case Tab3Type.Tab3_FootCover_Shoes:
          case Tab3Type.Tab3_NakedDress_Shoes:
          case Tab3Type.Tab3_HighHeels_Shoes:
          case Tab3Type.Tab3_SportsShoes_Shoes:
            this.openShoesColorPickPanel();
            break;

          case Tab2Type.Tab2_Gloves:
          case Tab3Type.Tab3_Gloves_Gloves:
          case Tab3Type.Tab3_Accessories_Gloves:
            this.openGlovesColorPickPanel();
            break;

          case Tab3Type.Tab3_PupilStyle:
            this.openPupilStyleColorPickPanel();
            break;

          case Tab3Type.Tab3_Lens:
            this.openLensColorPickPanel();
            break;

          case Tab3Type.Tab3_UpperHighlight:
            this.openUpperHighlightColorPickPanel();
            break;

          case Tab3Type.Tab3_LowerHighlight:
            this.openLowerHighlightColorPickPanel();
            break;

          case Tab3Type.Tab3_Eyelashes:
            this.openEyelashesColorPickPanel();
            break;

          case Tab3Type.Tab3_Eyeshadow:
            this.openEyeshadowColorPickPanel();
            break;

          case Tab3Type.Tab3_Blush:
            this.openBlushColorPickPanel();
            break;

          case Tab3Type.Tab3_LipMakeup:
            this.openLipMakeupColorPickPanel();
            break;

          case Tab3Type.Tab3_FullHair:
            this.openFullHairColorPickPanel();
            break;

          case Tab3Type.Tab3_FrontHair:
            this.openFrontHairColorPickPanel();
            break;

          case Tab3Type.Tab3_BackHair:
            this.openBackHairColorPickPanel();
            break;
        }
    }
    addSelectColorPickTab2Action(index) {
        if (this.colorPickTab2Index == index) return;
        this.colorPickTab2Index = index;
        this.getColorPickPanel.checkColorPickTab3AndColorPick(this.colorPickTab2Datas[this.colorPickTab2Index].color);
    }
    addSelectColorPickTab3Action(index) {
        let color = mw.LinearColor.colorHexToLinearColor(this.colorPickTab3Colors[index]);
        this.getColorPickPanel.refreshColorPickTab2AndColorPick(color);
        this.changeCharacterColor(color);
    }
    openSkinToneColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_102.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let colorPickTab2Data = new ColorPickTab2Data(name, this.localPlayer.character.description.advance.makeup.skinTone.skinColor);
        this.colorPickTab2Datas.push(colorPickTab2Data);
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.SkinToneColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openEyebrowsColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_105.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let eyebrows = this.localPlayer.character.description.advance.makeup.eyebrows;
        let eyebrowColor = mw.LinearColor.white;
        if (eyebrows?.eyebrowColor) eyebrowColor = eyebrows?.eyebrowColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(name, eyebrowColor));
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.EyebrowsColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openTopColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_110.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let part = this.localPlayer.character.description.advance.clothing.upperCloth?.part;
        if (!part || part.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        for (let i = 0; i < part.length; ++i) {
            let color = mw.LinearColor.white;
            if (part[i]?.color?.areaColor) color = part[i]?.color?.areaColor;
            this.colorPickTab2Datas.push(new ColorPickTab2Data(StringUtil.format(GameConfig.Language.Text_ColorPart.Value, i + 1), color));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.TopColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openBottomColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_111.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let part = this.localPlayer.character.description.advance.clothing.lowerCloth?.part;
        if (!part || part.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        for (let i = 0; i < part.length; ++i) {
            let color = mw.LinearColor.white;
            if (part[i]?.color?.areaColor) color = part[i]?.color?.areaColor;
            this.colorPickTab2Datas.push(new ColorPickTab2Data(StringUtil.format(GameConfig.Language.Text_ColorPart.Value, i + 1), color));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.BottomColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openShoesColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_112.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let part = this.localPlayer.character.description.advance.clothing.shoes?.part;
        if (!part || part.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        for (let i = 0; i < part.length; ++i) {
            let color = mw.LinearColor.white;
            if (part[i]?.color?.areaColor) color = part[i]?.color?.areaColor;
            this.colorPickTab2Datas.push(new ColorPickTab2Data(StringUtil.format(GameConfig.Language.Text_ColorPart.Value, i + 1), color));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.ShoeColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openGlovesColorPickPanel() {
        let name = GameConfig.Language.Text_Tab2_113.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let part = this.localPlayer.character.description.advance.clothing.gloves?.part;
        if (!part || part.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        for (let i = 0; i < part.length; ++i) {
            let color = mw.LinearColor.white;
            if (part[i]?.color?.areaColor) color = part[i]?.color?.areaColor;
            this.colorPickTab2Datas.push(new ColorPickTab2Data(StringUtil.format(GameConfig.Language.Text_ColorPart.Value, i + 1), color));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.GloveColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openPupilStyleColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1001.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let coloredContactsStyle = this.localPlayer.character.description.advance.makeup.coloredContacts.style;
        if (!coloredContactsStyle || !coloredContactsStyle?.pupilStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let pupilColor = mw.LinearColor.white;
        if (coloredContactsStyle?.leftPupilColor) pupilColor = coloredContactsStyle?.leftPupilColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_PupilColor.Value, pupilColor));
        let leftPupilColor = mw.LinearColor.white;
        if (coloredContactsStyle?.leftPupilColor) leftPupilColor = coloredContactsStyle?.leftPupilColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_LeftPupilColor.Value, leftPupilColor));
        let rightPupilColor = mw.LinearColor.white;
        if (coloredContactsStyle?.rightPupilColor) rightPupilColor = coloredContactsStyle?.rightPupilColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_RightPupilColor.Value, rightPupilColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.PupilStyleColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openLensColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1002.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let coloredContactsDecal = this.localPlayer.character.description.advance.makeup.coloredContacts.decal;
        if (!coloredContactsDecal || !coloredContactsDecal?.pupilStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let decalPupilColor = mw.LinearColor.white;
        if (coloredContactsDecal?.pupilColor) decalPupilColor = coloredContactsDecal?.pupilColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_DecalColor.Value, decalPupilColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.PupilStyleColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openUpperHighlightColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1003.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let highlight = this.localPlayer.character.description.advance.makeup.coloredContacts.highlight;
        if (!highlight || !highlight?.upperHighlightStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let upperHighlightColor = mw.LinearColor.white;
        if (highlight?.upperHighlightColor) upperHighlightColor = highlight?.upperHighlightColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_UpperHighlightColor.Value, upperHighlightColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.PupilStyleColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openLowerHighlightColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1004.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let highlight = this.localPlayer.character.description.advance.makeup.coloredContacts.highlight;
        if (!highlight || !highlight?.lowerHighlightStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let lowerHighlightColor = mw.LinearColor.white;
        if (highlight?.lowerHighlightColor) lowerHighlightColor = highlight?.lowerHighlightColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_LowerHighlightColor.Value, lowerHighlightColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.PupilStyleColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openEyelashesColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1005.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let eyelashes = this.localPlayer.character.description.advance.makeup.eyelashes;
        if (!eyelashes || !eyelashes?.eyelashStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let eyelashColor = mw.LinearColor.white;
        if (eyelashes?.eyelashColor) eyelashColor = eyelashes?.eyelashColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_EyelashColor.Value, eyelashColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.EyeLashColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openEyeshadowColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1006.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let eyeShadow = this.localPlayer.character.description.advance.makeup.eyeShadow;
        if (!eyeShadow || !eyeShadow?.eyeshadowStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let eyeshaowColor = mw.LinearColor.white;
        if (eyeShadow?.eyeshaowColor) eyeshaowColor = eyeShadow?.eyeshaowColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_EyeshaowColor.Value, eyeshaowColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.EyeShadow);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openBlushColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1007.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let blush = this.localPlayer.character.description.advance.makeup.blush;
        if (!blush || !blush?.blushStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let blushColor = mw.LinearColor.white;
        if (blush?.blushColor) blushColor = blush?.blushColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_BlushColor.Value, blushColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.BlushColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openLipMakeupColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1008.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let lipstick = this.localPlayer.character.description.advance.makeup.lipstick;
        if (!lipstick || !lipstick?.lipstickStyle) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        let lipstickColor = mw.LinearColor.white;
        if (lipstick?.lipstickColor) lipstickColor = lipstick?.lipstickColor;
        this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_LipstickColor.Value, lipstickColor));
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.LipstickColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openFullHairColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1010.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let hairColor = this.localPlayer.character.description.advance.hair.backHair.color;
        if (!hairColor) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        if (hairColor?.color && hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_Monochrome.Value, hairColor?.color));
        }
        if (hairColor?.color) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TopColor.Value, hairColor?.color));
        }
        if (hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TailColor.Value, hairColor?.gradientColor));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.HairColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openFrontHairColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1011.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let hairColor = this.localPlayer.character.description.advance.hair.frontHair.color;
        if (!hairColor) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        if (hairColor?.color && hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_Monochrome.Value, hairColor?.color));
        }
        if (hairColor?.color) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TopColor.Value, hairColor?.color));
        }
        if (hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TailColor.Value, hairColor?.gradientColor));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.HairColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    openBackHairColorPickPanel() {
        let name = GameConfig.Language.Text_Tab3_1012.Value;
        let tab1Text = `${GameConfig.Language.Text_ColorPick.Value} - ${name}`;
        let hairColor = this.localPlayer.character.description.advance.hair.backHair.color;
        if (!hairColor) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        if (hairColor?.color && hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_Monochrome.Value, hairColor?.color));
        }
        if (hairColor?.color) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TopColor.Value, hairColor?.color));
        }
        if (hairColor?.gradientColor) {
            this.colorPickTab2Datas.push(new ColorPickTab2Data(GameConfig.Language.Text_TailColor.Value, hairColor?.gradientColor));
        }
        if (!this.colorPickTab2Datas || this.colorPickTab2Datas.length == 0) {
            Notice.showDownNotice(StringUtil.format(GameConfig.Language.Text_NotSupportToning.Value, name));
            return;
        }
        GameConfig.ColorValue.getAllElement().forEach((value => {
            this.colorPickTab3Colors.push(value.HairColor);
        }));
        this.getColorPickPanel.showColorPickPanel(tab1Text, name, this.colorPickTab2Datas, this.colorPickTab3Colors);
    }
    changeCharacterColor(color) {
        switch (this.colorPickTabId) {
          case Tab2Type.Tab2_SkinTone:
            this.localPlayer.character.description.advance.makeup.skinTone.skinColor = color;
            break;

          case Tab2Type.Tab2_Eyebrows:
            this.localPlayer.character.description.advance.makeup.eyebrows.eyebrowColor = color;
            break;

          case Tab2Type.Tab2_Top:
          case Tab3Type.Tab3_LongSinglePiece_Top:
          case Tab3Type.Tab3_ShortJacket_Top:
          case Tab3Type.Tab3_ShortSinglePiece_Top:
          case Tab3Type.Tab3_Suit_Top:
          case Tab3Type.Tab3_ALongCoat_Top:
            this.localPlayer.character.description.advance.clothing.upperCloth.part[this.colorPickTab2Index].color.areaColor = color;
            break;

          case Tab2Type.Tab2_Bottom:
          case Tab3Type.Tab3_ShortSkirt_Bottom:
          case Tab3Type.Tab3_LongPants_Bottom:
          case Tab3Type.Tab3_Shorts_Bottom:
          case Tab3Type.Tab3_LongSkirt_Bottom:
          case Tab3Type.Tab3_Tights_Bottom:
            this.localPlayer.character.description.advance.clothing.lowerCloth.part[this.colorPickTab2Index].color.areaColor = color;
            break;

          case Tab2Type.Tab2_Shoes:
          case Tab3Type.Tab3_Everyday_Shoes:
          case Tab3Type.Tab3_Boots_Shoes:
          case Tab3Type.Tab3_FootCover_Shoes:
          case Tab3Type.Tab3_NakedDress_Shoes:
          case Tab3Type.Tab3_HighHeels_Shoes:
          case Tab3Type.Tab3_SportsShoes_Shoes:
            this.localPlayer.character.description.advance.clothing.shoes.part[this.colorPickTab2Index].color.areaColor = color;
            break;

          case Tab2Type.Tab2_Gloves:
          case Tab3Type.Tab3_Gloves_Gloves:
          case Tab3Type.Tab3_Accessories_Gloves:
            this.localPlayer.character.description.advance.clothing.gloves.part[this.colorPickTab2Index].color.areaColor = color;
            break;

          case Tab3Type.Tab3_PupilStyle:
            switch (this.colorPickTab2Index) {
              case 0:
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.leftPupilColor = color;
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.rightPupilColor = color;
                break;

              case 1:
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.leftPupilColor = color;
                break;

              case 2:
                this.localPlayer.character.description.advance.makeup.coloredContacts.style.rightPupilColor = color;
                break;
            }
            break;

          case Tab3Type.Tab3_Lens:
            this.localPlayer.character.description.advance.makeup.coloredContacts.decal.pupilColor = color;
            break;

          case Tab3Type.Tab3_UpperHighlight:
            this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.upperHighlightColor = color;
            break;

          case Tab3Type.Tab3_LowerHighlight:
            this.localPlayer.character.description.advance.makeup.coloredContacts.highlight.lowerHighlightColor = color;
            break;

          case Tab3Type.Tab3_Eyelashes:
            this.localPlayer.character.description.advance.makeup.eyelashes.eyelashColor = color;
            break;

          case Tab3Type.Tab3_Eyeshadow:
            this.localPlayer.character.description.advance.makeup.eyeShadow.eyeshaowColor = color;
            break;

          case Tab3Type.Tab3_Blush:
            this.localPlayer.character.description.advance.makeup.blush.blushColor = color;
            break;

          case Tab3Type.Tab3_LipMakeup:
            this.localPlayer.character.description.advance.makeup.lipstick.lipstickColor = color;
            break;

          case Tab3Type.Tab3_FullHair:
            switch (this.colorPickTab2Index) {
              case 0:
                this.localPlayer.character.description.advance.hair.backHair.color.color = color;
                this.localPlayer.character.description.advance.hair.backHair.color.gradientColor = color;
                break;

              case 1:
                this.localPlayer.character.description.advance.hair.backHair.color.color = color;
                break;

              case 2:
                this.localPlayer.character.description.advance.hair.backHair.color.gradientColor = color;
                break;
            }
            break;

          case Tab3Type.Tab3_FrontHair:
            switch (this.colorPickTab2Index) {
              case 0:
                this.localPlayer.character.description.advance.hair.frontHair.color.color = color;
                this.localPlayer.character.description.advance.hair.frontHair.color.gradientColor = color;
                break;

              case 1:
                this.localPlayer.character.description.advance.hair.frontHair.color.color = color;
                break;

              case 2:
                this.localPlayer.character.description.advance.hair.frontHair.color.gradientColor = color;
                break;
            }
            break;

          case Tab3Type.Tab3_BackHair:
            switch (this.colorPickTab2Index) {
              case 0:
                this.localPlayer.character.description.advance.hair.backHair.color.color = color;
                this.localPlayer.character.description.advance.hair.backHair.color.gradientColor = color;
                break;

              case 1:
                this.localPlayer.character.description.advance.hair.backHair.color.color = color;
                break;

              case 2:
                this.localPlayer.character.description.advance.hair.backHair.color.gradientColor = color;
                break;
            }
            break;
        }
        this.isNeedSaveColor = true;
        this.isNeedSaveCharacter = true;
    }
    get getCharacterDataKeys() {
        return this.getCharacterModuleC.getCharacterDataKeys;
    }
    getCharacterDataUpAssetIdByKey(key) {
        return this.getCharacterModuleC.getCharacterDataUpAssetIdByKey(key);
    }
}

var foreign106 = Object.freeze({
    __proto__: null,
    default: MallModuleC
});

class MallModuleS extends ModuleS {
    onStart() {}
}

var foreign107 = Object.freeze({
    __proto__: null,
    default: MallModuleS
});

class NavigationConfig {
    constructor() {
        this.speed = 10;
    }
}

class NavigationModel {
    constructor() {
        this.model = null;
        this.interactor = null;
        this.npc = null;
        this.pathVecs = [];
        this.speed = 10;
        this.isInitComplete = false;
        this.pathIndex = 0;
        this.currentLocation = new mw.Vector;
        this.startDirection = new mw.Vector;
        this.stride = mw.Vector.zero;
    }
    prepareMove() {
        if (!this.model) return;
        if (!this.pathVecs || this.pathVecs.length <= 1) return;
        this.pathIndex = 0;
        this.currentLocation = this.pathVecs[this.pathIndex];
        this.model.worldTransform.position = this.currentLocation;
        mw.Vector.subtract(this.pathVecs[this.pathIndex + 1], this.currentLocation, this.startDirection);
        this.startDirection = this.startDirection.normalized;
        mw.Vector.multiply(this.startDirection, this.speed, this.stride);
        this.model.worldTransform.rotation = new mw.Rotation(this.startDirection, mw.Vector.up);
        let modelRot = this.model.worldTransform.rotation;
        this.model.worldTransform.rotation = new mw.Rotation(modelRot.x, modelRot.y, modelRot.z + 90);
        this.pathIndex++;
        if (this.pathIndex == this.pathVecs.length) this.pathIndex = 0;
        this.isInitComplete = true;
        this.copyOtherPlayerDescription();
        TimeUtil.setInterval((() => {
            this.copyOtherPlayerDescription();
        }), 300);
    }
    copyOtherPlayerDescription() {
        let players = Player.getAllPlayers();
        if (!players || players.length == 0) return;
        let player = players[Utils.randomInt(0, players.length - 1)];
        this.npc.setDescription(player.character.getDescription());
    }
    updateMove() {
        if (!this.model || !this.pathVecs || this.pathVecs.length <= 1 || !this.isInitComplete) return;
        if (mw.Vector.distance(this.currentLocation, this.pathVecs[this.pathIndex]) <= 10) {
            this.currentLocation = this.pathVecs[this.pathIndex];
            this.model.worldTransform.position = this.currentLocation;
            if (this.pathIndex + 1 == this.pathVecs.length) {
                mw.Vector.subtract(this.pathVecs[0], this.currentLocation, this.startDirection);
            } else {
                mw.Vector.subtract(this.pathVecs[this.pathIndex + 1], this.currentLocation, this.startDirection);
            }
            this.startDirection = this.startDirection.normalized;
            mw.Vector.multiply(this.startDirection, this.speed, this.stride);
            this.model.worldTransform.rotation = new mw.Rotation(this.startDirection, mw.Vector.up);
            let modelRot = this.model.worldTransform.rotation;
            this.model.worldTransform.rotation = new mw.Rotation(modelRot.x, modelRot.y, modelRot.z + 90);
            this.pathIndex++;
            if (this.pathIndex == this.pathVecs.length) this.pathIndex = 0;
        }
        this.currentLocation = this.model.worldTransform.position;
        this.currentLocation.x += this.stride.x;
        this.currentLocation.y += this.stride.y;
        this.currentLocation.z += this.stride.z;
        this.model.worldTransform.position = this.currentLocation;
    }
    async enterInteractor() {
        if (!this.interactor || !this.npc) return;
        await this.interactor.asyncReady();
        await this.npc.asyncReady();
        this.interactor.onEnter.clear();
        this.interactor.onEnter.add((() => {
            this.npc.localTransform.position = mw.Vector.zero;
            this.npc.localTransform.rotation = mw.Rotation.zero;
        }));
        this.interactor.enter(this.npc, mw.HumanoidSlotType.Root);
    }
}

class NavigationModuleC extends ModuleC {
    onStart() {}
}

const navigationConfigs = [ {
    modelId: "040055A6",
    interactionObjId: "0A394447",
    npcId: "39AB2FB0",
    pathId: "356DCBF1",
    speed: 10
}, {
    modelId: "348F4F22",
    interactionObjId: "048FB28D",
    npcId: "254A21DD",
    pathId: "01087776",
    speed: 10
}, {
    modelId: "289E46DE",
    interactionObjId: "09295629",
    npcId: "31DE1825",
    pathId: "340AFE18",
    speed: 10
}, {
    modelId: "2963B95A",
    interactionObjId: "1CEC6972",
    npcId: "0A031A75",
    pathId: "1D44FD67",
    speed: 10
} ];

class NavigationModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.navigationModels = [];
    }
    onStart() {
        this.initNavigation();
    }
    initNavigation() {
        TimeUtil.delaySecond(15).then((() => {
            this.initNavigationModels();
        }));
    }
    initNavigationModels() {
        navigationConfigs.forEach((navigationConfig => {
            let navigationModel = new NavigationModel;
            navigationModel.speed = navigationConfig.speed;
            GameObject.asyncFindGameObjectById(navigationConfig.modelId).then((model => {
                navigationModel.model = model;
                GameObject.asyncFindGameObjectById(navigationConfig.npcId).then((async npcModel => {
                    navigationModel.npc = npcModel;
                    GameObject.asyncFindGameObjectById(navigationConfig.interactionObjId).then((async interactorModel => {
                        navigationModel.interactor = interactorModel;
                        navigationModel.enterInteractor();
                        GameObject.asyncFindGameObjectById(navigationConfig.pathId).then((pathModel => {
                            let path = pathModel.getChildren();
                            path.forEach((pathNode => {
                                navigationModel.pathVecs.push(pathNode.worldTransform.position);
                            }));
                            navigationModel.prepareMove();
                            this.navigationModels.push(navigationModel);
                        }));
                    }));
                }));
            }));
        }));
    }
    onUpdate(dt) {
        if (!this.navigationModels || this.navigationModels.length == 0) return;
        this.navigationModels.forEach((navigationModel => {
            navigationModel.updateMove();
        }));
    }
}

var foreign122 = Object.freeze({
    __proto__: null,
    NavigationConfig: NavigationConfig,
    NavigationModel: NavigationModel,
    NavigationModuleC: NavigationModuleC,
    NavigationModuleS: NavigationModuleS
});

let TryOnItem_Generate = class TryOnItem_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mClickButton() {
        if (!this.mClickButton_Internal && this.uiWidgetBase) {
            this.mClickButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mClickButton");
        }
        return this.mClickButton_Internal;
    }
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mRankTextBlock");
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mNameTextBlock");
        }
        return this.mNameTextBlock_Internal;
    }
    get mTryOnTextBlock() {
        if (!this.mTryOnTextBlock_Internal && this.uiWidgetBase) {
            this.mTryOnTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mTryOnTextBlock");
        }
        return this.mTryOnTextBlock_Internal;
    }
    get mTryOnBgImage() {
        if (!this.mTryOnBgImage_Internal && this.uiWidgetBase) {
            this.mTryOnBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mTryOnBgImage");
        }
        return this.mTryOnBgImage_Internal;
    }
    get mTryOnTipsTextBlock() {
        if (!this.mTryOnTipsTextBlock_Internal && this.uiWidgetBase) {
            this.mTryOnTipsTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mBgImage/mTryOnBgImage/mTryOnTipsTextBlock");
        }
        return this.mTryOnTipsTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mClickButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mClickButton");
        }));
        this.mClickButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mTryOnTextBlock);
        this.initLanguage(this.mTryOnTipsTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

TryOnItem_Generate = __decorate([ UIBind("UI/module/TryOnModule/TryOnItem.ui") ], TryOnItem_Generate);

var TryOnItem_Generate$1 = TryOnItem_Generate;

var foreign190 = Object.freeze({
    __proto__: null,
    default: TryOnItem_Generate$1
});

let TryOnPanel_Generate = class TryOnPanel_Generate extends UIScript {
    get mLeftCanvas() {
        if (!this.mLeftCanvas_Internal && this.uiWidgetBase) {
            this.mLeftCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas");
        }
        return this.mLeftCanvas_Internal;
    }
    get mTouchImage() {
        if (!this.mTouchImage_Internal && this.uiWidgetBase) {
            this.mTouchImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mTouchImage");
        }
        return this.mTouchImage_Internal;
    }
    get mSaveButton() {
        if (!this.mSaveButton_Internal && this.uiWidgetBase) {
            this.mSaveButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSaveButton");
        }
        return this.mSaveButton_Internal;
    }
    get mSaveTextBlock() {
        if (!this.mSaveTextBlock_Internal && this.uiWidgetBase) {
            this.mSaveTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mSaveButton/mSaveTextBlock");
        }
        return this.mSaveTextBlock_Internal;
    }
    get mOpenShareButton() {
        if (!this.mOpenShareButton_Internal && this.uiWidgetBase) {
            this.mOpenShareButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mLeftCanvas/mOpenShareButton");
        }
        return this.mOpenShareButton_Internal;
    }
    get mListBgImage() {
        if (!this.mListBgImage_Internal && this.uiWidgetBase) {
            this.mListBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListBgImage");
        }
        return this.mListBgImage_Internal;
    }
    get mListCanvas() {
        if (!this.mListCanvas_Internal && this.uiWidgetBase) {
            this.mListCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas");
        }
        return this.mListCanvas_Internal;
    }
    get mTab1Canvas() {
        if (!this.mTab1Canvas_Internal && this.uiWidgetBase) {
            this.mTab1Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas");
        }
        return this.mTab1Canvas_Internal;
    }
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab1Canvas/mTitleTextBlock");
        }
        return this.mTitleTextBlock_Internal;
    }
    get mTab2Canvas() {
        if (!this.mTab2Canvas_Internal && this.uiWidgetBase) {
            this.mTab2Canvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas");
        }
        return this.mTab2Canvas_Internal;
    }
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mRankTextBlock");
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mNameTextBlock");
        }
        return this.mNameTextBlock_Internal;
    }
    get mTryOnTextBlock() {
        if (!this.mTryOnTextBlock_Internal && this.uiWidgetBase) {
            this.mTryOnTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mTab2Canvas/mTryOnTextBlock");
        }
        return this.mTryOnTextBlock_Internal;
    }
    get mItemScrollBox() {
        if (!this.mItemScrollBox_Internal && this.uiWidgetBase) {
            this.mItemScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mItemScrollBox");
        }
        return this.mItemScrollBox_Internal;
    }
    get mItemContentCanvas() {
        if (!this.mItemContentCanvas_Internal && this.uiWidgetBase) {
            this.mItemContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mListCanvas/mItemScrollBox/mItemContentCanvas");
        }
        return this.mItemContentCanvas_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    get mCloseImage() {
        if (!this.mCloseImage_Internal && this.uiWidgetBase) {
            this.mCloseImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/ListCanvas/mCloseButton/mCloseImage");
        }
        return this.mCloseImage_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mOpenShareButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenShareButton");
        }));
        this.initLanguage(this.mOpenShareButton);
        this.mOpenShareButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mSaveButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSaveButton");
        }));
        this.mSaveButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mSaveTextBlock);
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mTryOnTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

TryOnPanel_Generate = __decorate([ UIBind("UI/module/TryOnModule/TryOnPanel.ui") ], TryOnPanel_Generate);

var TryOnPanel_Generate$1 = TryOnPanel_Generate;

var foreign191 = Object.freeze({
    __proto__: null,
    default: TryOnPanel_Generate$1
});

let SetPanel_Generate = class SetPanel_Generate extends UIScript {
    get mBgImage() {
        if (!this.mBgImage_Internal && this.uiWidgetBase) {
            this.mBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage");
        }
        return this.mBgImage_Internal;
    }
    get mSet1Button() {
        if (!this.mSet1Button_Internal && this.uiWidgetBase) {
            this.mSet1Button_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mSet1Button");
        }
        return this.mSet1Button_Internal;
    }
    get mSet1TextBlock() {
        if (!this.mSet1TextBlock_Internal && this.uiWidgetBase) {
            this.mSet1TextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mSet1Button/mSet1TextBlock");
        }
        return this.mSet1TextBlock_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas");
        }
        return this.mContentCanvas_Internal;
    }
    get mQualityImage() {
        if (!this.mQualityImage_Internal && this.uiWidgetBase) {
            this.mQualityImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mQualityImage");
        }
        return this.mQualityImage_Internal;
    }
    get mQualityTextBlock() {
        if (!this.mQualityTextBlock_Internal && this.uiWidgetBase) {
            this.mQualityTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mQualityImage/mQualityTextBlock");
        }
        return this.mQualityTextBlock_Internal;
    }
    get mQualityProgressBar() {
        if (!this.mQualityProgressBar_Internal && this.uiWidgetBase) {
            this.mQualityProgressBar_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mQualityImage/mQualityProgressBar");
        }
        return this.mQualityProgressBar_Internal;
    }
    get mSoundImage() {
        if (!this.mSoundImage_Internal && this.uiWidgetBase) {
            this.mSoundImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mSoundImage");
        }
        return this.mSoundImage_Internal;
    }
    get mSoundTextBlock() {
        if (!this.mSoundTextBlock_Internal && this.uiWidgetBase) {
            this.mSoundTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mSoundImage/mSoundTextBlock");
        }
        return this.mSoundTextBlock_Internal;
    }
    get mSoundProgressBar() {
        if (!this.mSoundProgressBar_Internal && this.uiWidgetBase) {
            this.mSoundProgressBar_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mSoundImage/mSoundProgressBar");
        }
        return this.mSoundProgressBar_Internal;
    }
    get mBgMusicImage() {
        if (!this.mBgMusicImage_Internal && this.uiWidgetBase) {
            this.mBgMusicImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mBgMusicImage");
        }
        return this.mBgMusicImage_Internal;
    }
    get mBgMusicTextBlock() {
        if (!this.mBgMusicTextBlock_Internal && this.uiWidgetBase) {
            this.mBgMusicTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mBgMusicImage/mBgMusicTextBlock");
        }
        return this.mBgMusicTextBlock_Internal;
    }
    get mBgMusicmProgressBar() {
        if (!this.mBgMusicmProgressBar_Internal && this.uiWidgetBase) {
            this.mBgMusicmProgressBar_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mBgMusicImage/mBgMusicmProgressBar");
        }
        return this.mBgMusicmProgressBar_Internal;
    }
    get mViewAngleImage() {
        if (!this.mViewAngleImage_Internal && this.uiWidgetBase) {
            this.mViewAngleImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mViewAngleImage");
        }
        return this.mViewAngleImage_Internal;
    }
    get mViewAngleTextBlock() {
        if (!this.mViewAngleTextBlock_Internal && this.uiWidgetBase) {
            this.mViewAngleTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mViewAngleImage/mViewAngleTextBlock");
        }
        return this.mViewAngleTextBlock_Internal;
    }
    get mViewAngleProgressBar() {
        if (!this.mViewAngleProgressBar_Internal && this.uiWidgetBase) {
            this.mViewAngleProgressBar_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mViewAngleImage/mViewAngleProgressBar");
        }
        return this.mViewAngleProgressBar_Internal;
    }
    get mShowNickNameImage() {
        if (!this.mShowNickNameImage_Internal && this.uiWidgetBase) {
            this.mShowNickNameImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage");
        }
        return this.mShowNickNameImage_Internal;
    }
    get mShowNickNameTextBlock() {
        if (!this.mShowNickNameTextBlock_Internal && this.uiWidgetBase) {
            this.mShowNickNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameTextBlock");
        }
        return this.mShowNickNameTextBlock_Internal;
    }
    get mShowNickNameCanvas() {
        if (!this.mShowNickNameCanvas_Internal && this.uiWidgetBase) {
            this.mShowNickNameCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas");
        }
        return this.mShowNickNameCanvas_Internal;
    }
    get mShowNickNameButton() {
        if (!this.mShowNickNameButton_Internal && this.uiWidgetBase) {
            this.mShowNickNameButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mShowNickNameButton");
        }
        return this.mShowNickNameButton_Internal;
    }
    get mHideNickNameBgImage() {
        if (!this.mHideNickNameBgImage_Internal && this.uiWidgetBase) {
            this.mHideNickNameBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mHideNickNameBgImage");
        }
        return this.mHideNickNameBgImage_Internal;
    }
    get mShowNickNameBgImage() {
        if (!this.mShowNickNameBgImage_Internal && this.uiWidgetBase) {
            this.mShowNickNameBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mShowNickNameBgImage");
        }
        return this.mShowNickNameBgImage_Internal;
    }
    get mOnOffNickNameCanvas() {
        if (!this.mOnOffNickNameCanvas_Internal && this.uiWidgetBase) {
            this.mOnOffNickNameCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mOnOffNickNameCanvas");
        }
        return this.mOnOffNickNameCanvas_Internal;
    }
    get mOnOffNickNameBgImage() {
        if (!this.mOnOffNickNameBgImage_Internal && this.uiWidgetBase) {
            this.mOnOffNickNameBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mOnOffNickNameCanvas/mOnOffNickNameBgImage");
        }
        return this.mOnOffNickNameBgImage_Internal;
    }
    get mOnOffNickNameTextBlock() {
        if (!this.mOnOffNickNameTextBlock_Internal && this.uiWidgetBase) {
            this.mOnOffNickNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mShowNickNameImage/mShowNickNameCanvas/mOnOffNickNameCanvas/mOnOffNickNameTextBlock");
        }
        return this.mOnOffNickNameTextBlock_Internal;
    }
    get mTryOnPermissionImage() {
        if (!this.mTryOnPermissionImage_Internal && this.uiWidgetBase) {
            this.mTryOnPermissionImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage");
        }
        return this.mTryOnPermissionImage_Internal;
    }
    get mTryOnPermissionTextBlock() {
        if (!this.mTryOnPermissionTextBlock_Internal && this.uiWidgetBase) {
            this.mTryOnPermissionTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionTextBlock");
        }
        return this.mTryOnPermissionTextBlock_Internal;
    }
    get mTryOnPermissionCanvas() {
        if (!this.mTryOnPermissionCanvas_Internal && this.uiWidgetBase) {
            this.mTryOnPermissionCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas");
        }
        return this.mTryOnPermissionCanvas_Internal;
    }
    get mTryOnPermissionButton() {
        if (!this.mTryOnPermissionButton_Internal && this.uiWidgetBase) {
            this.mTryOnPermissionButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mTryOnPermissionButton");
        }
        return this.mTryOnPermissionButton_Internal;
    }
    get mHideTryOnPermissionBgImage() {
        if (!this.mHideTryOnPermissionBgImage_Internal && this.uiWidgetBase) {
            this.mHideTryOnPermissionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mHideTryOnPermissionBgImage");
        }
        return this.mHideTryOnPermissionBgImage_Internal;
    }
    get mShowTryOnPermissionBgImage() {
        if (!this.mShowTryOnPermissionBgImage_Internal && this.uiWidgetBase) {
            this.mShowTryOnPermissionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mShowTryOnPermissionBgImage");
        }
        return this.mShowTryOnPermissionBgImage_Internal;
    }
    get mOnOffTryOnPermissionCanvas() {
        if (!this.mOnOffTryOnPermissionCanvas_Internal && this.uiWidgetBase) {
            this.mOnOffTryOnPermissionCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mOnOffTryOnPermissionCanvas");
        }
        return this.mOnOffTryOnPermissionCanvas_Internal;
    }
    get mOnOffTryOnPermissionBgImage() {
        if (!this.mOnOffTryOnPermissionBgImage_Internal && this.uiWidgetBase) {
            this.mOnOffTryOnPermissionBgImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mOnOffTryOnPermissionCanvas/mOnOffTryOnPermissionBgImage");
        }
        return this.mOnOffTryOnPermissionBgImage_Internal;
    }
    get mOnOffTryOnPermissionTextBlock() {
        if (!this.mOnOffTryOnPermissionTextBlock_Internal && this.uiWidgetBase) {
            this.mOnOffTryOnPermissionTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mTryOnPermissionImage/mTryOnPermissionCanvas/mOnOffTryOnPermissionCanvas/mOnOffTryOnPermissionTextBlock");
        }
        return this.mOnOffTryOnPermissionTextBlock_Internal;
    }
    get mResetButton() {
        if (!this.mResetButton_Internal && this.uiWidgetBase) {
            this.mResetButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mResetButton");
        }
        return this.mResetButton_Internal;
    }
    get mResetTextBlock() {
        if (!this.mResetTextBlock_Internal && this.uiWidgetBase) {
            this.mResetTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mResetButton/mResetTextBlock");
        }
        return this.mResetTextBlock_Internal;
    }
    get mResetPosButton() {
        if (!this.mResetPosButton_Internal && this.uiWidgetBase) {
            this.mResetPosButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mResetPosButton");
        }
        return this.mResetPosButton_Internal;
    }
    get mResetPosTextBlock() {
        if (!this.mResetPosTextBlock_Internal && this.uiWidgetBase) {
            this.mResetPosTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mContentCanvas/mResetPosButton/mResetPosTextBlock");
        }
        return this.mResetPosTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/BgImage/mBgImage/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSet1Button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSet1Button");
        }));
        this.mSet1Button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mShowNickNameButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mShowNickNameButton");
        }));
        this.mShowNickNameButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mTryOnPermissionButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mTryOnPermissionButton");
        }));
        this.mTryOnPermissionButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mResetButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mResetButton");
        }));
        this.mResetButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mResetPosButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mResetPosButton");
        }));
        this.mResetPosButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mSet1TextBlock);
        this.initLanguage(this.mQualityTextBlock);
        this.initLanguage(this.mSoundTextBlock);
        this.initLanguage(this.mBgMusicTextBlock);
        this.initLanguage(this.mViewAngleTextBlock);
        this.initLanguage(this.mShowNickNameTextBlock);
        this.initLanguage(this.mOnOffNickNameTextBlock);
        this.initLanguage(this.mTryOnPermissionTextBlock);
        this.initLanguage(this.mOnOffTryOnPermissionTextBlock);
        this.initLanguage(this.mResetTextBlock);
        this.initLanguage(this.mResetPosTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SetPanel_Generate = __decorate([ UIBind("UI/module/SetModule/SetPanel.ui") ], SetPanel_Generate);

var SetPanel_Generate$1 = SetPanel_Generate;

var foreign185 = Object.freeze({
    __proto__: null,
    default: SetPanel_Generate$1
});

class SetPanel extends SetPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.setModuleC = null;
    }
    get getSetModuleC() {
        if (this.setModuleC == null) {
            this.setModuleC = ModuleService.getModule(SetModuleC);
        }
        return this.setModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mSet1TextBlock.text = GameConfig.Language.Text_SetUp1.Value;
        this.mQualityTextBlock.text = GameConfig.Language.Text_PictureQuality.Value;
        this.mSoundTextBlock.text = GameConfig.Language.Text_SoundEffects.Value;
        this.mBgMusicTextBlock.text = GameConfig.Language.Text_BackgroundMusic.Value;
        this.mViewAngleTextBlock.text = GameConfig.Language.Text_ViewAngleScaling.Value;
        this.mShowNickNameTextBlock.text = GameConfig.Language.Text_DisplayNicknames.Value;
        this.mTryOnPermissionTextBlock.text = GameConfig.Language.Text_TryOnTips9.Value;
        this.mResetPosTextBlock.text = GameConfig.Language.Text_ResetLocation.Value;
        this.mResetTextBlock.text = GameConfig.Language.Text_RestoringSettings.Value;
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.onCloseButtonClick.bind(this));
        this.mQualityProgressBar.onSliderValueChanged.add(this.onQualityChange.bind(this));
        this.mQualityProgressBar.sliderButtonReleaseDelegate.add(this.onSaveQuality.bind(this));
        this.mSoundProgressBar.onSliderValueChanged.add(this.onSoundChange.bind(this));
        this.mSoundProgressBar.sliderButtonReleaseDelegate.add(this.onSaveSound.bind(this));
        this.mBgMusicmProgressBar.onSliderValueChanged.add(this.onBgMusicChange.bind(this));
        this.mBgMusicmProgressBar.sliderButtonReleaseDelegate.add(this.onSaveBgMusic.bind(this));
        this.mViewAngleProgressBar.onSliderValueChanged.add(this.onViewAngleChange.bind(this));
        this.mViewAngleProgressBar.sliderButtonReleaseDelegate.add(this.onSaveViewAngle.bind(this));
        this.mShowNickNameButton.onClicked.add(this.onShowNickNameButtonClick.bind(this));
        this.mTryOnPermissionButton.onClicked.add(this.onTryOnPermissionButtonClick.bind(this));
        this.mResetButton.onClicked.add(this.onResetButtonClick.bind(this));
        this.mResetPosButton.onClicked.add(this.onResetPosButtonClick.bind(this));
    }
    onCloseButtonClick() {
        this.hide();
    }
    onShowNickNameButtonClick() {
        this.getSetModuleC.onShowNickNameAction.call(this.updateNickNameUI.bind(this));
    }
    onTryOnPermissionButtonClick() {
        this.getSetModuleC.onTryOnPermissionAction.call(this.updateTryOnPermissionUI.bind(this));
    }
    updateNickNameUI(isShowNickName) {
        if (isShowNickName) {
            Utils.setWidgetVisibility(this.mShowNickNameBgImage, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mHideNickNameBgImage, mw.SlateVisibility.Collapsed);
            this.mOnOffNickNameTextBlock.text = GameConfig.Language.Text_On.Value;
            this.mOnOffNickNameCanvas.position = new Vector2(46, -3.5);
        } else {
            Utils.setWidgetVisibility(this.mShowNickNameBgImage, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mHideNickNameBgImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mOnOffNickNameTextBlock.text = GameConfig.Language.Text_Off.Value;
            this.mOnOffNickNameCanvas.position = new Vector2(-14, -3.5);
        }
    }
    updateTryOnPermissionUI(isTryOn) {
        if (isTryOn) {
            Utils.setWidgetVisibility(this.mShowTryOnPermissionBgImage, mw.SlateVisibility.SelfHitTestInvisible);
            Utils.setWidgetVisibility(this.mHideTryOnPermissionBgImage, mw.SlateVisibility.Collapsed);
            this.mOnOffTryOnPermissionTextBlock.text = GameConfig.Language.Text_TryOnTips10.Value;
            this.mOnOffTryOnPermissionCanvas.position = new Vector2(75, -3.5);
        } else {
            Utils.setWidgetVisibility(this.mShowTryOnPermissionBgImage, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mHideTryOnPermissionBgImage, mw.SlateVisibility.SelfHitTestInvisible);
            this.mOnOffTryOnPermissionTextBlock.text = GameConfig.Language.Text_TryOnTips11.Value;
            this.mOnOffTryOnPermissionCanvas.position = new Vector2(-25, -3.5);
        }
    }
    updateViewAngleUI(value) {
        this.mViewAngleProgressBar.currentValue = value;
    }
    onResetButtonClick() {
        this.getSetModuleC.onResetAction.call();
    }
    onResetPosButtonClick() {
        this.getSetModuleC.onResetPosAction.call();
    }
    onQualityChange(value) {
        this.getSetModuleC.onQualityChangeAction.call(value);
    }
    onSaveQuality(value) {
        this.getSetModuleC.onSaveQualityAction.call();
    }
    onSoundChange(value) {
        this.getSetModuleC.onSoundChangeAction.call(value);
    }
    onSaveSound(value) {
        this.getSetModuleC.onSaveSoundAction.call();
    }
    onBgMusicChange(value) {
        this.getSetModuleC.onBgMusicChangeAction.call(value);
    }
    onSaveBgMusic(value) {
        this.getSetModuleC.onSaveBgMusicAction.call();
    }
    onViewAngleChange(value) {
        this.getSetModuleC.onViewAngleChangeAction.call(value);
    }
    onSaveViewAngle(value) {
        this.getSetModuleC.onSaveViewAngleAction.call();
    }
    setDatas(quality, sound, bgMusic, viewAngle, isShowNickName, isTryOn) {
        this.updateNickNameUI(isShowNickName);
        this.updateTryOnPermissionUI(isTryOn);
        this.mQualityProgressBar.currentValue = quality;
        this.mSoundProgressBar.currentValue = sound;
        this.mBgMusicmProgressBar.currentValue = bgMusic;
        this.mViewAngleProgressBar.currentValue = viewAngle;
    }
}

var foreign130 = Object.freeze({
    __proto__: null,
    default: SetPanel
});

class SetData extends Subdata {
    constructor() {
        super(...arguments);
        this.sound = 1;
        this.bgMusic = 1;
        this.viewAngle = 350;
        this.isShowNickName = true;
        this.isTryOn = true;
    }
    setSound(value) {
        this.sound = value;
        this.save(false);
    }
    setBgMusic(value) {
        this.bgMusic = value;
        this.save(false);
    }
    setViewAngle(value) {
        this.viewAngle = value;
        this.save(false);
    }
    setIsShowNickName(value) {
        this.isShowNickName = value;
        this.save(false);
    }
    setIsTryOn(value) {
        this.isTryOn = value;
        this.save(false);
    }
    reset(sound, bgMusic, viewAngle, isShowNickName, isTryOn) {
        this.sound = sound;
        this.bgMusic = bgMusic;
        this.viewAngle = viewAngle;
        this.isShowNickName = isShowNickName;
        this.isTryOn = isTryOn;
        this.save(false);
    }
}

__decorate([ Decorator.persistence() ], SetData.prototype, "sound", void 0);

__decorate([ Decorator.persistence() ], SetData.prototype, "bgMusic", void 0);

__decorate([ Decorator.persistence() ], SetData.prototype, "viewAngle", void 0);

__decorate([ Decorator.persistence() ], SetData.prototype, "isShowNickName", void 0);

__decorate([ Decorator.persistence() ], SetData.prototype, "isTryOn", void 0);

class SetModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.setPanel = null;
        this.hudModuleC = null;
        this.onShowNickNameAction = new Action1;
        this.onTryOnPermissionAction = new Action1;
        this.onResetAction = new Action;
        this.onResetPosAction = new Action;
        this.onQualityChangeAction = new Action1;
        this.onSaveQualityAction = new Action;
        this.onSoundChangeAction = new Action1;
        this.onSaveSoundAction = new Action;
        this.onBgMusicChangeAction = new Action1;
        this.onSaveBgMusicAction = new Action;
        this.onViewAngleChangeAction = new Action1;
        this.onSaveViewAngleAction = new Action;
        this.isHasSetData = false;
        this.quality = 0;
        this.sound = 0;
        this.bgMusic = 0;
        this.viewAngle = 0;
        this.isShowNickName = true;
        this.isTryOn = true;
    }
    get getSetPanel() {
        if (this.setPanel == null) {
            this.setPanel = UIService.getUI(SetPanel);
        }
        return this.setPanel;
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    onStart() {
        this.initEvent();
        InputUtil.onKeyDown(mw.Keys.K, (() => {
            console.error(GraphicsSettings.getDefaultCPULevel());
            console.error(GraphicsSettings.getDefaultGPULevel());
            console.error(GraphicsSettings.getGPULevel());
            console.error(GraphicsSettings.getCPULevel());
        }));
    }
    onEnterScene(sceneType) {
        this.initSetData();
    }
    initEvent() {
        this.getHUDModuleC.onOpenSetAction.add(this.addOpenSetAction.bind(this));
        this.onShowNickNameAction.add(this.addShowNickNameAction.bind(this));
        this.onTryOnPermissionAction.add(this.addTryOnPermissionAction.bind(this));
        this.onResetAction.add(this.addResetAction.bind(this));
        this.onResetPosAction.add(this.addResetPosAction.bind(this));
        this.onQualityChangeAction.add(this.addQualityChangeAction.bind(this));
        this.onSaveQualityAction.add(this.addSaveQualityAction.bind(this));
        this.onSoundChangeAction.add(this.addSoundChangeAction.bind(this));
        this.onSaveSoundAction.add(this.addSaveSoundAction.bind(this));
        this.onBgMusicChangeAction.add(this.addBgMusicChangeAction.bind(this));
        this.onSaveBgMusicAction.add(this.addSaveBgMusicAction.bind(this));
        this.onViewAngleChangeAction.add(this.addViewAngleChangeAction.bind(this));
        this.onSaveViewAngleAction.add(this.addSaveViewAngleAction.bind(this));
        Event.addLocalListener(EventType.OnOffMainUI, this.addOnOffMainUI.bind(this));
    }
    addOnOffMainUI(isShow) {
        console.warn(`wfz - addOnOffMainUI - isShow:${isShow}`);
        if (isShow) return;
        if (UIService.getUI(SetPanel, false)?.visible) this.getSetPanel.hide();
    }
    addOpenSetAction() {
        if (!this.isHasSetData) {
            this.getSetPanel.setDatas(this.quality, this.sound, this.bgMusic, this.viewAngle, this.isShowNickName, this.isTryOn);
            this.isHasSetData = true;
        }
        if (Camera.currentCamera.springArm.length != this.viewAngle) {
            this.viewAngle = Camera.currentCamera.springArm.length;
            this.getSetPanel.updateViewAngleUI(this.viewAngle);
            this.server.net_sendSetViewAngle(this.viewAngle);
        }
        this.getSetPanel.show();
    }
    addShowNickNameAction(callBack) {
        this.isShowNickName = !this.isShowNickName;
        Character.nameVisible = this.isShowNickName;
        this.server.net_sendSetNickName(this.isShowNickName);
        if (callBack) callBack(this.isShowNickName);
    }
    addTryOnPermissionAction(callBack) {
        this.isTryOn = !this.isTryOn;
        this.server.net_sendSetTryOn(this.isTryOn);
        if (callBack) callBack(this.isTryOn);
    }
    addResetAction() {
        let isReset = false;
        if (this.quality != GraphicsSettings.getGPULevel()) {
            this.quality = GraphicsSettings.getDefaultGPULevel();
            GraphicsSettings.setGraphicsLevel(this.quality, this.quality);
            isReset = true;
        }
        if (this.sound != 1) {
            this.sound = 1;
            SoundService.volumeScale = this.sound;
            isReset = true;
        }
        if (this.bgMusic != 1) {
            this.bgMusic = 1;
            SoundService.BGMVolumeScale = this.bgMusic;
            isReset = true;
        }
        if (this.viewAngle != 350) {
            this.viewAngle = 350;
            Camera.currentCamera.springArm.length = this.viewAngle;
            isReset = true;
        }
        if (isReset) {
            this.getSetPanel.setDatas(this.quality, this.sound, this.bgMusic, this.viewAngle, this.isShowNickName, this.isTryOn);
            this.server.net_reset(this.sound, this.bgMusic, this.viewAngle, this.isShowNickName, this.isTryOn);
        }
    }
    addResetPosAction() {
        Utils.resetPlayerPos();
    }
    addQualityChangeAction(value) {
        this.quality = value;
    }
    addSaveQualityAction() {
        GraphicsSettings.setGraphicsLevel(this.quality, this.quality);
    }
    addSoundChangeAction(value) {
        this.sound = value;
        SoundService.volumeScale = this.sound;
    }
    addSaveSoundAction() {
        this.server.net_setSound(this.sound);
    }
    addBgMusicChangeAction(value) {
        this.bgMusic = value;
        SoundService.BGMVolumeScale = this.bgMusic;
    }
    addSaveBgMusicAction() {
        this.server.net_setBgMusic(this.bgMusic);
    }
    addViewAngleChangeAction(value) {
        this.viewAngle = value;
        Camera.currentCamera.springArm.length = value;
    }
    addSaveViewAngleAction() {
        this.server.net_sendSetViewAngle(this.viewAngle);
    }
    initSetData() {
        this.quality = GraphicsSettings.getDefaultGPULevel();
        this.sound = this.data.sound;
        this.bgMusic = this.data.bgMusic;
        this.viewAngle = this.data.viewAngle;
        this.isShowNickName = this.data.isShowNickName;
        this.isTryOn = this.data.isTryOn;
        console.error(`quality:${this.quality}, sound:${this.sound}, bgMusic:${this.bgMusic}, viewAngle:${this.viewAngle}, isShowNickName:${this.isShowNickName}, isTryOn:${this.isTryOn}`);
        SoundService.volumeScale = this.sound;
        SoundService.BGMVolumeScale = this.bgMusic;
        Camera.currentCamera.springArm.length = this.viewAngle;
        Character.nameVisible = this.isShowNickName;
    }
}

class SetModuleS extends ModuleS {
    onStart() {}
    net_sendSetNickName(isShowNickName) {
        this.currentData.setIsShowNickName(isShowNickName);
    }
    net_sendSetTryOn(isTryOn) {
        this.currentData.setIsTryOn(isTryOn);
    }
    net_setSound(sound) {
        this.currentData.setSound(sound);
    }
    net_setBgMusic(bgMusic) {
        this.currentData.setBgMusic(bgMusic);
    }
    net_sendSetViewAngle(viewAngle) {
        this.currentData.setViewAngle(viewAngle);
    }
    net_reset(sound, bgMusic, viewAngle, isShowNickName, isTryOn) {
        this.currentData.reset(sound, bgMusic, viewAngle, isShowNickName, isTryOn);
    }
}

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_sendSetNickName", null);

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_sendSetTryOn", null);

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_setSound", null);

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_setBgMusic", null);

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_sendSetViewAngle", null);

__decorate([ Decorator.noReply() ], SetModuleS.prototype, "net_reset", null);

var foreign129 = Object.freeze({
    __proto__: null,
    SetData: SetData,
    SetModuleC: SetModuleC,
    SetModuleS: SetModuleS
});

class TryOnItem extends TryOnItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.tryOnModuleC = null;
        this.index = -1;
        this.roomData = null;
        this.isSelf = false;
    }
    get getTryOnModuleC() {
        if (this.tryOnModuleC == null) {
            this.tryOnModuleC = ModuleService.getModule(TryOnModuleC);
        }
        return this.tryOnModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTryOnTipsTextBlock.text = GameConfig.Language.Text_TryOnTips4.Value;
    }
    bindButton() {
        this.mClickButton.onClicked.add(this.addClickButton.bind(this));
    }
    addClickButton() {
        this.getTryOnModuleC.onTryOnAction.call(this.roomData);
    }
    setData(index, roomData, isSelf) {
        this.index = index;
        this.roomData = roomData;
        this.isSelf = isSelf;
        this.mRankTextBlock.text = index.toString();
        this.mNameTextBlock.text = roomData.playerName;
        this.mTryOnTextBlock.text = roomData.tryOn.toString();
        if (isSelf) {
            this.mTryOnTipsTextBlock.text = GameConfig.Language.Text_TryOnTips5.Value;
            this.mTryOnTipsTextBlock.outlineSize = 1;
            this.mRankTextBlock.outlineSize = 1;
            this.mNameTextBlock.outlineSize = 1;
            this.mTryOnTextBlock.outlineSize = 1;
        } else {
            this.mTryOnTipsTextBlock.text = GameConfig.Language.Text_TryOnTips4.Value;
            this.mTryOnTipsTextBlock.outlineSize = 0;
            this.mRankTextBlock.outlineSize = 0;
            this.mNameTextBlock.outlineSize = 0;
            this.mTryOnTextBlock.outlineSize = 0;
        }
    }
}

class TryOnPanel extends TryOnPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.tryOnModuleC = null;
        this.tryOnItems = [];
        this.moveId = -1;
        this.moveVec = [];
        this.dir = 0;
        this.onMoveTouchEvent = (widget, event, x, y, inPointerEvent) => {
            if (this.movePos) {
                if (event == Enums.TouchEvent.DOWN) {
                    if (this.moveId < 0) {
                        this.moveId = inPointerEvent.pointerIndex;
                        this.moveVec[0] = x;
                        this.moveVec[1] = y;
                    }
                } else if (event == Enums.TouchEvent.MOVE) {
                    if (this.moveId >= 0) {
                        let xoffset = x - this.moveVec[0];
                        let yoffset = y - this.moveVec[1];
                        this.dir = 0;
                        if (Math.abs(xoffset) > Math.abs(yoffset)) {
                            this.dir = Math.floor(xoffset);
                        }
                        this.moveVec[0] = x;
                        this.moveVec[1] = y;
                    }
                } else if (event == Enums.TouchEvent.UP) {
                    if (this.moveId >= 0) {
                        this.moveId = -1;
                        this.dir = 0;
                    }
                }
            }
        };
    }
    get getTryOnModuleC() {
        if (this.tryOnModuleC == null) {
            this.tryOnModuleC = ModuleService.getModule(TryOnModuleC);
        }
        return this.tryOnModuleC;
    }
    onStart() {
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_HUDPanelTips2.Value;
        this.mRankTextBlock.text = GameConfig.Language.Text_TryOnTips1.Value;
        this.mNameTextBlock.text = GameConfig.Language.Text_TryOnTips2.Value;
        this.mTryOnTextBlock.text = GameConfig.Language.Text_TryOnTips3.Value;
        this.mSaveTextBlock.text = GameConfig.Language.Text_FreeSave.Value;
        Utils.setWidgetVisibility(this.mTouchImage, mw.SlateVisibility.Collapsed);
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
        this.mSaveButton.onClicked.add(this.addSaveButton.bind(this));
        this.mOpenShareButton.onClicked.add(this.addOpenShareButton.bind(this));
    }
    addCloseButton() {
        this.getTryOnModuleC.onCloseAction.call();
    }
    addSaveButton() {
        this.hide();
        this.getTryOnModuleC.onSaveAction.call();
    }
    addOpenShareButton() {
        this.getTryOnModuleC.onOpenShareAction.call();
    }
    refreshTryOnPanel(roomDatas, curRoomIndex, isShow = true) {
        if (roomDatas.length > this.tryOnItems.length) {
            for (let i = 0; i < this.tryOnItems.length; ++i) {
                this.tryOnItems[i].setData(i + 1, roomDatas[i], i == curRoomIndex);
                Utils.setWidgetVisibility(this.tryOnItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.tryOnItems.length; i < roomDatas.length; ++i) {
                let tryOnItem = UIService.create(TryOnItem);
                tryOnItem.setData(i + 1, roomDatas[i], i == curRoomIndex);
                this.mItemContentCanvas.addChild(tryOnItem.uiObject);
                this.tryOnItems.push(tryOnItem);
            }
        } else {
            for (let i = 0; i < roomDatas.length; ++i) {
                this.tryOnItems[i].setData(i + 1, roomDatas[i], i == curRoomIndex);
                Utils.setWidgetVisibility(this.tryOnItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = roomDatas.length; i < this.tryOnItems.length; ++i) {
                Utils.setWidgetVisibility(this.tryOnItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
        if (isShow) this.show();
    }
    onShow(...params) {
        Event.dispatchToLocal(EventType.OnOffMainUI, false);
    }
    onHide() {
        Event.dispatchToLocal(EventType.OnOffMainUI, true);
    }
    initTryOnRot() {
        this.moveVec = [];
        mw.TimeUtil.delayExecute((() => {
            this.movePos = this.mTouchImage.position.multiply(1);
        }), 3);
    }
    onUpdate(dt) {
        if (this.dir != 0) {
            this.getTryOnModuleC.addRoatation(this.dir * dt);
            this.dir = 0;
        }
    }
    onTouchStarted(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchStarted(inGemory, inPointerEvent);
    }
    onTouchMoved(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchMoved(inGemory, inPointerEvent);
    }
    onTouchEnded(inGemory, inPointerEvent) {
        return TouchScript.instance.onTouchEnded(inGemory, inPointerEvent);
    }
}

class TryOnModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.mallModuleC = null;
        this.rankModuleC = null;
        this.tryOnPanel = null;
        this.mallTipsPanel = null;
        this.sharePanel = null;
        this.onTryOnAction = new Action1;
        this.onCloseAction = new Action;
        this.onSaveAction = new Action;
        this.onOpenShareAction = new Action;
        this.tryOnRoomData = null;
        this.isNeedSaveCharacter = false;
        this.mallCharacterRotSpeed = 30;
        this.tryOnConfigData = null;
        this.npcIds = [ {
            npcId: `1824A6F8`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"521470",87,"0|ffebd3ff",90,"0|-0.001",90,"1|-0.001",90,"2|-0.001",90,"3|-0.001",90,"4|-0.001",91,"0|-0.001",91,"1|-0.001",91,"2|-0.001",91,"3|-0.001",91,"4|-0.001",92,"0|-0.001",92,"1|-0.001",92,"2|-0.001",92,"3|-0.001",92,"4|-0.001",93,"0|-0.001",93,"1|-0.001",93,"2|-0.001",93,"3|-0.001",93,"4|-0.001",96,"0|-0.001",96,"1|-0.001",96,"2|-0.001",96,"3|-0.001",96,"4|-0.001",97,"521469",98,"0|ffebd3ff",98,"4|f",101,"0|-0.001",101,"1|-0.001",101,"2|-0.001",101,"3|-0.001",101,"4|-0.001",101,"5|-0.001",101,"6|-0.001",101,"7|-0.001",101,"8|-0.001",102,"0|-0.001",102,"1|-0.001",102,"2|-0.001",102,"3|-0.001",102,"4|-0.001",102,"5|-0.001",102,"6|-0.001",102,"7|-0.001",102,"8|-0.001",103,"0|-0.001",103,"1|-0.001",103,"2|-0.001",103,"3|-0.001",103,"4|-0.001",103,"5|-0.001",103,"6|-0.001",103,"7|-0.001",103,"8|-0.001",104,"0|-0.001",104,"1|-0.001",104,"2|-0.001",104,"3|-0.001",104,"4|-0.001",104,"5|-0.001",104,"6|-0.001",104,"7|-0.001",104,"8|-0.001",107,"0|-0.001",107,"1|-0.001",107,"2|-0.001",107,"3|-0.001",107,"4|-0.001",107,"5|-0.001",107,"6|-0.001",107,"7|-0.001",107,"8|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"521468",120,"4|ffebd3ff",123,"0|-0.001",123,"1|-0.001",123,"2|-0.001",123,"3|-0.001",123,"4|-0.001",123,"5|-0.001",123,"6|-0.001",123,"7|-0.001",123,"8|-0.001",124,"0|-0.001",124,"1|-0.001",124,"2|-0.001",124,"3|-0.001",124,"4|-0.001",124,"5|-0.001",124,"6|-0.001",124,"7|-0.001",124,"8|-0.001",125,"0|-0.001",125,"1|-0.001",125,"2|-0.001",125,"3|-0.001",125,"4|-0.001",125,"5|-0.001",125,"6|-0.001",125,"7|-0.001",125,"8|-0.001",126,"0|-0.001",126,"1|-0.001",126,"2|-0.001",126,"3|-0.001",126,"4|-0.001",126,"5|-0.001",126,"6|-0.001",126,"7|-0.001",126,"8|-0.001",129,"0|-0.001",129,"1|-0.001",129,"2|-0.001",129,"3|-0.001",129,"4|-0.001",129,"5|-0.001",129,"6|-0.001",129,"7|-0.001",129,"8|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|-0.001",157,"1|-0.001",157,"2|-0.001",158,"0|-0.001",158,"1|-0.001",158,"2|-0.001",161,"0|-0.001",161,"1|-0.001",161,"2|-0.001",162,"0|-0.001",162,"1|-0.001",162,"2|-0.001",163,"92726",166,1.5,169,"521471",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",192,"0|ffebd3ff",197,"0|-0.001",197,"1|-0.001",197,"2|-0.001",197,"3|-0.001",197,"4|-0.001",198,"0|-0.001",198,"1|-0.001",198,"2|-0.001",198,"3|-0.001",198,"4|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",205,"1|-0.001",205,"2|-0.001",205,"3|-0.001",205,"4|-0.001",206,"0|-0.001",206,"1|-0.001",206,"2|-0.001",206,"3|-0.001",206,"4|-0.001",207,"0|-0.001",207,"1|-0.001",207,"2|-0.001",207,"3|-0.001",207,"4|-0.001",208,"0|-0.001",208,"1|-0.001",208,"2|-0.001",208,"3|-0.001",208,"4|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,228,"2|566636"],"version":1,"slotData":["23$516829$0,0,0|0,-90,0|1,1,1"],"dynDecor":["","","566636","","","","",""]}`
        }, {
            npcId: `119AB592`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"515650",87,"0|f",87,"1|d42d3fff",87,"2|006559ff",87,"3|45280eff",88,"0|224409",89,"0|bebebeff",90,"0|20",90,"1|5",90,"2|5",90,"3|5",90,"4|-0.001",91,"0|20",91,"1|5",91,"2|5",91,"3|5",91,"4|-0.001",92,"0|0",92,"1|0",92,"2|0",92,"3|0",92,"4|-0.001",93,"0|0.5",93,"1|0",93,"2|0",93,"3|0",93,"4|-0.001",94,"0|509845",94,"1|35058",94,"2|509844",94,"3|509839",95,"0|f",95,"1|c33641ff",95,"2|f",95,"3|ffffff00",96,"0|0",96,"1|0",96,"2|0",96,"3|0",96,"4|-0.001",97,"515685",98,"0|f0e6e6ff",98,"1|135658ff",99,"0|224409",100,"0|aba4a4ff",101,"0|8",101,"1|5",101,"2|5",101,"3|5",101,"4|-0.001",102,"0|8",102,"1|5",102,"2|5",102,"3|5",102,"4|-0.001",103,"0|0",103,"1|0",103,"2|0",103,"3|0",103,"4|-0.001",104,"0|0.5",104,"1|0",104,"2|0",104,"3|0",104,"4|-0.001",105,"0|515453",105,"1|227575",105,"2|22672",106,"0|ffbdc8ff",106,"1|b35050ff",106,"2|5c5c5cff",107,"0|0",107,"1|171.428",107,"2|0",107,"3|0",107,"4|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"515692",120,"0|f0e6e6ff",120,"1|df4066ff",120,"2|3d272cff",121,"0|224409",122,"0|aba4a4ff",123,"0|8",123,"1|5",123,"2|5",123,"3|5",123,"4|-0.001",124,"0|8",124,"1|5",124,"2|5",124,"3|5",124,"4|-0.001",125,"0|0",125,"1|0",125,"2|0",125,"3|0",125,"4|-0.001",126,"0|0.4",126,"1|0",126,"2|0",126,"3|0",126,"4|-0.001",127,"0|515463",127,"1|515464",127,"2|515465",128,"0|1fb8beff",128,"1|81f2ffff",128,"2|769fa5ff",129,"0|0",129,"1|0",129,"2|0",129,"3|0",129,"4|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"515679",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",192,"0|d42d3fff",192,"1|d4d4d4ff",192,"2|a25f21ff",192,"3|006559ff",194,"0|bebebeff",196,"0|f",196,"1|c33641ff",196,"2|f",196,"3|ffffff00",197,"0|0",197,"1|0",197,"2|0",197,"3|0",197,"4|-0.001",198,"0|1.856",198,"1|2.838",198,"2|2.236",198,"3|2",198,"4|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|20",205,"1|5",205,"2|5",205,"3|5",205,"4|-0.001",206,"0|20",206,"1|5",206,"2|5",206,"3|5",206,"4|-0.001",207,"0|0",207,"1|0",207,"2|0",207,"3|0",207,"4|-0.001",208,"0|0.5",208,"1|0",208,"2|0",208,"3|0",208,"4|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,228,"2|566636"],"version":1,"slotData":["12$516107$0,0,0|0,0,0|1,1,1"],"dynDecor":["","","566636","","","","",""]}`
        }, {
            npcId: `18B78C6D`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"522838",90,"0|-0.001",90,"1|-0.001",90,"2|-0.001",90,"3|-0.001",90,"4|-0.001",91,"0|-0.001",91,"1|-0.001",91,"2|-0.001",91,"3|-0.001",91,"4|-0.001",92,"0|-0.001",92,"1|-0.001",92,"2|-0.001",92,"3|-0.001",92,"4|-0.001",93,"0|-0.001",93,"1|-0.001",93,"2|-0.001",93,"3|-0.001",93,"4|-0.001",96,"0|-0.001",96,"1|-0.001",96,"2|-0.001",96,"3|-0.001",96,"4|-0.001",97,"522840",101,"0|-0.001",101,"1|-0.001",101,"2|-0.001",101,"3|-0.001",101,"4|-0.001",102,"0|-0.001",102,"1|-0.001",102,"2|-0.001",102,"3|-0.001",102,"4|-0.001",103,"0|-0.001",103,"1|-0.001",103,"2|-0.001",103,"3|-0.001",103,"4|-0.001",104,"0|-0.001",104,"1|-0.001",104,"2|-0.001",104,"3|-0.001",104,"4|-0.001",107,"0|-0.001",107,"1|-0.001",107,"2|-0.001",107,"3|-0.001",107,"4|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"522839",123,"0|-0.001",123,"1|-0.001",123,"2|-0.001",123,"3|-0.001",123,"4|-0.001",124,"0|-0.001",124,"1|-0.001",124,"2|-0.001",124,"3|-0.001",124,"4|-0.001",125,"0|-0.001",125,"1|-0.001",125,"2|-0.001",125,"3|-0.001",125,"4|-0.001",126,"0|-0.001",126,"1|-0.001",126,"2|-0.001",126,"3|-0.001",126,"4|-0.001",129,"0|-0.001",129,"1|-0.001",129,"2|-0.001",129,"3|-0.001",129,"4|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"522835",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",197,"0|-0.001",198,"0|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",206,"0|-0.001",207,"0|-0.001",208,"0|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0],"version":1,"slotData":["1$522123$0,-2.41,24.69|0,0,0|1,1,1","6$522094$-14.33,0,-1.46|0,-90,0|1,1,1","12$522674$0,0,-5|0,0,0|1,1,1","19$522742$0,0,0|0,0,0|1,1,1","23$523431$0,0,0.1|0,-90,0|1,1,1"],"dynDecor":["","","","","","","",""]}`
        }, {
            npcId: `0CAFBBB7`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"491314",87,"0|ffffff00",87,"1|2c0101ff",87,"2|652f11dd",87,"3|a70712ff",88,"0|47940",88,"1|224409",88,"2|270099",89,"0|f0f0f000",89,"1|090000ff",89,"2|3f2107ff",89,"3|a70712ff",90,"0|15",90,"1|10",90,"2|15",90,"3|5",90,"4|-0.001",91,"0|15",91,"1|10",91,"2|15",91,"3|5",91,"4|-0.001",92,"0|0",92,"1|0",92,"2|0",92,"3|0",92,"4|-0.001",93,"0|1",93,"1|0.12",93,"2|1",93,"3|0",93,"4|-0.001",94,"0|491206",94,"1|495155",94,"2|491205",94,"3|491201",95,"0|f",95,"1|f",95,"2|ecececff",95,"3|f",96,"0|0",96,"1|0",96,"2|0",96,"3|0",96,"4|-0.001",97,"491315",98,"0|450001ff",98,"1|823513ff",98,"2|000000dd",98,"3|a70712ff",99,"0|141677",100,"0|290001ff",100,"3|000000bf",101,"0|35",101,"1|5",101,"2|5",101,"3|5",101,"4|-0.001",102,"0|35",102,"1|5",102,"2|5",102,"3|5",102,"4|-0.001",103,"0|200",103,"1|0",103,"2|0",103,"3|0",103,"4|-0.001",104,"0|0.8",104,"1|0",104,"2|0",104,"3|0",104,"4|-0.001",105,"0|491208",105,"1|491210",105,"2|491202",106,"0|f",106,"1|f",106,"2|ecececff",106,"3|f",107,"0|0",107,"1|0",107,"2|0",107,"3|0",107,"4|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"491312",120,"0|450001ff",120,"2|000000dd",120,"3|a70712ff",121,"0|141677",122,"0|290001ff",122,"3|000000bf",123,"0|30",123,"1|5",123,"2|5",123,"3|5",123,"4|-0.001",124,"0|30",124,"1|5",124,"2|5",124,"3|5",124,"4|-0.001",125,"0|0",125,"1|0",125,"2|0",125,"3|0",125,"4|-0.001",126,"0|1",126,"1|0",126,"2|0",126,"3|0",126,"4|-0.001",127,"0|140238",128,"0|f",129,"0|122",129,"1|0",129,"2|0",129,"3|0",129,"4|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"491278",171,"050505ff",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",192,"0|340302ff",192,"1|f",195,"0|495155",196,"0|f",196,"2|f",197,"0|0",197,"1|0",197,"2|0",197,"3|0",197,"4|-0.001",198,"0|2.6",198,"1|1",198,"2|1",198,"3|1",198,"4|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|5",205,"1|5",205,"2|5",205,"3|5",205,"4|-0.001",206,"0|5",206,"1|5",206,"2|5",206,"3|5",206,"4|-0.001",207,"0|0",207,"1|0",207,"2|0",207,"3|0",207,"4|-0.001",208,"0|0",208,"1|0",208,"2|0",208,"3|0",208,"4|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0],"version":1,"slotData":["2$490998$4,1.8,-18|-13,90,43|1,1,1","10$491101$2.8,-17,-2.5|0,0,90|1,1,1","23$494016$0,0,0|0,-90,0|1,1,1"],"dynDecor":["","","","","","","",""]}`
        }, {
            npcId: `282DD9DB`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"493767",90,"0|-0.001",90,"1|-0.001",90,"2|-0.001",90,"3|-0.001",90,"4|-0.001",90,"5|-0.001",90,"6|-0.001",90,"7|-0.001",90,"8|-0.001",91,"0|-0.001",91,"1|-0.001",91,"2|-0.001",91,"3|-0.001",91,"4|-0.001",91,"5|-0.001",91,"6|-0.001",91,"7|-0.001",91,"8|-0.001",92,"0|-0.001",92,"1|-0.001",92,"2|-0.001",92,"3|-0.001",92,"4|-0.001",92,"5|-0.001",92,"6|-0.001",92,"7|-0.001",92,"8|-0.001",93,"0|-0.001",93,"1|-0.001",93,"2|-0.001",93,"3|-0.001",93,"4|-0.001",93,"5|-0.001",93,"6|-0.001",93,"7|-0.001",93,"8|-0.001",96,"0|-0.001",96,"1|-0.001",96,"2|-0.001",96,"3|-0.001",96,"4|-0.001",96,"5|-0.001",96,"6|-0.001",96,"7|-0.001",96,"8|-0.001",97,"493697",101,"0|-0.001",101,"1|-0.001",101,"2|-0.001",101,"3|-0.001",101,"4|-0.001",101,"5|-0.001",101,"6|-0.001",101,"7|-0.001",101,"8|-0.001",102,"0|-0.001",102,"1|-0.001",102,"2|-0.001",102,"3|-0.001",102,"4|-0.001",102,"5|-0.001",102,"6|-0.001",102,"7|-0.001",102,"8|-0.001",103,"0|-0.001",103,"1|-0.001",103,"2|-0.001",103,"3|-0.001",103,"4|-0.001",103,"5|-0.001",103,"6|-0.001",103,"7|-0.001",103,"8|-0.001",104,"0|-0.001",104,"1|-0.001",104,"2|-0.001",104,"3|-0.001",104,"4|-0.001",104,"5|-0.001",104,"6|-0.001",104,"7|-0.001",104,"8|-0.001",107,"0|-0.001",107,"1|-0.001",107,"2|-0.001",107,"3|-0.001",107,"4|-0.001",107,"5|-0.001",107,"6|-0.001",107,"7|-0.001",107,"8|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"493645",123,"0|-0.001",123,"1|-0.001",123,"2|-0.001",123,"3|-0.001",123,"4|-0.001",124,"0|-0.001",124,"1|-0.001",124,"2|-0.001",124,"3|-0.001",124,"4|-0.001",125,"0|-0.001",125,"1|-0.001",125,"2|-0.001",125,"3|-0.001",125,"4|-0.001",126,"0|-0.001",126,"1|-0.001",126,"2|-0.001",126,"3|-0.001",126,"4|-0.001",129,"0|-0.001",129,"1|-0.001",129,"2|-0.001",129,"3|-0.001",129,"4|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"493696",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",197,"0|-0.001",197,"1|-0.001",197,"2|-0.001",197,"3|-0.001",197,"4|-0.001",198,"0|-0.001",198,"1|-0.001",198,"2|-0.001",198,"3|-0.001",198,"4|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",205,"1|-0.001",205,"2|-0.001",205,"3|-0.001",205,"4|-0.001",206,"0|-0.001",206,"1|-0.001",206,"2|-0.001",206,"3|-0.001",206,"4|-0.001",207,"0|-0.001",207,"1|-0.001",207,"2|-0.001",207,"3|-0.001",207,"4|-0.001",208,"0|-0.001",208,"1|-0.001",208,"2|-0.001",208,"3|-0.001",208,"4|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0],"version":1,"slotData":["2$493632$2.62,9.34,-24.87|0,-90,0|1,1,1","19$493583$0,0,0|0,0,0|1,1,1"],"dynDecor":["","","","","","","",""]}`
        }, {
            npcId: `3BE37CB4`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"453998",87,"0|030303ff",87,"1|f",87,"2|404040ff",87,"4|6e6e6eff",88,"0|155210",88,"1|155210",88,"4|224409",89,"0|050505ff",89,"4|a6a6a6ff",90,"0|40",90,"1|40",90,"2|5",90,"3|5",90,"4|5",90,"5|5",90,"6|5",90,"7|5",90,"8|-0.001",91,"0|40",91,"1|40",91,"2|5",91,"3|5",91,"4|5",91,"5|5",91,"6|5",91,"7|5",91,"8|-0.001",92,"0|0",92,"1|0",92,"2|0",92,"3|0",92,"4|0",92,"5|0",92,"6|0",92,"7|0",92,"8|-0.001",93,"0|0.2",93,"1|0.2",93,"2|0",93,"3|0",93,"4|0.2",93,"5|0",93,"6|0",93,"7|0",93,"8|-0.001",94,"0|453906",94,"1|453908",94,"2|453909",94,"3|453912",94,"4|35058",94,"5|453911",94,"6|453911",95,"0|f",95,"2|ffffff00",95,"3|ffffff00",95,"5|f",95,"6|070707ff",95,"7|0",96,"0|0",96,"1|0",96,"2|0",96,"3|0",96,"4|0",96,"5|0",96,"6|0",96,"7|0",96,"8|-0.001",97,"453996",98,"0|241916cd",98,"1|ffffff00",98,"2|f",100,"0|090404ff",101,"0|5",101,"1|5",101,"2|5",101,"3|5",101,"4|-0.001",102,"0|5",102,"1|5",102,"2|5",102,"3|5",102,"4|-0.001",103,"0|0",103,"1|0",103,"2|0",103,"3|0",103,"4|-0.001",104,"0|0",104,"1|0",104,"2|0",104,"3|0",104,"4|-0.001",106,"0|f",106,"2|ffffff00",106,"3|0",107,"0|0",107,"1|0",107,"2|0",107,"3|0",107,"4|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"453997",120,"0|050505ff",120,"1|bababaff",120,"2|241916cd",120,"3|ffffff00",121,"0|32115",122,"0|ff1a1aff",122,"2|090404ff",123,"0|30",123,"1|5",123,"2|5",123,"3|5",123,"4|-0.001",124,"0|30",124,"1|5",124,"2|5",124,"3|5",124,"4|-0.001",125,"0|0",125,"1|0",125,"2|0",125,"3|0",125,"4|-0.001",126,"0|1",126,"1|0",126,"2|0",126,"3|0",126,"4|-0.001",127,"0|453888",127,"1|453889",128,"0|f",128,"1|4e4e4eff",128,"2|ffffff00",128,"3|0",129,"0|0",129,"1|0",129,"2|0",129,"3|0",129,"4|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|-0.001",157,"1|-0.001",157,"2|-0.001",158,"0|-0.001",158,"1|-0.001",158,"2|-0.001",161,"0|-0.001",161,"1|-0.001",161,"2|-0.001",162,"0|-0.001",162,"1|-0.001",162,"2|-0.001",163,"92726",166,1.5,169,"453968",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",192,"0|070707ff",192,"1|f",192,"2|424242ff",194,"0|ff1a1aff",196,"0|f",196,"2|ffffff00",196,"3|0",197,"0|0",197,"1|0",197,"2|0",197,"3|0",197,"4|-0.001",198,"0|1",198,"1|1",198,"2|1",198,"3|1",198,"4|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|30",205,"1|5",205,"2|5",205,"3|5",205,"4|-0.001",206,"0|30",206,"1|5",206,"2|5",206,"3|5",206,"4|-0.001",207,"0|0",207,"1|0",207,"2|0",207,"3|0",207,"4|-0.001",208,"0|0",208,"1|0",208,"2|0",208,"3|0",208,"4|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0],"version":1,"slotData":["1$453959$0.04,-0.95,12.97|0,0,0|1,1,1","6$453958$-5.7,0.07,-1.06|0.38,-88.99,-5.74|1,1,1","12$453934$0,0,0|0,0,0|1,1,1"],"dynDecor":["","","","","","","",""]}`
        }, {
            npcId: `34063511`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"517456",87,"4|f",90,"0|-0.001",90,"1|-0.001",90,"2|-0.001",90,"3|-0.001",90,"4|-0.001",90,"5|-0.001",90,"6|-0.001",90,"7|-0.001",90,"8|-0.001",91,"0|-0.001",91,"1|-0.001",91,"2|-0.001",91,"3|-0.001",91,"4|-0.001",91,"5|-0.001",91,"6|-0.001",91,"7|-0.001",91,"8|-0.001",92,"0|-0.001",92,"1|-0.001",92,"2|-0.001",92,"3|-0.001",92,"4|-0.001",92,"5|-0.001",92,"6|-0.001",92,"7|-0.001",92,"8|-0.001",93,"0|-0.001",93,"1|-0.001",93,"2|-0.001",93,"3|-0.001",93,"4|-0.001",93,"5|-0.001",93,"6|-0.001",93,"7|-0.001",93,"8|-0.001",96,"0|-0.001",96,"1|-0.001",96,"2|-0.001",96,"3|-0.001",96,"4|-0.001",96,"5|-0.001",96,"6|-0.001",96,"7|-0.001",96,"8|-0.001",97,"517395",98,"4|f",101,"0|-0.001",101,"1|-0.001",101,"2|-0.001",101,"3|-0.001",101,"4|-0.001",101,"5|-0.001",101,"6|-0.001",101,"7|-0.001",101,"8|-0.001",102,"0|-0.001",102,"1|-0.001",102,"2|-0.001",102,"3|-0.001",102,"4|-0.001",102,"5|-0.001",102,"6|-0.001",102,"7|-0.001",102,"8|-0.001",103,"0|-0.001",103,"1|-0.001",103,"2|-0.001",103,"3|-0.001",103,"4|-0.001",103,"5|-0.001",103,"6|-0.001",103,"7|-0.001",103,"8|-0.001",104,"0|-0.001",104,"1|-0.001",104,"2|-0.001",104,"3|-0.001",104,"4|-0.001",104,"5|-0.001",104,"6|-0.001",104,"7|-0.001",104,"8|-0.001",107,"0|-0.001",107,"1|-0.001",107,"2|-0.001",107,"3|-0.001",107,"4|-0.001",107,"5|-0.001",107,"6|-0.001",107,"7|-0.001",107,"8|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"517425",120,"0|f",123,"0|-0.001",123,"1|-0.001",123,"2|-0.001",123,"3|-0.001",123,"4|-0.001",123,"5|-0.001",123,"6|-0.001",123,"7|-0.001",123,"8|-0.001",124,"0|-0.001",124,"1|-0.001",124,"2|-0.001",124,"3|-0.001",124,"4|-0.001",124,"5|-0.001",124,"6|-0.001",124,"7|-0.001",124,"8|-0.001",125,"0|-0.001",125,"1|-0.001",125,"2|-0.001",125,"3|-0.001",125,"4|-0.001",125,"5|-0.001",125,"6|-0.001",125,"7|-0.001",125,"8|-0.001",126,"0|-0.001",126,"1|-0.001",126,"2|-0.001",126,"3|-0.001",126,"4|-0.001",126,"5|-0.001",126,"6|-0.001",126,"7|-0.001",126,"8|-0.001",129,"0|-0.001",129,"1|-0.001",129,"2|-0.001",129,"3|-0.001",129,"4|-0.001",129,"5|-0.001",129,"6|-0.001",129,"7|-0.001",129,"8|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"517457",170,"eb6e71ff",171,"899effff",172,0.571,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",192,"0|f",197,"0|-0.001",197,"1|-0.001",197,"2|-0.001",197,"3|-0.001",197,"4|-0.001",197,"5|-0.001",197,"6|-0.001",197,"7|-0.001",197,"8|-0.001",198,"0|-0.001",198,"1|-0.001",198,"2|-0.001",198,"3|-0.001",198,"4|-0.001",198,"5|-0.001",198,"6|-0.001",198,"7|-0.001",198,"8|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",205,"1|-0.001",205,"2|-0.001",205,"3|-0.001",205,"4|-0.001",205,"5|-0.001",205,"6|-0.001",205,"7|-0.001",205,"8|-0.001",206,"0|-0.001",206,"1|-0.001",206,"2|-0.001",206,"3|-0.001",206,"4|-0.001",206,"5|-0.001",206,"6|-0.001",206,"7|-0.001",206,"8|-0.001",207,"0|-0.001",207,"1|-0.001",207,"2|-0.001",207,"3|-0.001",207,"4|-0.001",207,"5|-0.001",207,"6|-0.001",207,"7|-0.001",207,"8|-0.001",208,"0|-0.001",208,"1|-0.001",208,"2|-0.001",208,"3|-0.001",208,"4|-0.001",208,"5|-0.001",208,"6|-0.001",208,"7|-0.001",208,"8|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,228,"0|569606",228,"2|570598",228,"6|571428"],"version":1,"dynDecor":["569606","","570598","","","","571428",""]}`
        }, {
            npcId: `34436787`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"557538",90,"0|-0.001",91,"0|-0.001",92,"0|-0.001",93,"0|-0.001",96,"0|-0.001",97,"557526",101,"0|-0.001",102,"0|-0.001",103,"0|-0.001",104,"0|-0.001",107,"0|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"557512",123,"0|-0.001",124,"0|-0.001",125,"0|-0.001",126,"0|-0.001",129,"0|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"557567",172,-0.001,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",197,"0|-0.001",198,"0|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",206,"0|-0.001",207,"0|-0.001",208,"0|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,228,"0|569606",228,"2|570598",228,"6|571428"],"version":1,"slotData":["12$557283$-17.49,-1.53,-129.02|0,90,0|1,1,1"],"dynDecor":["569606","","570598","","","","571428",""]}`
        }, {
            npcId: `11CB74A6`,
            shareId: `{"apiValue":[0,"76618",1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,1,52,1,53,1,54,0,56,0,58,0,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,"569437",90,"0|-0.001",91,"0|-0.001",92,"0|-0.001",93,"0|-0.001",96,"0|-0.001",97,"562437",101,"0|-0.001",102,"0|-0.001",103,"0|-0.001",104,"0|-0.001",107,"0|-0.001",108,"75663",112,"0|-0.001",113,"0|-0.001",114,"0|-0.001",115,"0|-0.001",118,"0|-0.001",119,"571247",123,"0|-0.001",124,"0|-0.001",125,"0|-0.001",126,"0|-0.001",129,"0|-0.001",130,"398608",131,"00000000",132,"398609",133,"398607",134,"00000000",135,"48041",136,"f",137,"48026",138,"ffeccd00",139,"32115",140,"5032b7ff",141,0.019,142,-0.009,143,0.466,145,"32115",146,"72171800",147,"32115",148,"9d141b00",149,"32115",150,"962d2d00",151,"0|32115",151,"1|32115",151,"2|32115",152,"0|0",152,"1|0",152,"2|0",153,"0|0",153,"1|0",153,"2|0",154,"0|0",154,"1|0",154,"2|0",155,"0|6",155,"1|6",155,"2|6",156,"ffd8d8ff",157,"0|0",157,"1|0",157,"2|0",158,"0|0",158,"1|0",158,"2|0",159,"0|32115",159,"1|32115",159,"2|32115",160,"0|f",160,"1|f",160,"2|f",161,"0|0",161,"1|0",161,"2|0",162,"0|10",162,"1|10",162,"2|10",163,"92726",166,1.5,169,"570494",170,"0e0e0eff",171,"f",172,1,175,2,176,"0|f",176,"1|f",176,"2|f",178,"f",179,"f",184,0,190,"0|-0.001",191,"0|-0.001",197,"0|-0.001",198,"0|-0.001",199,1,200,1,201,"0|-0.001",202,"0|-0.001",203,"0|-0.001",204,"0|-0.001",205,"0|-0.001",206,"0|-0.001",207,"0|-0.001",208,"0|-0.001",210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,228,"0|569606",228,"2|570598",228,"6|571428"],"version":1,"dynDecor":["569606","","570598","","","","571428",""]}`
        } ];
    }
    get getHUDModuleC() {
        if (this.hudModuleC == null) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getMallModuleC() {
        if (!this.mallModuleC) {
            this.mallModuleC = ModuleService.getModule(MallModuleC);
        }
        return this.mallModuleC;
    }
    get getRankModuleC() {
        if (!this.rankModuleC) {
            this.rankModuleC = ModuleService.getModule(RankModuleC);
        }
        return this.rankModuleC;
    }
    get getTryOnPanel() {
        if (this.tryOnPanel == null) {
            this.tryOnPanel = UIService.getUI(TryOnPanel);
        }
        return this.tryOnPanel;
    }
    get getMallTipsPanel() {
        if (!this.mallTipsPanel) {
            this.mallTipsPanel = UIService.getUI(MallTipsPanel);
        }
        return this.mallTipsPanel;
    }
    get getSharePanel() {
        if (!this.sharePanel) {
            this.sharePanel = UIService.getUI(SharePanel);
        }
        return this.sharePanel;
    }
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHUDModuleC.onOpenShareAction.add(this.onOpenShareActionHandler.bind(this));
        this.onCloseAction.add(this.addCloseTryOnPanelAction.bind(this));
        this.onTryOnAction.add(this.addTryOnAction.bind(this));
        this.onSaveAction.add(this.addSaveAction.bind(this));
        this.onOpenShareAction.add(this.addOpenShareAction.bind(this));
    }
    addOpenShareAction() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            this.getSharePanel.show();
            let sharedId = await Utils.createSharedId(this.localPlayer.character);
            this.getSharePanel.showPanel(sharedId, 1);
        }));
    }
    onOpenShareActionHandler() {
        console.error(`-------------${JSON.stringify(this.tryOnConfigData)}`);
        if (!this.tryOnConfigData || !this.tryOnConfigData.isOpenTryOn) {
            Notice.showDownNotice(GameConfig.Language.Text_SignIn_1.Value);
            return;
        }
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.getMallModuleC.isAccountServiceDownloadData();
            this.tryOnRoomData = null;
            await this.getMallModuleC.openTryOnPanel();
            let roomDatas = this.getRankModuleC.getRoomDatas();
            if (!roomDatas || roomDatas.length == 0) {
                Notice.showDownNotice(GameConfig.Language.Text_SignIn_1.Value);
                return;
            }
            let curRoomIndex = -1;
            for (let i = 0; i < roomDatas.length; ++i) {
                if (roomDatas[i].userId != this.localPlayer.userId) continue;
                curRoomIndex = i;
                break;
            }
            this.getTryOnPanel.refreshTryOnPanel(roomDatas, curRoomIndex);
            this.getMallModuleC.onSwitchCameraAction.call(2);
        }));
    }
    refreshTryOnPanel(roomDatas) {
        if (!UIService.getUI(TryOnPanel, false)?.visible) return;
        if (!roomDatas || roomDatas.length == 0) return;
        let curRoomIndex = -1;
        for (let i = 0; i < roomDatas.length; ++i) {
            if (roomDatas[i].userId != this.localPlayer.userId) continue;
            curRoomIndex = i;
            break;
        }
        this.getTryOnPanel.refreshTryOnPanel(roomDatas, curRoomIndex, false);
    }
    addCloseTryOnPanelAction() {
        if (this.isNeedSaveCharacter) {
            this.getMallTipsPanel.showTips((() => {
                this.onSaveAction.call();
            }), (() => {
                this.resetCharacterDescription();
            }), GameConfig.Language.Text_CloseTips.Value, GameConfig.Language.Text_WhetherSaveImage.Value, GameConfig.Language.Text_NoSave.Value, GameConfig.Language.Text_Save.Value);
        } else {
            this.getTryOnPanel.hide();
            this.getMallModuleC.onSwitchCameraAction.call(0);
        }
    }
    addTryOnAction(roomData) {
        if (!roomData || !roomData?.userId || roomData.userId == "") {
            Notice.showDownNotice(GameConfig.Language.Text_TryOnTips6.Value);
            Notice.showDownNotice(GameConfig.Language.Text_TryOnTips7.Value);
            return;
        }
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            if (roomData.userId == this.localPlayer.userId) {
                this.localPlayer.character.setDescription(this.getMallModuleC.getCopyNpc.getDescription());
            } else {
                let isTryOn = await this.server.net_isTryOnPermission(roomData.userId);
                if (!isTryOn) {
                    Notice.showDownNotice(GameConfig.Language.Text_TryOnTips12.Value);
                    return;
                }
                await TimeUtil.delaySecond(1);
                let player = await Player.asyncGetPlayer(roomData.userId);
                if (!player || !player.character) {
                    Notice.showDownNotice(GameConfig.Language.Text_TryOnTips6.Value);
                    Notice.showDownNotice(GameConfig.Language.Text_TryOnTips7.Value);
                    return;
                }
                await player.character.asyncReady();
                if (player.character.description.advance.base.characterSetting.somatotype == mw.SomatotypeV2.None) {
                    Notice.showDownNotice(GameConfig.Language.Text_TryOnTips8.Value);
                    return;
                }
                this.localPlayer.character.detachAllFromSlot({
                    isDestroy: true
                });
                await this.localPlayer.character.asyncReady();
                this.localPlayer.character.setDescription(player.character.getDescription());
                await this.server.net_tryOnSlotByUserId(roomData.userId);
                this.isNeedSaveCharacter = true;
            }
            this.tryOnRoomData = roomData;
            await this.localPlayer.character.asyncReady();
            await TimeUtil.delaySecond(1);
            this.getMallModuleC.onSwitchCameraAction.call(2);
            Notice.showDownNotice(GameConfig.Language.Text_TryItOnSuccessfully.Value);
        }));
    }
    resetCharacterDescription() {
        this.isNeedSaveCharacter = false;
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            let copyNpc = this.getMallModuleC.getCopyNpc;
            await copyNpc.asyncReady();
            this.localPlayer.character.setDescription(copyNpc.getDescription());
            await this.localPlayer.character.asyncReady();
        }));
        this.getTryOnPanel.hide();
        this.getMallModuleC.onSwitchCameraAction.call(0);
    }
    addSaveAction() {
        this.isNeedSaveCharacter = false;
        console.error(`-------------${JSON.stringify(this.tryOnConfigData)}`);
        if (this.tryOnConfigData && this.tryOnConfigData.isOpenAvatarEditor) {
            this.openAvatarEditor();
        } else {
            this.getTryOnPanel.hide();
            this.getMallModuleC.onSwitchCameraAction.call(0);
            this.saveCharacter();
        }
    }
    openAvatarEditor() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            let buyCharacterDescription = this.localPlayer.character.getDescription();
            let copyNpc = this.getMallModuleC.getCopyNpc;
            await copyNpc.asyncReady();
            this.localPlayer.character.setDescription(copyNpc.getDescription());
            await this.localPlayer.character.asyncReady();
            this.getTryOnPanel.hide();
            this.getMallModuleC.onSwitchCameraAction.call(0);
            await TimeUtil.delaySecond(1);
            await AvatarEditorService.asyncOpenAvatarEditorModule();
            await TimeUtil.delaySecond(1);
            this.localPlayer.character.setDescription(buyCharacterDescription);
            await this.localPlayer.character.asyncReady();
            if (!this.tryOnRoomData || !this.tryOnRoomData?.userId || this.tryOnRoomData.userId == "") return;
            this.server.net_addTryOn(this.tryOnRoomData.userId);
        }));
    }
    saveCharacter() {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            this.localPlayer.character.syncDescription();
            Notice.showDownNotice(GameConfig.Language.Text_SaveSuccessfully.Value);
            await this.getMallModuleC.syncTryOnCharacter();
            if (!this.tryOnRoomData || !this.tryOnRoomData?.userId || this.tryOnRoomData.userId == "") return;
            this.server.net_addTryOn(this.tryOnRoomData.userId);
        }));
    }
    addRoatation(dir) {
        if (!this.localPlayer || !this.localPlayer?.character || !this.localPlayer.character?.worldTransform) return;
        this.localPlayer.character.worldTransform.rotation = this.localPlayer.character.worldTransform.rotation.add(new mw.Rotation(0, 0, -(this.mallCharacterRotSpeed * dir)));
    }
    net_tryOnSlotByUserId(userId) {
        let slotDataArrStr = Mall.getSlotDataArrStr(this.localPlayer.character);
        console.error(JSON.stringify(slotDataArrStr));
        if (!slotDataArrStr || slotDataArrStr.length == 0) return;
        this.server.net_canTryOnSlotByUserId(userId, slotDataArrStr);
    }
    net_canTryOnSlotByUserId(slotDataArrStr) {
        ExecutorManager.instance.pushAsyncExecutor((async () => {
            await this.localPlayer.character.asyncReady();
            await Mall.setSlotByDataArrStr(this.localPlayer.character, slotDataArrStr);
            Notice.showDownNotice(GameConfig.Language.Text_TryItOnSuccessfully.Value);
        }));
    }
    net_syncTryOnConfigData(tryOnConfigData) {
        this.tryOnConfigData = tryOnConfigData;
        TimeUtil.delaySecond(10).then((() => {
            this.initNpc();
        }));
    }
    initNpc() {
        if (!this.tryOnConfigData.isInitNpc && !mw.SystemUtil.isPIE) return;
        let i = 0;
        this.npcIds.forEach(((value, index) => {
            mw.GameObject.asyncFindGameObjectById(value.npcId).then((async npc => {
                await TimeUtil.delaySecond(i++);
                AvatarApi.setDescriptionByApiData2(npc, JSON.parse(value.shareId));
            }));
        }));
    }
}

class TryOnModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.rankModuleS = null;
        this.isContinueInitTryOnData = true;
        this.tryOnConfigData = null;
    }
    get getRankModuleS() {
        if (this.rankModuleS == null) {
            this.rankModuleS = ModuleService.getModule(RankModuleS);
        }
        return this.rankModuleS;
    }
    onStart() {}
    onPlayerEnterGame(player) {
        this.syncTryOnConfigData(player);
    }
    async syncTryOnConfigData(player) {
        if (this.isContinueInitTryOnData) {
            this.isContinueInitTryOnData = false;
            await this.initTryOnConfigData();
            TimeUtil.delaySecond(5).then((() => {
                this.isContinueInitTryOnData = true;
            }));
        }
        this.getClient(player).net_syncTryOnConfigData(this.tryOnConfigData);
    }
    async initTryOnConfigData() {
        let data = await Utils.getCustomdata("TryOnConfigData");
        this.tryOnConfigData = new TryOnConfigData(data);
    }
    net_addTryOn(userId) {
        let tryOnData = DataCenterS.getData(userId, TryOnData);
        if (!tryOnData) return;
        tryOnData.setTryOn(1);
        this.getRankModuleS.refreshTryOn(userId, tryOnData.tryOn);
    }
    async net_tryOnSlotByUserId(userId) {
        let currentUserId = this.currentPlayer.userId;
        let player = await Player.asyncGetPlayer(userId);
        if (!player || !player.character) return false;
        this.getClient(player).net_tryOnSlotByUserId(currentUserId);
        return true;
    }
    async net_canTryOnSlotByUserId(userId, slotDataArrStr) {
        let player = await Player.asyncGetPlayer(userId);
        if (!player || !player.character) return;
        this.getClient(player).net_canTryOnSlotByUserId(slotDataArrStr);
    }
    net_isTryOnPermission(userId) {
        return DataCenterS.getData(userId, SetData)?.isTryOn;
    }
}

__decorate([ Decorator.noReply() ], TryOnModuleS.prototype, "net_addTryOn", null);

__decorate([ Decorator.noReply() ], TryOnModuleS.prototype, "net_canTryOnSlotByUserId", null);

class TryOnData extends Subdata {
    constructor() {
        super(...arguments);
        this.tryOn = 0;
    }
    setTryOn(addTryOn) {
        this.tryOn += addTryOn;
        this.save(false);
    }
    get getTryOn() {
        return this.tryOn;
    }
}

__decorate([ Decorator.persistence() ], TryOnData.prototype, "tryOn", void 0);

class TryOnConfigData {
    constructor(data) {
        this.isOpenTryOn = false;
        this.isInitNpc = false;
        this.isOpenAvatarEditor = false;
        if (!data) return;
        this.isOpenTryOn = data?.isOpenTryOn;
        this.isInitNpc = data?.isInitNpc;
        this.isOpenAvatarEditor = data?.isOpenAvatarEditor;
    }
}

var foreign136 = Object.freeze({
    __proto__: null,
    TryOnConfigData: TryOnConfigData,
    TryOnData: TryOnData,
    TryOnItem: TryOnItem,
    TryOnModuleC: TryOnModuleC,
    TryOnModuleS: TryOnModuleS,
    TryOnPanel: TryOnPanel
});

let RankPanel_Generate = class RankPanel_Generate extends UIScript {
    get mOpenRoomRankImage() {
        if (!this.mOpenRoomRankImage_Internal && this.uiWidgetBase) {
            this.mOpenRoomRankImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenRoomRankImage");
        }
        return this.mOpenRoomRankImage_Internal;
    }
    get mOpenRoomRankButton() {
        if (!this.mOpenRoomRankButton_Internal && this.uiWidgetBase) {
            this.mOpenRoomRankButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mOpenRoomRankImage/mOpenRoomRankButton");
        }
        return this.mOpenRoomRankButton_Internal;
    }
    get mRoomCanvas() {
        if (!this.mRoomCanvas_Internal && this.uiWidgetBase) {
            this.mRoomCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas");
        }
        return this.mRoomCanvas_Internal;
    }
    get mCloseRoomButton() {
        if (!this.mCloseRoomButton_Internal && this.uiWidgetBase) {
            this.mCloseRoomButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/mCloseRoomButton");
        }
        return this.mCloseRoomButton_Internal;
    }
    get mRoomRankTextBlock() {
        if (!this.mRoomRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/TitleRoomCanvas/mRoomRankTextBlock");
        }
        return this.mRoomRankTextBlock_Internal;
    }
    get mRoomNameTextBlock() {
        if (!this.mRoomNameTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/TitleRoomCanvas/mRoomNameTextBlock");
        }
        return this.mRoomNameTextBlock_Internal;
    }
    get mRoomScoreTextBlock() {
        if (!this.mRoomScoreTextBlock_Internal && this.uiWidgetBase) {
            this.mRoomScoreTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/TitleRoomCanvas/mRoomScoreTextBlock");
        }
        return this.mRoomScoreTextBlock_Internal;
    }
    get mRoomScrollBox() {
        if (!this.mRoomScrollBox_Internal && this.uiWidgetBase) {
            this.mRoomScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/mRoomScrollBox");
        }
        return this.mRoomScrollBox_Internal;
    }
    get mRoomContentCanvas() {
        if (!this.mRoomContentCanvas_Internal && this.uiWidgetBase) {
            this.mRoomContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mRoomCanvas/mRoomScrollBox/mRoomContentCanvas");
        }
        return this.mRoomContentCanvas_Internal;
    }
    get mWorldCanvas() {
        if (!this.mWorldCanvas_Internal && this.uiWidgetBase) {
            this.mWorldCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas");
        }
        return this.mWorldCanvas_Internal;
    }
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/MainWorldCanvas/TitleWorldCanvas/mTitleTextBlock");
        }
        return this.mTitleTextBlock_Internal;
    }
    get mWorldRankTextBlock() {
        if (!this.mWorldRankTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/WorldCanvas/mWorldRankTextBlock");
        }
        return this.mWorldRankTextBlock_Internal;
    }
    get mWorldNameTextBlock() {
        if (!this.mWorldNameTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/WorldCanvas/mWorldNameTextBlock");
        }
        return this.mWorldNameTextBlock_Internal;
    }
    get mWorldTimeTextBlock() {
        if (!this.mWorldTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mWorldTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/WorldCanvas/mWorldTimeTextBlock");
        }
        return this.mWorldTimeTextBlock_Internal;
    }
    get mWorldContentCanvas() {
        if (!this.mWorldContentCanvas_Internal && this.uiWidgetBase) {
            this.mWorldContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/ScrollBox/mWorldContentCanvas");
        }
        return this.mWorldContentCanvas_Internal;
    }
    get mSelfWorldCanvas() {
        if (!this.mSelfWorldCanvas_Internal && this.uiWidgetBase) {
            this.mSelfWorldCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/mSelfWorldCanvas");
        }
        return this.mSelfWorldCanvas_Internal;
    }
    get mSelfWorldRankTextBlock() {
        if (!this.mSelfWorldRankTextBlock_Internal && this.uiWidgetBase) {
            this.mSelfWorldRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/mSelfWorldCanvas/mSelfWorldRankTextBlock");
        }
        return this.mSelfWorldRankTextBlock_Internal;
    }
    get mSelfWorldNameTextBlock() {
        if (!this.mSelfWorldNameTextBlock_Internal && this.uiWidgetBase) {
            this.mSelfWorldNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/mSelfWorldCanvas/mSelfWorldNameTextBlock");
        }
        return this.mSelfWorldNameTextBlock_Internal;
    }
    get mSelfWorldTimeTextBlock() {
        if (!this.mSelfWorldTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mSelfWorldTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mWorldCanvas/mSelfWorldCanvas/mSelfWorldTimeTextBlock");
        }
        return this.mSelfWorldTimeTextBlock_Internal;
    }
    get mCloseWorldButton() {
        if (!this.mCloseWorldButton_Internal && this.uiWidgetBase) {
            this.mCloseWorldButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCloseWorldButton");
        }
        return this.mCloseWorldButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mOpenRoomRankButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mOpenRoomRankButton");
        }));
        this.initLanguage(this.mOpenRoomRankButton);
        this.mOpenRoomRankButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseRoomButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseRoomButton");
        }));
        this.mCloseRoomButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.mCloseWorldButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseWorldButton");
        }));
        this.mCloseWorldButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mRoomRankTextBlock);
        this.initLanguage(this.mRoomNameTextBlock);
        this.initLanguage(this.mRoomScoreTextBlock);
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mWorldRankTextBlock);
        this.initLanguage(this.mWorldNameTextBlock);
        this.initLanguage(this.mWorldTimeTextBlock);
        this.initLanguage(this.mSelfWorldRankTextBlock);
        this.initLanguage(this.mSelfWorldNameTextBlock);
        this.initLanguage(this.mSelfWorldTimeTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

RankPanel_Generate = __decorate([ UIBind("UI/module/RankModule/RankPanel.ui") ], RankPanel_Generate);

var RankPanel_Generate$1 = RankPanel_Generate;

var foreign182 = Object.freeze({
    __proto__: null,
    default: RankPanel_Generate$1
});

let RoomItem_Generate = class RoomItem_Generate extends UIScript {
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mRankTextBlock");
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mNameTextBlock");
        }
        return this.mNameTextBlock_Internal;
    }
    get mKillCountTextBlock() {
        if (!this.mKillCountTextBlock_Internal && this.uiWidgetBase) {
            this.mKillCountTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mKillCountTextBlock");
        }
        return this.mKillCountTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mKillCountTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

RoomItem_Generate = __decorate([ UIBind("UI/module/RankModule/RoomItem.ui") ], RoomItem_Generate);

var RoomItem_Generate$1 = RoomItem_Generate;

var foreign183 = Object.freeze({
    __proto__: null,
    default: RoomItem_Generate$1
});

class RoomItem extends RoomItem_Generate$1 {
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
    }
    setData(ranking, roomData, isSelf) {
        this.mRankTextBlock.text = ranking.toString();
        this.mNameTextBlock.text = roomData.playerName;
        this.mKillCountTextBlock.text = roomData.score.toString();
        let fontColor = isSelf ? mw.LinearColor.green : mw.LinearColor.white;
        this.mRankTextBlock.fontColor = fontColor;
        this.mNameTextBlock.fontColor = fontColor;
        this.mKillCountTextBlock.fontColor = fontColor;
    }
}

var foreign127 = Object.freeze({
    __proto__: null,
    default: RoomItem
});

let WorldItem_Generate = class WorldItem_Generate extends UIScript {
    get mRankTextBlock() {
        if (!this.mRankTextBlock_Internal && this.uiWidgetBase) {
            this.mRankTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mRankTextBlock");
        }
        return this.mRankTextBlock_Internal;
    }
    get mNameTextBlock() {
        if (!this.mNameTextBlock_Internal && this.uiWidgetBase) {
            this.mNameTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mNameTextBlock");
        }
        return this.mNameTextBlock_Internal;
    }
    get mTimeTextBlock() {
        if (!this.mTimeTextBlock_Internal && this.uiWidgetBase) {
            this.mTimeTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/Canvas/mTimeTextBlock");
        }
        return this.mTimeTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.mRankTextBlock);
        this.initLanguage(this.mNameTextBlock);
        this.initLanguage(this.mTimeTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

WorldItem_Generate = __decorate([ UIBind("UI/module/RankModule/WorldItem.ui") ], WorldItem_Generate);

var WorldItem_Generate$1 = WorldItem_Generate;

var foreign184 = Object.freeze({
    __proto__: null,
    default: WorldItem_Generate$1
});

class WorldItem extends WorldItem_Generate$1 {
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
    }
    setData(ranking, roomData, isSelf) {
        this.mRankTextBlock.text = ranking.toString();
        this.mNameTextBlock.text = roomData.playerName;
        this.mTimeTextBlock.text = roomData.time.toString();
        let fontColor = isSelf ? mw.LinearColor.green : mw.LinearColor.white;
        this.mRankTextBlock.fontColor = fontColor;
        this.mNameTextBlock.fontColor = fontColor;
        this.mTimeTextBlock.fontColor = fontColor;
    }
}

var foreign128 = Object.freeze({
    __proto__: null,
    default: WorldItem
});

class RankPanel extends RankPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.rankModuleC = null;
        this.roomItems = [];
        this.worldItems = [];
    }
    get getRankModuleC() {
        if (!this.rankModuleC) {
            this.rankModuleC = ModuleService.getModule(RankModuleC);
        }
        return this.rankModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerTop;
        this.initUI();
        this.bindButton();
    }
    bindButton() {
        this.mOpenRoomRankButton.onClicked.add(this.bindOpenRoomRankButton.bind(this));
        this.mCloseRoomButton.onClicked.add(this.bindCloseRoomButton.bind(this));
        this.mCloseWorldButton.onClicked.add(this.bindCloseWorldButton.bind(this));
        this.getRankModuleC.onOpenWorldRankAction.add(this.addOpenWorldRankAction.bind(this));
    }
    initUI() {
        this.mRoomRankTextBlock.text = GameConfig.Language.Text_Ranking.Value;
        this.mRoomNameTextBlock.text = GameConfig.Language.Text_Nickname.Value;
        this.mRoomScoreTextBlock.text = GameConfig.Language.Text_Score.Value;
        this.mTitleTextBlock.text = StringUtil.format(GameConfig.Language.Text_TopInTermsOfDuration.Value, GlobalData.worldCount);
        this.mWorldRankTextBlock.text = GameConfig.Language.Text_Ranking.Value;
        this.mWorldNameTextBlock.text = GameConfig.Language.Text_Nickname.Value;
        this.mWorldTimeTextBlock.text = GameConfig.Language.Text_Duration.Value;
        Utils.setWidgetVisibility(this.mOpenRoomRankImage, mw.SlateVisibility.SelfHitTestInvisible);
        Utils.setWidgetVisibility(this.mRoomCanvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mCloseWorldButton, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mWorldCanvas, mw.SlateVisibility.Collapsed);
        if (GlobalData.languageId == 0) {
            this.mRoomRankTextBlock.fontSize = 15;
            this.mRoomNameTextBlock.fontSize = 15;
            this.mRoomScoreTextBlock.fontSize = 15;
            this.mWorldRankTextBlock.fontSize = 15;
            this.mWorldNameTextBlock.fontSize = 15;
            this.mWorldTimeTextBlock.fontSize = 15;
        }
    }
    bindOpenRoomRankButton() {
        if (!this.roomItems || this.roomItems?.length == 0) {
            Notice.showDownNotice(GameConfig.Language.Text_Rank1.Value);
            return;
        }
        Utils.setWidgetVisibility(this.mOpenRoomRankImage, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mRoomCanvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    bindCloseRoomButton() {
        Utils.setWidgetVisibility(this.mRoomCanvas, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mOpenRoomRankImage, mw.SlateVisibility.SelfHitTestInvisible);
    }
    addOpenWorldRankAction() {
        Utils.setWidgetVisibility(this.mCloseWorldButton, mw.SlateVisibility.Visible);
        Utils.setWidgetVisibility(this.mWorldCanvas, mw.SlateVisibility.SelfHitTestInvisible);
    }
    bindCloseWorldButton() {
        Utils.setWidgetVisibility(this.mCloseWorldButton, mw.SlateVisibility.Collapsed);
        Utils.setWidgetVisibility(this.mWorldCanvas, mw.SlateVisibility.Collapsed);
    }
    refreshRankPanel_RoomWorld(roomDatas, curRoomIndex, worldDatas, curWorldIndex) {
        if (roomDatas && roomDatas?.length > 0) {
            this.refreshRoomRankPanel(roomDatas, curRoomIndex);
            Utils.setWidgetVisibility(this.mOpenRoomRankImage, mw.SlateVisibility.Collapsed);
            Utils.setWidgetVisibility(this.mRoomCanvas, mw.SlateVisibility.SelfHitTestInvisible);
        }
        if (worldDatas && worldDatas?.length > 0) this.refreshWorldRankPanel(worldDatas, curWorldIndex);
    }
    refreshRankPanel_Room(roomDatas, curRoomIndex) {
        if (roomDatas && roomDatas?.length > 0) this.refreshRoomRankPanel(roomDatas, curRoomIndex);
    }
    refreshRoomRankPanel(roomDatas, curRoomIndex) {
        if (roomDatas.length > this.roomItems.length) {
            for (let i = 0; i < this.roomItems.length; ++i) {
                this.roomItems[i].setData(i + 1, roomDatas[i], i == curRoomIndex);
                Utils.setWidgetVisibility(this.roomItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.roomItems.length; i < roomDatas.length; ++i) {
                let redItem = UIService.create(RoomItem);
                redItem.setData(i + 1, roomDatas[i], i == curRoomIndex);
                this.mRoomContentCanvas.addChild(redItem.uiObject);
                this.roomItems.push(redItem);
            }
        } else {
            for (let i = 0; i < roomDatas.length; ++i) {
                this.roomItems[i].setData(i + 1, roomDatas[i], i == curRoomIndex);
                Utils.setWidgetVisibility(this.roomItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = roomDatas.length; i < this.roomItems.length; ++i) {
                Utils.setWidgetVisibility(this.roomItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    refreshRankPanel_World(worldDatas, curWorldIndex) {
        if (worldDatas && worldDatas?.length > 0) this.refreshWorldRankPanel(worldDatas, curWorldIndex);
    }
    refreshWorldRankPanel(worldDatas, curWorldIndex) {
        if (worldDatas.length > this.worldItems.length) {
            for (let i = 0; i < this.worldItems.length; ++i) {
                this.worldItems[i].setData(i + 1, worldDatas[i], i == curWorldIndex);
                Utils.setWidgetVisibility(this.worldItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = this.worldItems.length; i < worldDatas.length; ++i) {
                let worldItem = UIService.create(WorldItem);
                worldItem.setData(i + 1, worldDatas[i], i == curWorldIndex);
                this.mWorldContentCanvas.addChild(worldItem.uiObject);
                this.worldItems.push(worldItem);
            }
        } else {
            for (let i = 0; i < worldDatas.length; ++i) {
                this.worldItems[i].setData(i + 1, worldDatas[i], i == curWorldIndex);
                Utils.setWidgetVisibility(this.worldItems[i].uiObject, mw.SlateVisibility.SelfHitTestInvisible);
            }
            for (let i = worldDatas.length; i < this.worldItems.length; ++i) {
                Utils.setWidgetVisibility(this.worldItems[i].uiObject, mw.SlateVisibility.Collapsed);
            }
        }
    }
    refreshSelfWorldNameAndTimeUI(roomData) {
        this.mSelfWorldNameTextBlock.text = roomData.playerName;
        this.mSelfWorldTimeTextBlock.text = roomData.time.toString();
    }
    refreshSelfWorldRankUI(ranking) {
        if (ranking == -1) {
            this.mSelfWorldRankTextBlock.text = GameConfig.Language.Text_NoOnTheList.Value;
        } else {
            this.mSelfWorldRankTextBlock.text = (ranking + 1).toString();
        }
    }
}

var foreign126 = Object.freeze({
    __proto__: null,
    default: RankPanel
});

class RankModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.rankPanel = null;
        this.userId = null;
        this.interactionData = null;
        this.tryOnModuleC = null;
        this.tryOnData = null;
        this.onOpenWorldRankAction = new Action;
        this.roomDatas = [];
        this.recycleRoomDatas = [];
        this.curRoomIndex = -1;
        this.worldDatas = [];
        this.recycleWorldDatas = [];
        this.curWorldIndex = -1;
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getRankPanel() {
        if (!this.rankPanel) {
            this.rankPanel = UIService.getUI(RankPanel);
        }
        return this.rankPanel;
    }
    get currentUserId() {
        if (this.userId == "" || this.userId == null) {
            this.userId = this.localPlayer.userId;
        }
        return this.userId;
    }
    get getInteractionData() {
        if (this.interactionData == null) {
            this.interactionData = DataCenterC.getData(InteractionData);
        }
        return this.interactionData;
    }
    get getTryOnModuleC() {
        if (this.tryOnModuleC == null) {
            this.tryOnModuleC = ModuleService.getModule(TryOnModuleC);
        }
        return this.tryOnModuleC;
    }
    get getTryOnData() {
        if (this.tryOnData == null) {
            this.tryOnData = DataCenterC.getData(TryOnData);
        }
        return this.tryOnData;
    }
    onStart() {
        this.initEventAction();
    }
    initEventAction() {
        this.getHUDModuleC.onOpenRankAction.add(this.addOnOffRankPanelAction.bind(this));
        Event.addLocalListener(EventType.OnOffMainUI, this.addOnOffMainUI.bind(this));
        let score = 0;
        InputUtil.onKeyDown(mw.Keys.L, (() => {
            score++;
            this.server.net_refreshScore(score);
        }));
    }
    addOnOffRankPanelAction() {
        this.onOpenWorldRankAction.call();
    }
    addOnOffMainUI(isShow) {
        console.error(`isShow: ${isShow}`);
        if (isShow) {
            this.getRankPanel.show();
        } else {
            this.getRankPanel.hide();
        }
    }
    onEnterScene(sceneType) {
        this.getRankPanel.show();
        TimeUtil.delaySecond(5).then((() => {
            let nickName = mw.AccountService.getNickName();
            nickName = nickName ? nickName : "UserId：" + this.currentUserId;
            let bagIds = this.getInteractionData?.bagIds;
            let score = !bagIds ? 0 : bagIds.length;
            let time = this.data?.time;
            if (!time && time != 0) time = 0;
            let tryon = this.getTryOnData?.tryOn;
            if (!tryon && tryon != 0) tryon = 0;
            this.server.net_onEnterScene(nickName, score, time, tryon);
        }));
    }
    updateRoomDatas(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn) {
        if (this.roomDatas.length > roomUserIds.length) {
            for (let i = 0; i < roomUserIds.length; ++i) {
                this.roomDatas[i].setData(roomUserIds[i], roomNames[i], roomScores[i], roomTimes[i], roomTryOn[i]);
            }
            for (let i = roomUserIds.length; i < this.roomDatas.length; ++i) {
                this.recycleRoomDatas.push(this.roomDatas[i]);
            }
            this.roomDatas.length = roomUserIds.length;
        } else {
            for (let i = 0; i < this.roomDatas.length; ++i) {
                this.roomDatas[i].setData(roomUserIds[i], roomNames[i], roomScores[i], roomTimes[i], roomTryOn[i]);
            }
            for (let i = this.roomDatas.length; i < roomUserIds.length; ++i) {
                let tmpRoomData = null;
                if (this.recycleRoomDatas.length > 0) tmpRoomData = this.recycleRoomDatas.pop();
                if (!tmpRoomData) tmpRoomData = new RoomData(roomUserIds[i], roomNames[i], roomScores[i], roomTimes[i], roomTryOn[i]);
                this.roomDatas.push(tmpRoomData);
            }
        }
    }
    updateRoomIndex() {
        this.curRoomIndex = -1;
        for (let i = 0; i < this.roomDatas.length; ++i) {
            if (this.roomDatas[i].userId != this.currentUserId) continue;
            this.curRoomIndex = i;
            this.getRankPanel.refreshSelfWorldNameAndTimeUI(this.roomDatas[i]);
            break;
        }
    }
    updateWorldDatas(worldUserIds, worldNames, worldScores) {
        if (this.worldDatas.length > worldUserIds.length) {
            for (let i = 0; i < worldUserIds.length; ++i) {
                this.worldDatas[i].setData(worldUserIds[i], worldNames[i], worldScores[i]);
            }
            for (let i = worldUserIds.length; i < this.worldDatas.length; ++i) {
                this.recycleWorldDatas.push(this.worldDatas[i]);
            }
            this.worldDatas.length = worldUserIds.length;
        } else {
            for (let i = 0; i < this.worldDatas.length; ++i) {
                this.worldDatas[i].setData(worldUserIds[i], worldNames[i], worldScores[i]);
            }
            for (let i = this.worldDatas.length; i < worldUserIds.length; ++i) {
                let tmpWorldData = null;
                if (this.recycleWorldDatas.length > 0) tmpWorldData = this.recycleWorldDatas.pop();
                if (tmpWorldData) {
                    tmpWorldData.setData(worldUserIds[i], worldNames[i], worldScores[i]);
                } else {
                    tmpWorldData = new WorldData(worldUserIds[i], worldNames[i], worldScores[i]);
                }
                this.worldDatas.push(tmpWorldData);
            }
        }
    }
    updateWorldIndex() {
        this.curWorldIndex = -1;
        for (let i = 0; i < this.worldDatas.length; ++i) {
            if (this.worldDatas[i].userId != this.currentUserId) continue;
            this.curWorldIndex = i;
            break;
        }
        this.getRankPanel.refreshSelfWorldRankUI(this.curWorldIndex);
    }
    net_syncRoomRankData(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn) {
        this.updateRoomDatas(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn);
        this.sortRoomData();
        this.updateRoomIndex();
        this.getRankPanel.refreshRankPanel_Room(this.roomDatas, this.curRoomIndex);
        this.getTryOnModuleC.refreshTryOnPanel(this.getRoomDatas());
    }
    net_syncRoomRankData_TryOn(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn) {
        this.updateRoomDatas(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn);
        this.getTryOnModuleC.refreshTryOnPanel(this.getRoomDatas());
    }
    net_syncWorldRankData(worldUserIds, worldNames, worldScores) {
        this.updateWorldDatas(worldUserIds, worldNames, worldScores);
        this.updateWorldIndex();
        this.getRankPanel.refreshRankPanel_World(this.worldDatas, this.curWorldIndex);
    }
    net_syncRoomWorldRankData(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn, worldUserIds, worldNames, worldScores) {
        this.updateRoomDatas(roomUserIds, roomNames, roomScores, roomTimes, roomTryOn);
        this.sortRoomData();
        this.updateRoomIndex();
        this.updateWorldDatas(worldUserIds, worldNames, worldScores);
        this.updateWorldIndex();
        this.getRankPanel.refreshRankPanel_RoomWorld(this.roomDatas, this.curRoomIndex, this.worldDatas, this.curWorldIndex);
    }
    sortRoomData() {
        this.roomDatas.sort(((a, b) => b.score - a.score));
    }
    getRoomDatas() {
        let tmpRoomDatas = [];
        this.roomDatas.forEach((value => {
            tmpRoomDatas.push(value);
        }));
        tmpRoomDatas.sort(((a, b) => b.tryOn - a.tryOn));
        return tmpRoomDatas;
    }
}

var foreign124 = Object.freeze({
    __proto__: null,
    default: RankModuleC
});

class SignInData extends Subdata {
    constructor() {
        super(...arguments);
        this.day = 0;
        this.dayStr = "";
    }
    setDay(addDay) {
        this.day += addDay;
        this.save(false);
    }
    setDayStr(dayStr, addDay) {
        this.dayStr = dayStr;
        this.day += addDay;
        this.save(false);
    }
}

__decorate([ Decorator.persistence() ], SignInData.prototype, "day", void 0);

__decorate([ Decorator.persistence() ], SignInData.prototype, "dayStr", void 0);

class SignInUserData {
    constructor(data) {
        if (!data) return;
        this.shareId = data?.shareId;
        this.icon = data?.icon;
    }
}

class SignInConfigData {
    constructor(data) {
        this.signInUserDatas = [];
        if (!data) return;
        this.isOpen = data?.isOpen;
        this.isOpenVersion2 = data?.isOpenVersion2;
        this.totalDay = data?.totalDay;
        for (let i = 0; i < data?.signInUserDatas?.length; ++i) {
            this.signInUserDatas.push(new SignInUserData(data?.signInUserDatas[i]));
        }
    }
}

var foreign131 = Object.freeze({
    __proto__: null,
    SignInConfigData: SignInConfigData,
    SignInUserData: SignInUserData,
    default: SignInData
});

let SignInPanel_Generate = class SignInPanel_Generate extends UIScript {
    get mTitleTextBlock() {
        if (!this.mTitleTextBlock_Internal && this.uiWidgetBase) {
            this.mTitleTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTitleTextBlock");
        }
        return this.mTitleTextBlock_Internal;
    }
    get mScrollBox() {
        if (!this.mScrollBox_Internal && this.uiWidgetBase) {
            this.mScrollBox_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mScrollBox");
        }
        return this.mScrollBox_Internal;
    }
    get mContentCanvas() {
        if (!this.mContentCanvas_Internal && this.uiWidgetBase) {
            this.mContentCanvas_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mScrollBox/ContentCanvas/mContentCanvas");
        }
        return this.mContentCanvas_Internal;
    }
    get mTotalDayTextBlock() {
        if (!this.mTotalDayTextBlock_Internal && this.uiWidgetBase) {
            this.mTotalDayTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mTotalDayTextBlock");
        }
        return this.mTotalDayTextBlock_Internal;
    }
    get mCloseButton() {
        if (!this.mCloseButton_Internal && this.uiWidgetBase) {
            this.mCloseButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mCloseButton");
        }
        return this.mCloseButton_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mCloseButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mCloseButton");
        }));
        this.mCloseButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mTitleTextBlock);
        this.initLanguage(this.mTotalDayTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SignInPanel_Generate = __decorate([ UIBind("UI/module/SignInModule/SignInPanel.ui") ], SignInPanel_Generate);

var SignInPanel_Generate$1 = SignInPanel_Generate;

var foreign189 = Object.freeze({
    __proto__: null,
    default: SignInPanel_Generate$1
});

let SignInItem_Generate = class SignInItem_Generate extends UIScript {
    get mIconImage() {
        if (!this.mIconImage_Internal && this.uiWidgetBase) {
            this.mIconImage_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage");
        }
        return this.mIconImage_Internal;
    }
    get mHasTextBlock() {
        if (!this.mHasTextBlock_Internal && this.uiWidgetBase) {
            this.mHasTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mIconImage/mHasTextBlock");
        }
        return this.mHasTextBlock_Internal;
    }
    get mDayTextBlock() {
        if (!this.mDayTextBlock_Internal && this.uiWidgetBase) {
            this.mDayTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mDayTextBlock");
        }
        return this.mDayTextBlock_Internal;
    }
    get mSignInButton() {
        if (!this.mSignInButton_Internal && this.uiWidgetBase) {
            this.mSignInButton_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSignInButton");
        }
        return this.mSignInButton_Internal;
    }
    get mSignInTextBlock() {
        if (!this.mSignInTextBlock_Internal && this.uiWidgetBase) {
            this.mSignInTextBlock_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/mSignInButton/mSignInTextBlock");
        }
        return this.mSignInTextBlock_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.mSignInButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "mSignInButton");
        }));
        this.mSignInButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.mHasTextBlock);
        this.initLanguage(this.mDayTextBlock);
        this.initLanguage(this.mSignInTextBlock);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SignInItem_Generate = __decorate([ UIBind("UI/module/SignInModule/SignInItem.ui") ], SignInItem_Generate);

var SignInItem_Generate$1 = SignInItem_Generate;

var foreign188 = Object.freeze({
    __proto__: null,
    default: SignInItem_Generate$1
});

class SignInItem extends SignInItem_Generate$1 {
    constructor() {
        super(...arguments);
        this.signInModuleC = null;
        this.signInUserData = null;
        this.day = 0;
        this.totalDay = 0;
    }
    get getSignInModuleC() {
        if (!this.signInModuleC) {
            this.signInModuleC = ModuleService.getModule(SignInModuleC);
        }
        return this.signInModuleC;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerMiddle;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mHasTextBlock.text = GameConfig.Language.Text_SignIn_6.Value;
    }
    bindButton() {
        this.mSignInButton.onClicked.add(this.addSignInButton.bind(this));
    }
    addSignInButton() {
        this.getSignInModuleC.signInAction.call(this.day, this.signInUserData.shareId);
    }
    initItem(signInUserData, day, totalDay) {
        this.signInUserData = signInUserData;
        this.day = day;
        this.totalDay = totalDay;
        this.refreshUI();
    }
    refreshUI() {
        this.mDayTextBlock.text = StringUtil.format(GameConfig.Language.Text_SignIn_9.Value, this.day);
        if (this.signInUserData?.icon && this.signInUserData?.icon?.length > 0) {
            this.mIconImage.imageGuid = this.signInUserData.icon;
        } else {
            this.mIconImage.imageInfo.setByAssetIcon(this.signInUserData.shareId, mw.AssetIconSize.Icon_128px);
        }
        if (this.totalDay >= this.day) {
            this.mSignInTextBlock.text = GameConfig.Language.Text_SignIn_7.Value;
        } else {
            this.mSignInTextBlock.text = GameConfig.Language.Text_SignIn_8.Value;
            Utils.setWidgetVisibility(this.mHasTextBlock, mw.SlateVisibility.Collapsed);
        }
    }
}

var foreign134 = Object.freeze({
    __proto__: null,
    default: SignInItem
});

class SignInPanel extends SignInPanel_Generate$1 {
    constructor() {
        super(...arguments);
        this.signInItems = [];
        this.signInConfigData = null;
        this.day = 0;
    }
    onStart() {
        this.canUpdate = false;
        this.layer = UILayerDialog;
        this.initUI();
        this.bindButton();
    }
    initUI() {
        this.mTitleTextBlock.text = GameConfig.Language.Text_SignIn_4.Value;
    }
    bindButton() {
        this.mCloseButton.onClicked.add(this.addCloseButton.bind(this));
    }
    addCloseButton() {
        this.hide();
    }
    initPanel(signInConfigData, day) {
        this.signInConfigData = signInConfigData;
        this.day = day;
        this.mTotalDayTextBlock.text = StringUtil.format(GameConfig.Language.Text_SignIn_5.Value, this.day);
        let totalDay = this.signInConfigData.totalDay;
        let signInUserDatas = this.signInConfigData.signInUserDatas;
        for (let i = 0; i < totalDay; ++i) {
            let signInItem = UIService.create(SignInItem);
            signInItem.initItem(signInUserDatas[i], i + 1, this.day);
            this.mContentCanvas.addChild(signInItem.uiObject);
            this.signInItems.push(signInItem);
        }
    }
}

var foreign135 = Object.freeze({
    __proto__: null,
    default: SignInPanel
});

class SignInModuleC extends ModuleC {
    constructor() {
        super(...arguments);
        this.hudModuleC = null;
        this.signInPanel = null;
        this.signInAction = new Action2;
        this.isInitSignInPanel = false;
        this.signInConfigData = null;
        this.day = 0;
    }
    get getHUDModuleC() {
        if (!this.hudModuleC) {
            this.hudModuleC = ModuleService.getModule(HUDModuleC);
        }
        return this.hudModuleC;
    }
    get getSignInPanel() {
        if (!this.signInPanel) {
            this.signInPanel = UIService.getUI(SignInPanel);
        }
        return this.signInPanel;
    }
    onStart() {
        this.bindAction();
    }
    bindAction() {
        this.getHUDModuleC.onOpenSignInAction.add(this.addOpenSignInAction.bind(this));
        this.signInAction.add(this.addSignInAction.bind(this));
    }
    addOpenSignInAction() {
        if (!this.signInConfigData || !this.signInConfigData?.isOpenVersion2 || this.day <= 0) {
            Notice.showDownNotice(GameConfig.Language.Text_SignIn_1.Value);
            return;
        }
        if (!this.isInitSignInPanel) {
            this.getSignInPanel.initPanel(this.signInConfigData, this.day);
            this.isInitSignInPanel = true;
        }
        this.getSignInPanel.show();
    }
    addSignInAction(day, sharedId) {
        if (day <= this.day) {
            ExecutorManager.instance.pushAsyncExecutor((async () => {
                this.getSignInPanel.hide();
                await this.useShareId(sharedId);
                Notice.showDownNotice(GameConfig.Language.Text_SignIn_2.Value);
            }));
        } else {
            Notice.showDownNotice(GameConfig.Language.Text_SignIn_3.Value);
        }
    }
    async useShareId(shareId) {
        if (shareId && shareId?.length > 0) {
            await this.server.net_useShareId(shareId);
        }
    }
    net_syncSignInConfigData(signInConfigData, day) {
        this.signInConfigData = signInConfigData;
        this.day = day;
        console.error(JSON.stringify(this.signInConfigData));
        if (this.signInConfigData) return;
        let data = {
            isOpen: false,
            isOpenVersion2: true,
            totalDay: 12,
            signInUserDatas: [ {
                shareId: "532290",
                icon: ""
            }, {
                shareId: "532291",
                icon: ""
            }, {
                shareId: "532292",
                icon: ""
            }, {
                shareId: "540371",
                icon: ""
            }, {
                shareId: "540373",
                icon: ""
            }, {
                shareId: "540369",
                icon: ""
            }, {
                shareId: "540372",
                icon: ""
            }, {
                shareId: "532301",
                icon: ""
            }, {
                shareId: "532293",
                icon: ""
            }, {
                shareId: "540370",
                icon: ""
            }, {
                shareId: "532295",
                icon: ""
            }, {
                shareId: "532294",
                icon: ""
            } ]
        };
        this.signInConfigData = new SignInConfigData(data);
        console.error(JSON.stringify(this.signInConfigData));
    }
}

var foreign132 = Object.freeze({
    __proto__: null,
    default: SignInModuleC
});

class SignInModuleS extends ModuleS {
    constructor() {
        super(...arguments);
        this.isContinueInitSignInData = true;
        this.signInConfigData = null;
    }
    onStart() {}
    onPlayerEnterGame(player) {
        this.syncSignInConfigData(player);
    }
    async syncSignInConfigData(player) {
        if (this.isContinueInitSignInData) {
            this.isContinueInitSignInData = false;
            await this.initSignInConfigData();
            TimeUtil.delaySecond(5).then((() => {
                this.isContinueInitSignInData = true;
            }));
        }
        this.getClient(player).net_syncSignInConfigData(this.signInConfigData, this.getDay(player));
    }
    async initSignInConfigData() {
        let data = await Utils.getCustomdata("SignInConfigData");
        this.signInConfigData = new SignInConfigData(data);
    }
    getDay(player) {
        let signInData = DataCenterS.getData(player, SignInData);
        let dayStr = signInData.dayStr;
        let currentDayStr = Utils.getDay();
        if (dayStr != currentDayStr) signInData.setDayStr(currentDayStr, 1);
        return signInData.day;
    }
    async net_useShareId(shareId) {
        let player = this.currentPlayer;
        await Utils.asyncDownloadAsset(shareId);
        player.character.setDescription([ shareId ]);
        player.character.description.advance.base.characterSetting.characterTemplate = mw.CharacterTemplate.None;
        await player.character.asyncReady();
    }
}

var foreign133 = Object.freeze({
    __proto__: null,
    default: SignInModuleS
});

let GameStart = class GameStart extends Script {
    constructor() {
        super(...arguments);
        this.languageId = -1;
        this.isOpenIAA = true;
    }
    onStart() {
        this.onStartCS();
        if (mw.SystemUtil.isClient()) {
            this.onStartC();
        } else if (mw.SystemUtil.isServer()) {
            this.onStartS();
        }
    }
    onStartCS() {
        GlobalData.isOpenIAA = false;
        this.registerModule();
    }
    registerModule() {
        ModuleService.registerModule(HUDModuleS, HUDModuleC, null);
        ModuleService.registerModule(DanMuModuleS, DanMuModuleC, null);
        ModuleService.registerModule(InteractionModuleS, InteractionModuleC, InteractionData);
        ModuleService.registerModule(NavigationModuleS, NavigationModuleC, null);
        ModuleService.registerModule(RankModuleS, RankModuleC, RankData);
        ModuleService.registerModule(SetModuleS, SetModuleC, SetData);
        ModuleService.registerModule(SignInModuleS, SignInModuleC, SignInData);
        ModuleService.registerModule(MallModuleS, MallModuleC, MallData);
        ModuleService.registerModule(TryOnModuleS, TryOnModuleC, TryOnData);
        ModuleService.registerModule(CharacterModuleS, CharacterModuleC, CharacterData);
    }
    onUpdate(dt) {
        if (mw.SystemUtil.isClient()) {
            this.onUpdateC(dt);
        } else if (mw.SystemUtil.isServer()) {
            this.onUpdateS(dt);
        }
    }
    onStartC() {
        this.useUpdate = true;
        this.initLanguage();
    }
    initLanguage() {
        let language = LocaleUtil.getDefaultLocale().toString().toLowerCase();
        console.error(`wfz - language:${language}`);
        let languageId = -1;
        if (mw.SystemUtil.isPIE && this.languageId >= 0) {
            languageId = this.languageId;
        } else {
            if (!!language.match("en")) {
                languageId = 0;
            } else if (!!language.match("zh")) {
                languageId = 1;
            } else if (!!language.match("ja")) {
                languageId = 3;
            } else if (!!language.match("ko")) {
                languageId = 4;
            } else {
                languageId = 2;
            }
        }
        GlobalData.languageId = languageId;
        console.error(`wfz - languageId:${languageId}`);
        GameConfig.initLanguage(languageId, (key => {
            let ele = GameConfig.Language.getElement(key);
            if (ele == null) return "unknow_" + key;
            return ele.Value;
        }));
        mw.UIScript.addBehavior("lan", (ui => {
            let key = ui.text;
            if (!key) return;
            let languageElement = GameConfig.Language.getElement(key);
            if (languageElement) ui.text = languageElement.Value;
        }));
    }
    onUpdateC(dt) {
        mw.TweenUtil.TWEEN.update();
        update();
    }
    onStartS() {
        this.useUpdate = false;
        DataStorage.setTemporaryStorage(SystemUtil.isPIE);
    }
    onUpdateS(dt) {}
};

__decorate([ mw.Property({
    displayName: "多语言",
    group: "脚本设置",
    enumType: {
        "系统默认": -1,
        "英语": 0,
        "简体中文": 1,
        "繁体中文": 2,
        "日语": 3,
        "韩语": 4
    }
}) ], GameStart.prototype, "languageId", void 0);

__decorate([ mw.Property({
    displayName: "是否开启IAA",
    group: "脚本设置"
}) ], GameStart.prototype, "isOpenIAA", void 0);

GameStart = __decorate([ Component ], GameStart);

var GameStart$1 = GameStart;

var foreign81 = Object.freeze({
    __proto__: null,
    default: GameStart$1
});

let GMHUD_Generate = class GMHUD_Generate extends UIScript {
    get oKbutton() {
        if (!this.oKbutton_Internal && this.uiWidgetBase) {
            this.oKbutton_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/oKbutton");
        }
        return this.oKbutton_Internal;
    }
    get dropList() {
        if (!this.dropList_Internal && this.uiWidgetBase) {
            this.dropList_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/dropList");
        }
        return this.dropList_Internal;
    }
    get argText() {
        if (!this.argText_Internal && this.uiWidgetBase) {
            this.argText_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/argText");
        }
        return this.argText_Internal;
    }
    get cmdButton() {
        if (!this.cmdButton_Internal && this.uiWidgetBase) {
            this.cmdButton_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/cmdButton");
        }
        return this.cmdButton_Internal;
    }
    get pingText() {
        if (!this.pingText_Internal && this.uiWidgetBase) {
            this.pingText_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/pingText");
        }
        return this.pingText_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.oKbutton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "oKbutton");
        }));
        this.initLanguage(this.oKbutton);
        this.oKbutton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.cmdButton.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "cmdButton");
        }));
        this.initLanguage(this.cmdButton);
        this.cmdButton.touchMethod = mw.ButtonTouchMethod.PreciseTap;
        this.initLanguage(this.pingText);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

GMHUD_Generate = __decorate([ UIBind("UI/module/GMModule/GMHUD.ui") ], GMHUD_Generate);

var GMHUD_Generate$1 = GMHUD_Generate;

var foreign162 = Object.freeze({
    __proto__: null,
    default: GMHUD_Generate$1
});

let GMItem_Generate = class GMItem_Generate extends UIScript {
    get button() {
        if (!this.button_Internal && this.uiWidgetBase) {
            this.button_Internal = this.uiWidgetBase.findChildByPath("MWCanvas_2147482460/button");
        }
        return this.button_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.button.onClicked.add((() => {
            Event.dispatchToLocal("PlayButtonClick", "button");
        }));
        this.initLanguage(this.button);
        this.button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

GMItem_Generate = __decorate([ UIBind("UI/module/GMModule/GMItem.ui") ], GMItem_Generate);

var GMItem_Generate$1 = GMItem_Generate;

var foreign163 = Object.freeze({
    __proto__: null,
    default: GMItem_Generate$1
});

var GMService_1;

const GMConfig = [];

function AddGMCommand(cmd) {
    GMConfig.push(cmd);
}

AddGMCommand({
    label: "applySharedId",
    clientCmd: async (player, value) => {
        Utils.applySharedId(player.character, value);
    },
    serverCmd: (player, value) => {}
});

AddGMCommand({
    label: "雪",
    clientCmd: async (player, value) => {
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(0, 0, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(0, 300, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(0, -300, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(300, 0, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(-300, 0, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(300, 300, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(300, -300, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(-300, 300, 0)
        });
        EffectService.playOnGameObject(`127013`, player.character, {
            slotType: mw.HumanoidSlotType.Root,
            loopCount: 0,
            position: new mw.Vector(-300, -300, 0)
        });
    },
    serverCmd: (player, value) => {}
});

let isPlayBGM = false;

AddGMCommand({
    label: "BGM",
    clientCmd: async (player, value) => {
        isPlayBGM = !isPlayBGM;
        if (isPlayBGM) {
            SoundService.playBGM(`63341`, 1);
        } else {
            SoundService.stopBGM();
        }
    },
    serverCmd: (player, value) => {}
});

let GMService = GMService_1 = class GMService extends mw.Script {
    createUI(dropDownList) {
        GMConfig.forEach((cmd => {
            dropDownList.addItem(cmd);
        }));
    }
    onStart() {
        GMService_1.instance = this;
        if (mw.SystemUtil.isClient()) {
            console.log("[GM]：模块初始化");
            new GMBasePanel;
            let isOpen = false;
            mw.InputUtil.onKeyDown(mw.Keys.NumPadOne, (() => {
                isOpen = !isOpen;
                isOpen ? OpenGMUI() : CloseGMUI();
            }));
        }
    }
    cmd(player, data, param) {
        if (mw.SystemUtil.isClient()) {
            if (data.clientCmd) {
                data.clientCmd(player, param);
            }
            if (data.serverCmd) {
                const index = GMConfig.indexOf(data);
                this.onServerCmd(player, index, param);
            }
        } else if (mw.SystemUtil.isServer()) {
            if (data.serverCmd) {
                data.serverCmd(player, param);
            }
            if (data.clientCmd) {
                const index = GMConfig.indexOf(data);
                this.onClientCmd(player, index, param);
            }
        }
    }
    onServerCmd(player, index, param) {
        GMConfig[index].serverCmd(player, param);
    }
    onClientCmd(player, index, param) {
        GMConfig[index].clientCmd(player, param);
    }
};

__decorate([ RemoteFunction(mw.Server) ], GMService.prototype, "onServerCmd", null);

__decorate([ RemoteFunction(mw.Client) ], GMService.prototype, "onClientCmd", null);

GMService = GMService_1 = __decorate([ Component ], GMService);

var GMService$1 = GMService;

class GMBasePanel {
    constructor() {
        this._view = mw.UIService.getUI(GMHUD_Generate$1);
        this.dropDownList = new DropdownList({
            panel: this._view.dropList,
            button: this._view.oKbutton,
            label: this._view.cmdButton
        }, GMItem_Generate$1, ((ui, data) => {
            ui.button.onClicked.add((() => {
                GMService.instance.cmd(Player.localPlayer, data, this._view.argText.text);
            }));
            ui.button.text = data.label;
        }), 5);
        GMService.instance.createUI(this.dropDownList);
        this._view.cmdButton.onClicked.add((() => {
            if (this.dropDownList.selectItem) {
                GMService.instance.cmd(Player.localPlayer, this.dropDownList.selectItem.data, this._view.argText.text);
            }
        }));
    }
}

function OpenGMUI() {
    mw.UIService.show(GMHUD_Generate$1);
}

function CloseGMUI() {
    mw.UIService.hide(GMHUD_Generate$1);
}

class DropdownList {
    constructor(_root, _itemCls, _onCreate, space = 0) {
        this._root = _root;
        this._itemCls = _itemCls;
        this._onCreate = _onCreate;
        this.space = space;
        this._cache = [];
        this._items = [];
        this.addExpandEvent();
    }
    addExpandEvent() {
        this._root.button.onClicked.add((() => {
            this._isDropdown = !this._isDropdown;
            this._invalidateLayout();
        }));
    }
    get selectItem() {
        return this._select;
    }
    addItem(data, index = -1) {
        let itemUI = this._cache.length > 0 ? this._cache.shift() : mw.UIService.create(this._itemCls);
        if (!itemUI.list) {
            itemUI.list = this;
            itemUI.button.touchMethod = mw.ButtonTouchMethod.PreciseTap;
            itemUI.button.onClicked.add((() => {
                this._select = itemUI;
                this._root.label.text = data.label;
                this._isDropdown = !this._isDropdown;
                this._invalidateLayout();
            }));
            this._root.panel.addChild(itemUI.uiObject);
        }
        itemUI.data = data;
        this._onCreate(itemUI, data);
        itemUI.rootCanvas.autoSizeEnable = true;
        if (!this._itemSize) {
            this._itemSize = itemUI.rootCanvas.size;
            const height = this._root.panel.size.y;
            this._root.panel.size = new mw.Vector2(this._itemSize.x, height);
        }
        if (index >= 0) {
            this._items.splice(index, 0, itemUI);
        } else {
            this._items.push(itemUI);
        }
        this._invalidateLayout();
    }
    removeItem(node) {
        const index = this._items.indexOf(node);
        if (index >= 0) {
            node.visible = false;
            this._cache.push(...this._items.splice(index, 1));
            this._invalidateLayout();
        }
    }
    removeItemAt(index) {
        const node = this.getItem(index);
        if (node) {
            this.removeItem(node);
        }
    }
    getItem(index) {
        if (index >= 0 && index < this._items.length) return this._items[index];
        return null;
    }
    _invalidateLayout() {
        if (this._isDropdown) {
            let offset = 0;
            this._root.panel.visibility = mw.SlateVisibility.SelfHitTestInvisible;
            for (let i = 0; i < this._items.length; i++) {
                this._items[i].uiObject.position = new mw.Vector2(0, offset);
                offset += this._itemSize.y + this.space;
            }
        } else {
            this._root.panel.visibility = mw.SlateVisibility.Collapsed;
        }
    }
}

var foreign101 = Object.freeze({
    __proto__: null,
    AddGMCommand: AddGMCommand,
    CloseGMUI: CloseGMUI,
    OpenGMUI: OpenGMUI,
    default: GMService$1
});

let CopyCharacter = class CopyCharacter extends Script {
    constructor() {
        super(...arguments);
        this.isCanTrigger = true;
    }
    onStart() {
        if (mw.SystemUtil.isServer()) return;
        this.gameObject.onEnter.add((character => {
            if (Player.localPlayer.character.gameObjectId != character.gameObjectId) return;
            if (!this.isCanTrigger) return;
            this.isCanTrigger = false;
            TimeUtil.delaySecond(60).then((() => {
                this.isCanTrigger = true;
            }));
            console.error(`aaaaaaa2`);
            character.setDescription(this.gameObject.parent.getDescription());
            character.asyncReady().then((() => {
                character.syncDescription();
            }));
        }));
    }
};

CopyCharacter = __decorate([ Component ], CopyCharacter);

var CopyCharacter$1 = CopyCharacter;

var foreign140 = Object.freeze({
    __proto__: null,
    default: CopyCharacter$1
});

var FreeCamera_1;

let FreeCamera = FreeCamera_1 = class FreeCamera extends Script {
    constructor() {
        super(...arguments);
        this.speed = 500;
        this._moveDirection = Vector.zero;
        this._moveLoc = Vector.zero;
        this.VECTOR_ZERO = Vector.zero;
        this.isFreeCamera = false;
        this.isFirstChange = true;
    }
    onStart() {
        this.init();
    }
    async init() {
        if (SystemUtil.isServer()) return;
        await (await Player.asyncGetLocalPlayer()).character.asyncReady();
        this.freeCamera = await GameObject.asyncSpawn("Camera");
        this.freeCamera.springArm.localTransform = Transform.identity;
        this.freeCamera.upAngleLimit = 89.9;
        this.freeCamera.downAngleLimit = 89.9;
        this.freeCamera.localTransform = Transform.identity;
        this.freeCamera.springArm.localTransform = Transform.identity;
        this.freeCamera.springArm.length = 0;
        this.freeCamera.springArm.collisionEnabled = false;
        InputUtil.onKeyDown(Keys.F8, (() => {
            if (this.isFreeCamera) {
                this.exitFreeCamera();
            } else {
                this.enterFreeCamera();
            }
        }));
        InputUtil.onKeyDown(Keys.NumPadNine, (() => {
            this.freeCamera.springArm.worldTransform.position = Player.localPlayer.character.worldTransform.position.clone();
            this._moveLoc = this.freeCamera.springArm.worldTransform.position.clone();
        }));
        Event.addLocalListener(FreeCamera_1.EVENTS_JOYSTICK_INPUT, (dir => {
            if (this.freeCamera) {
                const forward = this.freeCamera.worldTransform.clone().getForwardVector().clone();
                const right = this.freeCamera.worldTransform.clone().getRightVector().clone();
                this._moveDirection.set(forward.multiply(dir.y).add(right.multiply(dir.x)));
                Vector.add(this._moveLoc, this._moveDirection.normalized.multiply(this.speed * .02), this._moveLoc);
                this.freeCamera.springArm.worldTransform.position = this._moveLoc;
                if (this.useUpdate) this.useUpdate = false;
            }
        }));
        KeyActionManager.instance.add([ Keys.W, Keys.S, Keys.A, Keys.D, Keys.E, Keys.Q ]);
    }
    enterFreeCamera() {
        if (!this.originCamera) {
            this.originCamera = Camera.currentCamera;
        }
        if (this.isFirstChange) {
            this.freeCamera.springArm.worldTransform.position = Player.localPlayer.character.worldTransform.position.clone();
            this._moveLoc = this.freeCamera.springArm.worldTransform.position.clone();
            this.isFirstChange = false;
        }
        Camera.switch(this.freeCamera, 0);
        this.originCamera.springArm.useControllerRotation = false;
        this.freeCamera.springArm.useControllerRotation = true;
        Player.localPlayer.character.movementEnabled = false;
        this.isFreeCamera = true;
        this.useUpdate = true;
    }
    exitFreeCamera() {
        if (!this.isFreeCamera) return;
        Camera.switch(this.originCamera, 0);
        this.originCamera.springArm.useControllerRotation = true;
        this.freeCamera.springArm.useControllerRotation = false;
        Player.localPlayer.character.movementEnabled = true;
        this.isFreeCamera = false;
        this.useUpdate = false;
    }
    onUpdate(dt) {
        if (KeyActionManager.instance.isPress(Keys.W)) {
            const forward = this.freeCamera.worldTransform.clone().getForwardVector().clone();
            this._moveDirection.x += forward.x;
            this._moveDirection.y += forward.y;
        }
        if (KeyActionManager.instance.isPress(Keys.S)) {
            const back = this.freeCamera.worldTransform.clone().getForwardVector().clone().multiply(-1);
            this._moveDirection.x += back.x;
            this._moveDirection.y += back.y;
        }
        if (KeyActionManager.instance.isPress(Keys.A)) {
            const left = this.freeCamera.worldTransform.clone().getRightVector().clone().multiply(-1);
            this._moveDirection.x += left.x;
            this._moveDirection.y += left.y;
        }
        if (KeyActionManager.instance.isPress(Keys.D)) {
            const right = this.freeCamera.worldTransform.clone().getRightVector().clone();
            this._moveDirection.x += right.x;
            this._moveDirection.y += right.y;
        }
        if (KeyActionManager.instance.isPress(Keys.E)) {
            this._moveDirection.z += 1;
        }
        if (KeyActionManager.instance.isPress(Keys.Q)) {
            this._moveDirection.z -= 1;
        }
        if (!this._moveDirection.equals(this.VECTOR_ZERO)) {
            Vector.add(this._moveLoc, this._moveDirection.normalized.multiply(this.speed * dt), this._moveLoc);
            this.freeCamera.springArm.worldTransform.position = this._moveLoc;
            this._moveDirection.x = 0;
            this._moveDirection.y = 0;
            this._moveDirection.z = 0;
        }
    }
};

FreeCamera.EVENTS_JOYSTICK_INPUT = "FreeCamera.EVENTS_JOYSTICK_INPUT";

FreeCamera = FreeCamera_1 = __decorate([ Component ], FreeCamera);

var FreeCamera$1 = FreeCamera;

class KeyActionManager {
    constructor() {
        this.isReady = false;
        this._actionStates = new Map;
        this._btnStates = new Map;
    }
    static get instance() {
        if (!KeyActionManager._instance) {
            KeyActionManager._instance = new KeyActionManager;
        }
        return KeyActionManager._instance;
    }
    isPress(action) {
        if (action instanceof mw.Button) {
            return this._btnStates.get(action.guid);
        } else {
            return this._actionStates.get(action);
        }
    }
    add(btn) {
        if (btn instanceof Button) {
            this._btnStates.set(btn.guid, false);
            btn.onPressed.add((() => {
                this._btnStates.set(btn.guid, true);
            }));
            btn.onReleased.add((() => {
                this._btnStates.set(btn.guid, false);
            }));
        } else {
            btn.forEach((element => {
                this._actionStates.set(element, false);
                InputUtil.onKeyDown(element, (() => {
                    this._actionStates.set(element, true);
                }));
                InputUtil.onKeyUp(element, (() => {
                    this._actionStates.set(element, false);
                }));
            }));
        }
    }
}

var foreign141 = Object.freeze({
    __proto__: null,
    default: FreeCamera$1
});

let SecondNoticeItem_Generate = class SecondNoticeItem_Generate extends UIScript {
    get txt_context() {
        if (!this.txt_context_Internal && this.uiWidgetBase) {
            this.txt_context_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/txt_context");
        }
        return this.txt_context_Internal;
    }
    get icon() {
        if (!this.icon_Internal && this.uiWidgetBase) {
            this.icon_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/icon");
        }
        return this.icon_Internal;
    }
    get effect() {
        if (!this.effect_Internal && this.uiWidgetBase) {
            this.effect_Internal = this.uiWidgetBase.findChildByPath("RootCanvas/effect");
        }
        return this.effect_Internal;
    }
    onAwake() {
        this.canUpdate = false;
        this.layer = mw.UILayerBottom;
        this.initButtons();
    }
    initButtons() {
        this.initLanguage(this.txt_context);
    }
    initLanguage(ui) {
        let call = mw.UIScript.getBehavior("lan");
        if (call && ui) {
            call(ui);
        }
    }
    onShow(...params) {}
    show(...param) {
        mw.UIService.showUI(this, this.layer, ...param);
    }
    hide() {
        mw.UIService.hideUI(this);
    }
};

SecondNoticeItem_Generate = __decorate([ UIBind("UI/common/notice/SecondNoticeItem.ui") ], SecondNoticeItem_Generate);

var SecondNoticeItem_Generate$1 = SecondNoticeItem_Generate;

var foreign148 = Object.freeze({
    __proto__: null,
    default: SecondNoticeItem_Generate$1
});

const MWModuleMap = {
    "8844A03B4B6BEF9D15DCAAA48FB26A57": foreign1,
    B0B4B657452A9DF4B7AD97B03BE71040: foreign2,
    "1EADC67E44A4E69AE0536FAD402CBF72": foreign3,
    "943D729E44EDCB8FC0E0E0A49FC4B81D": foreign4,
    "93B2CE464D83F5F32CFEBAB62E19ED44": foreign5,
    "0D56B7DA4D6907D8A3A0E2B7D99243E5": foreign6,
    D5187BC64D0F894014874CBD5C3B66FF: foreign7,
    "92D48D5644B894BF6ADD42AC6A552EBF": foreign8,
    "40C324EF460FD785B1F5BD81A5FD0C82": foreign9,
    "4F248A5C40DC8F5B3E71E6B3DF60F96C": foreign10,
    "439374F4477FE0808E2F69A77D57D338": foreign11,
    "339D27BA418A3F1029E0FCA67F1E8713": foreign12,
    "7FC7975C4113D4F0587467AF8BF5997C": foreign13,
    F29B18C247A84D7AC967719D7644E356: foreign14,
    "375D97FC4DE52ED67FE64DA6B8498932": foreign15,
    "6FA2C6BE48CB30699434FA8936649108": foreign16,
    BC3299354D46FDA8CE4460B95AD095B5: foreign17,
    "65A9A90C4496476494D0FAB8F251EA64": foreign18,
    "0B74AAD24FE365CF49EE42887E1429E1": foreign19,
    B6A928644529AA10CBC8C89C88E55527: foreign20,
    C67268BD48260E47D9B20ABFD681CDE6: foreign21,
    EF46DC684C5095F23AB1CDBDC99C5E18: foreign22,
    CB2CC466426F9ED0690FE1818DDB4A4D: foreign23,
    "3556BC894D567078DFA53FB84C80FEA5": foreign24,
    "2A4378CF46E335A85DDEB48C29E7A739": foreign25,
    "0434889E4AECBAAD74F94DA0593D2A58": foreign26,
    "68B4676C4491BF748184D8B1C41C073C": foreign27,
    A2718601468E55D897B0A0956C95BB58: foreign28,
    "7EFA744642DEF2CF87196ABAFC508494": foreign29,
    "8FEC2BA64F0E22B1016AFA8687BB15EB": foreign30,
    "9F0BD1DA4FD4D29377DCB9A5D39765DD": foreign31,
    CABD28EC4039A8E35DFAE1AD66F67197: foreign32,
    "5A39EF934034CBEE314F82B52349B130": foreign33,
    F12E438D4B20BA10E2A8F69481DCA60D: foreign34,
    "4FD6C57543A5A13D552BA5A0AB4CC204": foreign35,
    "389A7C3A4ECA3E088872EFB50C292AB9": foreign36,
    "457E06044E12621A6C828F96F77F2DBA": foreign37,
    F02793634EEF5BFD887A738715432357: foreign38,
    "5518D83E44C5548F0296A588F32A2EBA": foreign39,
    B83754B54AADDBA4D96121AF56EB9FB8: foreign40,
    "782157B84C1D0296B93035864A899AAE": foreign41,
    "9AD8BCC843AA9AAB12CF1B893C012F4B": foreign42,
    B1297C104F75993DF2229B94CD030D08: foreign43,
    B9352A4F4CBE39334B0D4195D7924E85: foreign44,
    "60DD9FED43F4523F1F3A2C939452ECE9": foreign45,
    "3AB8E07248A4F10CBBD12990567959A3": foreign46,
    "243765004517AECC33492499B2B88CBC": foreign47,
    F7E863884182B33057CB8E9B67B0A412: foreign48,
    "7CBAD32441B5CD730647B0B5A600A94D": foreign49,
    "1330684147A9A502E350008C98D2BCA7": foreign50,
    "11962E4241521418017371B96A54BB03": foreign51,
    "6B62464A4360EA13FDA7D9BCF2CB1B25": foreign52,
    FCEB66AB4F9446760C58CCAFF50CB461: foreign53,
    "141D09DE4B1EC9F741B654BD9E50EB6A": foreign54,
    "4FA2BF144E6865A1D22E1780AE811754": foreign55,
    "1104309D4AC2F09410E3428603131405": foreign56,
    "44B4F98542D4E2FB3785468E24E38256": foreign57,
    E2B7D6D54EA9DE417F22C7A341800147: foreign58,
    "3EB367E948EC45D54DA403A9356BB59B": foreign59,
    "855B872E43C1F8DA6D4AF9BE52B3F11E": foreign60,
    "791552A549BD00864EE004911284285E": foreign61,
    B309BEB84127DB25AE5331B433718577: foreign62,
    "2C6C1F5B41E266A6AEA9DE92728F56BA": foreign63,
    "447359264FC3721660CAA8A507CC92A7": foreign64,
    "322EFBB14EC22DE043EE9FB804458848": foreign65,
    "2990954C4F47DDBAA760A7BDA2110FC5": foreign66,
    A08E64004A031F3B5A4F3FAD7F627837: foreign67,
    "09CD46A745C34756B421029FD47D5FFD": foreign68,
    E365E6CC4DB42C06753F629A21BAC5EE: foreign69,
    "9BC6EE924CE6A5778D6FAFBF640EED8C": foreign70,
    "6EE9A8E84D34A9826FDCAA8FB6A85ABE": foreign71,
    "7BAC400240190D965D3E3191D7192F93": foreign72,
    "632937BF45CF6303AB7020899FAD7F74": foreign73,
    F04CD9C841CD23385A765A83E04D1FD3: foreign74,
    "69D0FF714F0FAED8C52B80A2AAC7A9C6": foreign75,
    "329755234A9566B9A648DFB4BA9C04B8": foreign76,
    FFA95DBC498EFC129F926A889C81EE58: foreign77,
    FACDE3F5429BC164C699E8ADA502778D: foreign78,
    "87F14EB741C27E6D200286A37061BC80": foreign79,
    "984197194E9B5C76B63157987ABC8AAD": foreign80,
    D2DDF11D4BF0BEBBCE0F2B9CF42517EE: foreign81,
    "0FCAF0584709FBB39E590CAEA83B1217": foreign82,
    "7D98F77C457BD44550899198F36FDB9F": foreign83,
    "217BA01E41730F90FFD93DB073302A23": foreign84,
    "8060BCE54660E3CD68990A8C89C05E1D": foreign85,
    "8A1395194926A242C9BA5F9A9B6B8272": foreign86,
    "904D34A54E1F6197EF34B1892E35FC85": foreign87,
    AA3586B64B181C63C928A1810CCA95E1: foreign88,
    "9C6A23FA4F6E9AAA9861F28F43A80CB7": foreign89,
    "837FD9D94CC2AE241B061DABC0E78B17": foreign90,
    "09C1929E4D5A6DC4B1C6DF8F280C0B8E": foreign91,
    "644F545245224887FB7893A799934F09": foreign92,
    "33E4306448F72B0C557086A691B9CBFF": foreign93,
    F411D5434367FBC411D5629DE4530583: foreign94,
    "32887ABC4B678AD4708B3EAB42A38F87": foreign95,
    D7B3EB9F492B14994EC537AEF4144580: foreign96,
    E5070EED458C8754669EE78CB19176FE: foreign97,
    "0687D50F477374C7AB669BBD15E6FDF5": foreign98,
    "3340D31D4C01664F7F4F45A689890DBD": foreign99,
    DCE2333D4CD32653F566BA81ED0419FF: foreign100,
    ADCD102745EC6ADBA54B59A92A39C2DB: foreign101,
    "8846728C43298291A92B03A84C2B605C": foreign102,
    A7352BD449067EB6E854E3AF902BC932: foreign103,
    "4CDE05C5416CAB199FD4A68E7D1943F1": foreign104,
    "67738F2D4FC93D7F8961718891C8042A": foreign105,
    D355DD4B4EF11EA260DAAF9043337A92: foreign106,
    B3FFB33B46975FA3DF61B68CADAD43E5: foreign107,
    BFC546CF465E6F5B7AF12794A74685B6: foreign108,
    "0564982D45096EB45701F5B12C03AA73": foreign109,
    "03CCABAD4D03EEBB9EEC509FC8C041AB": foreign110,
    "4F12A4D54B59BF4E7BF8578B98947A43": foreign111,
    "14C9D8334A5CCF2499885CA2EB8235EB": foreign112,
    "314CF3AC4A3AB95069A56BA593371A38": foreign113,
    "0F92FD664F4498F2D37DBB85F5591864": foreign114,
    "0C059CEC46B430E154759A97D924865E": foreign115,
    F693343F43B7C53464696B8833FF38E0: foreign116,
    "11E7804D47058EB9E27F16AD288AF1CA": foreign117,
    E5D27183452CBD04A0D0D187CF2014FC: foreign118,
    "0433C0944AF345F89D35AD863E1E2290": foreign119,
    "099CC63342C56F28195B5794157F5C82": foreign120,
    "63B7A637479107F0C4812A9513E4EF84": foreign121,
    D8E6B9EF4DE0DF3088CC3C8599F76F45: foreign122,
    "7833C871441E612CC5B5CE9BDDA947C9": foreign123,
    A12B8D524B602E750EB63288C79D32E2: foreign124,
    F057824E4569A842D403858DC7D1D88B: foreign125,
    "9F1D50A144B07BFAFC552F925299CE71": foreign126,
    "3E1D070A4147D9A5B46E0EAF1E5FD4E1": foreign127,
    F215908B4B4F40F5531DE4A01F660731: foreign128,
    A8FB760F441C95AFACBAD78838B58528: foreign129,
    DC56F3F94E062B2AD909F386B767436F: foreign130,
    "6688C3B84E092AFB395C0DB3E4331E3D": foreign131,
    "535BEEA64A7F529F52631FA182212718": foreign132,
    B23852CE407E0A008F3BE78DDE49EB51: foreign133,
    FAAFDA5E4A40291D72B0459742CD601A: foreign134,
    "1D10F64B4D38229D7655CC923071E9B2": foreign135,
    "2032BEF24550E75CE53EE39AE53150E9": foreign136,
    D64517A445CBA580CE34A68B0DE2D5D0: foreign137,
    C48FD39D43DA5E48E2FFED92F839BB3D: foreign138,
    "1757D7694B3B2F7BFB8C0897BDF03724": foreign139,
    BC6767CF4240176E5C9B6984BB540726: foreign140,
    "7EA40C8447FE422BDA45A6A15ACAB0C2": foreign141,
    F7EE8818455A5EE814A6F18A2F0CBB12: foreign142,
    "49E1131448695DF591C8DEB790EFC952": foreign143,
    "290BA293443A80CCA56170B9DA3D47C1": foreign144,
    "71EC5D03421DCEEEB4172C8C643D8019": foreign145,
    "0AEE9F474D44E77C3A083FBF0EFD7775": foreign146,
    "741B06144E25B4753E8005985816DAF8": foreign147,
    EE3F354349BB041CD741FF84B745B113: foreign148,
    "8FA0EC3E442A57C1B550BB833E68DA90": foreign149,
    "100DA6744367634E7FFC0895CD98DDB9": foreign150,
    "67892EC847DCDABBB14451A8CDFD526C": foreign151,
    "486071A84887288700A7E297CBF6B438": foreign152,
    BB12954A4FC0D5D00C29B0BFD73F83A2: foreign153,
    "50B679574FA404BE92C52CAD0436F5B1": foreign154,
    BC28A8C5401B15E17AAEF482A8AA133E: foreign155,
    "4FBD7D6C429DD0F90494B5B35FD1AE7F": foreign156,
    "3A88620945CCB3EE5B699F9D35A5A28F": foreign157,
    "827757834BCFC569771BCB84A3609238": foreign158,
    F58702064960960163820CB9C8D0F3C1: foreign159,
    D92460FC43DFEF127C8EB39DECD67E58: foreign160,
    C265D0BB488D0422A80DBBB6082E4CB4: foreign161,
    "2DB355DB4AE5EEA9FAD9E39C7071F66C": foreign162,
    "95C84A464FBF396210D6DAB0DFAF53C3": foreign163,
    C067E1F649184B0F7FC5E0B9456BC72C: foreign164,
    "337A59B14A237973EEB178A260344C21": foreign165,
    B9D019D74067C8F762132698D474BF63: foreign166,
    C4E377B14812C09429E28988E62907DB: foreign167,
    E038BA9A4A21ED21407734BBDEC1DF0C: foreign168,
    AD7B5C5440FB6D1DA3795A9BA561546D: foreign169,
    "06CF574844634CC9C0793EA8847C6FE2": foreign170,
    "27DEB6624F87673F14AA499E8A3A7DD3": foreign171,
    CEE9E492480CEF69BF9291BA357C9AC1: foreign172,
    "44FCD3854A750D1B45716AA4CFE030E3": foreign173,
    "713A8E764F3DAC8A8AD1BEB382C46158": foreign174,
    "5E6E0BFE48C322071930C2B8DD56E900": foreign175,
    C381E72F409A02A45B69B9BC32F4FCAF: foreign176,
    FADB775E4F203C2565D31A9AA31E22D1: foreign177,
    AF6D5EC44D0BB050F181CD8B9544DD7B: foreign178,
    F3E9117C4C567C26689F08B919B7E7DA: foreign179,
    AF5DEB904C817468E94BAA9265F23AF7: foreign180,
    AAE12F3F4FD38A0B43975DB01D2D496C: foreign181,
    "9E3A8E7D4942E24576FFE88DEBE534D2": foreign182,
    A8E0593D477EC697B2559789990E0882: foreign183,
    BF8FC10D4207BD4C47028EBC0D3ACF8F: foreign184,
    "559367EC4AA0BAE9AD25A694D5CA960C": foreign185,
    "2AD51BC848CD83DE2F0BA68674DE3EE1": foreign186,
    "52E3A8604FC761E6CC747FB22FD7160B": foreign187,
    "14F8E49D4B31DFAA50548BA206585CCA": foreign188,
    "656033E844C70FD925FC8F887EA9FA46": foreign189,
    "6B744DEB4703AED17EA7279D0783813A": foreign190,
    C6D169354450AEEF12B964B7B3BA8B2D: foreign191,
    "46D363B5455BBB5A2A9BB58A4E4A04D2": foreign192
};

const MWFileMapping = new WeakMap([ [ foreign1 || {}, "JavaScripts/common/notice/Notice" ], [ foreign2 || {}, "JavaScripts/common/notice/Tween" ], [ foreign3 || {}, "JavaScripts/common/notice/UIPool" ], [ foreign4 || {}, "JavaScripts/common/notice/Updater" ], [ foreign5 || {}, "JavaScripts/configs/AccessoriesGloves" ], [ foreign6 || {}, "JavaScripts/configs/ActionConfig" ], [ foreign7 || {}, "JavaScripts/configs/ActionProp" ], [ foreign8 || {}, "JavaScripts/configs/ALongCoatTop" ], [ foreign9 || {}, "JavaScripts/configs/AncientMoldingOutfit" ], [ foreign10 || {}, "JavaScripts/configs/Back" ], [ foreign11 || {}, "JavaScripts/configs/BackHair" ], [ foreign12 || {}, "JavaScripts/configs/BackPet" ], [ foreign13 || {}, "JavaScripts/configs/Blush" ], [ foreign14 || {}, "JavaScripts/configs/BodyType" ], [ foreign15 || {}, "JavaScripts/configs/BootsShoes" ], [ foreign16 || {}, "JavaScripts/configs/Bottom" ], [ foreign17 || {}, "JavaScripts/configs/Chat" ], [ foreign18 || {}, "JavaScripts/configs/ColorValue" ], [ foreign19 || {}, "JavaScripts/configs/ConfigBase" ], [ foreign20 || {}, "JavaScripts/configs/DailyStylingOutfit" ], [ foreign21 || {}, "JavaScripts/configs/DailyStylingOutfit1" ], [ foreign22 || {}, "JavaScripts/configs/DailyStylingOutfit2" ], [ foreign23 || {}, "JavaScripts/configs/Description" ], [ foreign24 || {}, "JavaScripts/configs/Ear" ], [ foreign25 || {}, "JavaScripts/configs/Effects" ], [ foreign26 || {}, "JavaScripts/configs/EverydayShoes" ], [ foreign27 || {}, "JavaScripts/configs/Expression" ], [ foreign28 || {}, "JavaScripts/configs/Eyebrows" ], [ foreign29 || {}, "JavaScripts/configs/Eyelashes" ], [ foreign30 || {}, "JavaScripts/configs/Eyeshadow" ], [ foreign31 || {}, "JavaScripts/configs/Face" ], [ foreign32 || {}, "JavaScripts/configs/FaceExpression" ], [ foreign33 || {}, "JavaScripts/configs/FaceTattoo" ], [ foreign34 || {}, "JavaScripts/configs/Facing" ], [ foreign35 || {}, "JavaScripts/configs/FantasyModelingOutfit" ], [ foreign36 || {}, "JavaScripts/configs/FootCoverShoes" ], [ foreign37 || {}, "JavaScripts/configs/FrontHair" ], [ foreign38 || {}, "JavaScripts/configs/FullHair" ], [ foreign39 || {}, "JavaScripts/configs/GameConfig" ], [ foreign40 || {}, "JavaScripts/configs/Gloves" ], [ foreign41 || {}, "JavaScripts/configs/GlovesGloves" ], [ foreign42 || {}, "JavaScripts/configs/HeroStylingOutfit" ], [ foreign43 || {}, "JavaScripts/configs/HighHeelsShoes" ], [ foreign44 || {}, "JavaScripts/configs/Hip" ], [ foreign45 || {}, "JavaScripts/configs/HolidayStylingOutfit" ], [ foreign46 || {}, "JavaScripts/configs/Interact" ], [ foreign47 || {}, "JavaScripts/configs/Language" ], [ foreign48 || {}, "JavaScripts/configs/LeftHand" ], [ foreign49 || {}, "JavaScripts/configs/Lens" ], [ foreign50 || {}, "JavaScripts/configs/LipMakeup" ], [ foreign51 || {}, "JavaScripts/configs/LongPantsBottom" ], [ foreign52 || {}, "JavaScripts/configs/LongSinglePieceTop" ], [ foreign53 || {}, "JavaScripts/configs/LongSkirtBottom" ], [ foreign54 || {}, "JavaScripts/configs/LowerHighlight" ], [ foreign55 || {}, "JavaScripts/configs/MuppetStylingOutfit" ], [ foreign56 || {}, "JavaScripts/configs/Music" ], [ foreign57 || {}, "JavaScripts/configs/NakedDressShoes" ], [ foreign58 || {}, "JavaScripts/configs/Outfit" ], [ foreign59 || {}, "JavaScripts/configs/Pet" ], [ foreign60 || {}, "JavaScripts/configs/PupilStyle" ], [ foreign61 || {}, "JavaScripts/configs/RightHand" ], [ foreign62 || {}, "JavaScripts/configs/ScienceFictionStylingOutfit" ], [ foreign63 || {}, "JavaScripts/configs/ShareId" ], [ foreign64 || {}, "JavaScripts/configs/Shoes" ], [ foreign65 || {}, "JavaScripts/configs/ShortJacketTop" ], [ foreign66 || {}, "JavaScripts/configs/ShortsBottom" ], [ foreign67 || {}, "JavaScripts/configs/ShortSinglePieceTop" ], [ foreign68 || {}, "JavaScripts/configs/ShortSkirtBottom" ], [ foreign69 || {}, "JavaScripts/configs/Shoulder" ], [ foreign70 || {}, "JavaScripts/configs/Sit" ], [ foreign71 || {}, "JavaScripts/configs/SkinTone" ], [ foreign72 || {}, "JavaScripts/configs/SportsShoesShoes" ], [ foreign73 || {}, "JavaScripts/configs/SuitTop" ], [ foreign74 || {}, "JavaScripts/configs/Tab1" ], [ foreign75 || {}, "JavaScripts/configs/Tab2" ], [ foreign76 || {}, "JavaScripts/configs/Tab3" ], [ foreign77 || {}, "JavaScripts/configs/TightsBottom" ], [ foreign78 || {}, "JavaScripts/configs/Top" ], [ foreign79 || {}, "JavaScripts/configs/Trailing" ], [ foreign80 || {}, "JavaScripts/configs/UpperHighlight" ], [ foreign81 || {}, "JavaScripts/GameStart" ], [ foreign82 || {}, "JavaScripts/GlobalData" ], [ foreign83 || {}, "JavaScripts/module/AdModule/ui/AdPanel" ], [ foreign84 || {}, "JavaScripts/module/CharacterModule/CharacterData" ], [ foreign85 || {}, "JavaScripts/module/CharacterModule/CharacterModuleC" ], [ foreign86 || {}, "JavaScripts/module/CharacterModule/CharacterModuleS" ], [ foreign87 || {}, "JavaScripts/module/DanMuModule/Bubble" ], [ foreign88 || {}, "JavaScripts/module/DanMuModule/Buff" ], [ foreign89 || {}, "JavaScripts/module/DanMuModule/DanMuData" ], [ foreign90 || {}, "JavaScripts/module/DanMuModule/DanMuModuleC" ], [ foreign91 || {}, "JavaScripts/module/DanMuModule/DanMuModuleS" ], [ foreign92 || {}, "JavaScripts/module/DanMuModule/ui/ActionItem" ], [ foreign93 || {}, "JavaScripts/module/DanMuModule/ui/ActionTabItem" ], [ foreign94 || {}, "JavaScripts/module/DanMuModule/ui/BagItem" ], [ foreign95 || {}, "JavaScripts/module/DanMuModule/ui/BagTabItem" ], [ foreign96 || {}, "JavaScripts/module/DanMuModule/ui/ChatItem1" ], [ foreign97 || {}, "JavaScripts/module/DanMuModule/ui/ChatItem2" ], [ foreign98 || {}, "JavaScripts/module/DanMuModule/ui/ChatPanel" ], [ foreign99 || {}, "JavaScripts/module/DanMuModule/ui/DanMuPanel" ], [ foreign100 || {}, "JavaScripts/module/DanMuModule/ui/ExpressionItem" ], [ foreign101 || {}, "JavaScripts/module/GmModule/GMService" ], [ foreign102 || {}, "JavaScripts/module/HUDModule/HUDModule" ], [ foreign103 || {}, "JavaScripts/module/InteractionModule/InteractionModule" ], [ foreign104 || {}, "JavaScripts/module/MallModule/Mall" ], [ foreign105 || {}, "JavaScripts/module/MallModule/MallData" ], [ foreign106 || {}, "JavaScripts/module/MallModule/MallModuleC" ], [ foreign107 || {}, "JavaScripts/module/MallModule/MallModuleS" ], [ foreign108 || {}, "JavaScripts/module/MallModule/ui/ColorPickPanel" ], [ foreign109 || {}, "JavaScripts/module/MallModule/ui/ColorPickTab1" ], [ foreign110 || {}, "JavaScripts/module/MallModule/ui/ColorPickTab2" ], [ foreign111 || {}, "JavaScripts/module/MallModule/ui/ColorPickTab3" ], [ foreign112 || {}, "JavaScripts/module/MallModule/ui/MallItem_Big" ], [ foreign113 || {}, "JavaScripts/module/MallModule/ui/MallItem_Character" ], [ foreign114 || {}, "JavaScripts/module/MallModule/ui/MallItem_Color" ], [ foreign115 || {}, "JavaScripts/module/MallModule/ui/MallItem_Self" ], [ foreign116 || {}, "JavaScripts/module/MallModule/ui/MallItem_Small" ], [ foreign117 || {}, "JavaScripts/module/MallModule/ui/MallPanel" ], [ foreign118 || {}, "JavaScripts/module/MallModule/ui/MallTab1" ], [ foreign119 || {}, "JavaScripts/module/MallModule/ui/MallTab2" ], [ foreign120 || {}, "JavaScripts/module/MallModule/ui/MallTab3" ], [ foreign121 || {}, "JavaScripts/module/MallModule/ui/MallTipsPanel" ], [ foreign122 || {}, "JavaScripts/module/NavigationModule/NavigationModule" ], [ foreign123 || {}, "JavaScripts/module/RankModule/RankData" ], [ foreign124 || {}, "JavaScripts/module/RankModule/RankModuleC" ], [ foreign125 || {}, "JavaScripts/module/RankModule/RankModuleS" ], [ foreign126 || {}, "JavaScripts/module/RankModule/ui/RankPanel" ], [ foreign127 || {}, "JavaScripts/module/RankModule/ui/RoomItem" ], [ foreign128 || {}, "JavaScripts/module/RankModule/ui/WorldItem" ], [ foreign129 || {}, "JavaScripts/module/SetModule/SetModule" ], [ foreign130 || {}, "JavaScripts/module/SetModule/ui/SetPanel" ], [ foreign131 || {}, "JavaScripts/module/SignInModule/SignInData" ], [ foreign132 || {}, "JavaScripts/module/SignInModule/SignInModuleC" ], [ foreign133 || {}, "JavaScripts/module/SignInModule/SignInModuleS" ], [ foreign134 || {}, "JavaScripts/module/SignInModule/ui/SignInItem" ], [ foreign135 || {}, "JavaScripts/module/SignInModule/ui/SignInPanel" ], [ foreign136 || {}, "JavaScripts/module/TryOnModule/TryOnModule" ], [ foreign137 || {}, "JavaScripts/tools/AvatarApi" ], [ foreign138 || {}, "JavaScripts/tools/AvatarDecora" ], [ foreign139 || {}, "JavaScripts/tools/CameraManager" ], [ foreign140 || {}, "JavaScripts/tools/CopyCharacter" ], [ foreign141 || {}, "JavaScripts/tools/FreeCamera" ], [ foreign142 || {}, "JavaScripts/tools/MapEx" ], [ foreign143 || {}, "JavaScripts/tools/TouchScript" ], [ foreign144 || {}, "JavaScripts/tools/ui/LoadingPanel" ], [ foreign145 || {}, "JavaScripts/tools/Utils" ], [ foreign146 || {}, "JavaScripts/tools/WaitingQueue" ], [ foreign147 || {}, "JavaScripts/ui-generate/common/notice/NoticeView_generate" ], [ foreign148 || {}, "JavaScripts/ui-generate/common/notice/SecondNoticeItem_generate" ], [ foreign149 || {}, "JavaScripts/ui-generate/common/notice/TopNoticeItem_generate" ], [ foreign150 || {}, "JavaScripts/ui-generate/module/AdModule/AdPanel_generate" ], [ foreign151 || {}, "JavaScripts/ui-generate/module/AdModule/TipsPanel_generate" ], [ foreign152 || {}, "JavaScripts/ui-generate/module/DanMuModule/ActionItem_generate" ], [ foreign153 || {}, "JavaScripts/ui-generate/module/DanMuModule/ActionTabItem_generate" ], [ foreign154 || {}, "JavaScripts/ui-generate/module/DanMuModule/BagItem_generate" ], [ foreign155 || {}, "JavaScripts/ui-generate/module/DanMuModule/BagTabItem_generate" ], [ foreign156 || {}, "JavaScripts/ui-generate/module/DanMuModule/BubbleItem_generate" ], [ foreign157 || {}, "JavaScripts/ui-generate/module/DanMuModule/ChatItem1_generate" ], [ foreign158 || {}, "JavaScripts/ui-generate/module/DanMuModule/ChatItem2_generate" ], [ foreign159 || {}, "JavaScripts/ui-generate/module/DanMuModule/ChatPanel_generate" ], [ foreign160 || {}, "JavaScripts/ui-generate/module/DanMuModule/DanMuPanel_generate" ], [ foreign161 || {}, "JavaScripts/ui-generate/module/DanMuModule/ExpressionItem_generate" ], [ foreign162 || {}, "JavaScripts/ui-generate/module/GMModule/GMHUD_generate" ], [ foreign163 || {}, "JavaScripts/ui-generate/module/GMModule/GMItem_generate" ], [ foreign164 || {}, "JavaScripts/ui-generate/module/HUDModule/HUDItem_generate" ], [ foreign165 || {}, "JavaScripts/ui-generate/module/HUDModule/HUDPanel_generate" ], [ foreign166 || {}, "JavaScripts/ui-generate/module/InteractionModule/GuidePanel_generate" ], [ foreign167 || {}, "JavaScripts/ui-generate/module/InteractionModule/OnClickPanel_generate" ], [ foreign168 || {}, "JavaScripts/ui-generate/module/MallModule/ColorPickPanel_generate" ], [ foreign169 || {}, "JavaScripts/ui-generate/module/MallModule/ColorPickTab1_generate" ], [ foreign170 || {}, "JavaScripts/ui-generate/module/MallModule/ColorPickTab2_generate" ], [ foreign171 || {}, "JavaScripts/ui-generate/module/MallModule/ColorPickTab3_generate" ], [ foreign172 || {}, "JavaScripts/ui-generate/module/MallModule/MallItem_Big_generate" ], [ foreign173 || {}, "JavaScripts/ui-generate/module/MallModule/MallItem_Character_generate" ], [ foreign174 || {}, "JavaScripts/ui-generate/module/MallModule/MallItem_Color_generate" ], [ foreign175 || {}, "JavaScripts/ui-generate/module/MallModule/MallItem_Self_generate" ], [ foreign176 || {}, "JavaScripts/ui-generate/module/MallModule/MallItem_Small_generate" ], [ foreign177 || {}, "JavaScripts/ui-generate/module/MallModule/MallPanel_generate" ], [ foreign178 || {}, "JavaScripts/ui-generate/module/MallModule/MallTab1_generate" ], [ foreign179 || {}, "JavaScripts/ui-generate/module/MallModule/MallTab2_generate" ], [ foreign180 || {}, "JavaScripts/ui-generate/module/MallModule/MallTab3_generate" ], [ foreign181 || {}, "JavaScripts/ui-generate/module/MallModule/MallTipsPanel_generate" ], [ foreign182 || {}, "JavaScripts/ui-generate/module/RankModule/RankPanel_generate" ], [ foreign183 || {}, "JavaScripts/ui-generate/module/RankModule/RoomItem_generate" ], [ foreign184 || {}, "JavaScripts/ui-generate/module/RankModule/WorldItem_generate" ], [ foreign185 || {}, "JavaScripts/ui-generate/module/SetModule/SetPanel_generate" ], [ foreign186 || {}, "JavaScripts/ui-generate/module/ShareModule/SavePanel_generate" ], [ foreign187 || {}, "JavaScripts/ui-generate/module/ShareModule/SharePanel_generate" ], [ foreign188 || {}, "JavaScripts/ui-generate/module/SignInModule/SignInItem_generate" ], [ foreign189 || {}, "JavaScripts/ui-generate/module/SignInModule/SignInPanel_generate" ], [ foreign190 || {}, "JavaScripts/ui-generate/module/TryOnModule/TryOnItem_generate" ], [ foreign191 || {}, "JavaScripts/ui-generate/module/TryOnModule/TryOnPanel_generate" ], [ foreign192 || {}, "JavaScripts/ui-generate/tools/LoadingPanel_generate" ] ]);

exports.MWFileMapping = MWFileMapping;

exports.MWModuleMap = MWModuleMap;
//# sourceMappingURL=game.js.map
